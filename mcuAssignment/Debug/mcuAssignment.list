
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b30  08002b30  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002b30  08002b30  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b30  08002b30  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000030  08002b68  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08002b68  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d290  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed1  00000000  00000000  0002d2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175b2  00000000  00000000  00030a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6b9  00000000  00000000  00047fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cf9  00000000  00000000  0005666b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032dc  00000000  00000000  000dd3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aec 	.word	0x08002aec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002aec 	.word	0x08002aec

0800014c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initStateForButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initStateForButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initStateForButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initStateForButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initStateForButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initStateForButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2100      	movs	r1, #0
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b03      	cmp	r3, #3
 800019e:	dddb      	ble.n	8000158 <initStateForButton+0xc>
	 }
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	200000e0 	.word	0x200000e0
 80001b8:	20000090 	.word	0x20000090
 80001bc:	200000d0 	.word	0x200000d0
 80001c0:	200000c0 	.word	0x200000c0

080001c4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <isButtonPressed+0x30>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2100      	movs	r1, #0
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <isButtonPressed+0x24>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	200000c0 	.word	0x200000c0

080001f8 <subKeyProcess>:

void subKeyProcess(int key_index) {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <subKeyProcess+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2101      	movs	r1, #1
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	200000c0 	.word	0x200000c0

08000218 <getKeyInput>:

void getKeyInput() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e076      	b.n	8000312 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000224:	4a3f      	ldr	r2, [pc, #252]	; (8000324 <getKeyInput+0x10c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	493e      	ldr	r1, [pc, #248]	; (8000328 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000234:	4a3d      	ldr	r2, [pc, #244]	; (800032c <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4939      	ldr	r1, [pc, #228]	; (8000324 <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000244:	4a3a      	ldr	r2, [pc, #232]	; (8000330 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4939      	ldr	r1, [pc, #228]	; (8000334 <getKeyInput+0x11c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f001 fae0 	bl	800181c <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	4619      	mov	r1, r3
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <getKeyInput+0x114>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <getKeyInput+0x110>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	492c      	ldr	r1, [pc, #176]	; (8000324 <getKeyInput+0x10c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d147      	bne.n	800030c <getKeyInput+0xf4>
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	4929      	ldr	r1, [pc, #164]	; (800032c <getKeyInput+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028c:	429a      	cmp	r2, r3
 800028e:	d13d      	bne.n	800030c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 8000290:	4a29      	ldr	r2, [pc, #164]	; (8000338 <getKeyInput+0x120>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <getKeyInput+0x114>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d016      	beq.n	80002d2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <getKeyInput+0x114>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4922      	ldr	r1, [pc, #136]	; (8000338 <getKeyInput+0x120>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <getKeyInput+0x114>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d125      	bne.n	800030c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ff99 	bl	80001f8 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <getKeyInput+0x124>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	21c8      	movs	r1, #200	; 0xc8
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d0:	e01c      	b.n	800030c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80002d2:	4a1a      	ldr	r2, [pc, #104]	; (800033c <getKeyInput+0x124>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4917      	ldr	r1, [pc, #92]	; (800033c <getKeyInput+0x124>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <getKeyInput+0x124>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dc0d      	bgt.n	800030c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <getKeyInput+0x114>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <getKeyInput+0xea>
						subKeyProcess(i);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff7b 	bl	80001f8 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <getKeyInput+0x124>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	21c8      	movs	r1, #200	; 0xc8
 8000308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b03      	cmp	r3, #3
 8000316:	dd85      	ble.n	8000224 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000b0 	.word	0x200000b0
 8000328:	200000a0 	.word	0x200000a0
 800032c:	200000e0 	.word	0x200000e0
 8000330:	20000008 	.word	0x20000008
 8000334:	20000000 	.word	0x20000000
 8000338:	20000090 	.word	0x20000090
 800033c:	200000d0 	.word	0x200000d0

08000340 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3b0a      	subs	r3, #10
 800034c:	2b0d      	cmp	r3, #13
 800034e:	f200 80b9 	bhi.w	80004c4 <displayLed+0x184>
 8000352:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <displayLed+0x18>)
 8000354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000358:	08000391 	.word	0x08000391
 800035c:	080003bd 	.word	0x080003bd
 8000360:	080003e9 	.word	0x080003e9
 8000364:	080004c5 	.word	0x080004c5
 8000368:	080004c5 	.word	0x080004c5
 800036c:	080004c5 	.word	0x080004c5
 8000370:	080004c5 	.word	0x080004c5
 8000374:	080004c5 	.word	0x080004c5
 8000378:	080004c5 	.word	0x080004c5
 800037c:	080004c5 	.word	0x080004c5
 8000380:	08000415 	.word	0x08000415
 8000384:	08000441 	.word	0x08000441
 8000388:	0800046d 	.word	0x0800046d
 800038c:	08000499 	.word	0x08000499
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	484e      	ldr	r0, [pc, #312]	; (80004d0 <displayLed+0x190>)
 8000398:	f001 fa57 	bl	800184a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	484c      	ldr	r0, [pc, #304]	; (80004d4 <displayLed+0x194>)
 80003a2:	f001 fa52 	bl	800184a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2120      	movs	r1, #32
 80003aa:	484a      	ldr	r0, [pc, #296]	; (80004d4 <displayLed+0x194>)
 80003ac:	f001 fa4d 	bl	800184a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	4847      	ldr	r0, [pc, #284]	; (80004d4 <displayLed+0x194>)
 80003b6:	f001 fa48 	bl	800184a <HAL_GPIO_WritePin>


		break;
 80003ba:	e084      	b.n	80004c6 <displayLed+0x186>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4843      	ldr	r0, [pc, #268]	; (80004d0 <displayLed+0x190>)
 80003c4:	f001 fa41 	bl	800184a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4841      	ldr	r0, [pc, #260]	; (80004d4 <displayLed+0x194>)
 80003ce:	f001 fa3c 	bl	800184a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2120      	movs	r1, #32
 80003d6:	483f      	ldr	r0, [pc, #252]	; (80004d4 <displayLed+0x194>)
 80003d8:	f001 fa37 	bl	800184a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	483c      	ldr	r0, [pc, #240]	; (80004d4 <displayLed+0x194>)
 80003e2:	f001 fa32 	bl	800184a <HAL_GPIO_WritePin>
		break;
 80003e6:	e06e      	b.n	80004c6 <displayLed+0x186>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	4838      	ldr	r0, [pc, #224]	; (80004d0 <displayLed+0x190>)
 80003f0:	f001 fa2b 	bl	800184a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	4836      	ldr	r0, [pc, #216]	; (80004d4 <displayLed+0x194>)
 80003fa:	f001 fa26 	bl	800184a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4834      	ldr	r0, [pc, #208]	; (80004d4 <displayLed+0x194>)
 8000404:	f001 fa21 	bl	800184a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	4831      	ldr	r0, [pc, #196]	; (80004d4 <displayLed+0x194>)
 800040e:	f001 fa1c 	bl	800184a <HAL_GPIO_WritePin>
		break;
 8000412:	e058      	b.n	80004c6 <displayLed+0x186>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041a:	482d      	ldr	r0, [pc, #180]	; (80004d0 <displayLed+0x190>)
 800041c:	f001 fa15 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2108      	movs	r1, #8
 8000424:	482b      	ldr	r0, [pc, #172]	; (80004d4 <displayLed+0x194>)
 8000426:	f001 fa10 	bl	800184a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2120      	movs	r1, #32
 800042e:	4829      	ldr	r0, [pc, #164]	; (80004d4 <displayLed+0x194>)
 8000430:	f001 fa0b 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2110      	movs	r1, #16
 8000438:	4826      	ldr	r0, [pc, #152]	; (80004d4 <displayLed+0x194>)
 800043a:	f001 fa06 	bl	800184a <HAL_GPIO_WritePin>
//		if(turnPedestrianLight == 1){
//			// pedestrian light
//			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
//			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
//		}
		break;
 800043e:	e042      	b.n	80004c6 <displayLed+0x186>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000446:	4822      	ldr	r0, [pc, #136]	; (80004d0 <displayLed+0x190>)
 8000448:	f001 f9ff 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2108      	movs	r1, #8
 8000450:	4820      	ldr	r0, [pc, #128]	; (80004d4 <displayLed+0x194>)
 8000452:	f001 f9fa 	bl	800184a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2120      	movs	r1, #32
 800045a:	481e      	ldr	r0, [pc, #120]	; (80004d4 <displayLed+0x194>)
 800045c:	f001 f9f5 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2110      	movs	r1, #16
 8000464:	481b      	ldr	r0, [pc, #108]	; (80004d4 <displayLed+0x194>)
 8000466:	f001 f9f0 	bl	800184a <HAL_GPIO_WritePin>
//		if(turnPedestrianLight == 1){
//					// pedestrian light
//		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
//		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
//	}
		break;
 800046a:	e02c      	b.n	80004c6 <displayLed+0x186>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000472:	4817      	ldr	r0, [pc, #92]	; (80004d0 <displayLed+0x190>)
 8000474:	f001 f9e9 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2108      	movs	r1, #8
 800047c:	4815      	ldr	r0, [pc, #84]	; (80004d4 <displayLed+0x194>)
 800047e:	f001 f9e4 	bl	800184a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2120      	movs	r1, #32
 8000486:	4813      	ldr	r0, [pc, #76]	; (80004d4 <displayLed+0x194>)
 8000488:	f001 f9df 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2110      	movs	r1, #16
 8000490:	4810      	ldr	r0, [pc, #64]	; (80004d4 <displayLed+0x194>)
 8000492:	f001 f9da 	bl	800184a <HAL_GPIO_WritePin>
//
//		// pedestrian light
//		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
//		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
//		}
		break;
 8000496:	e016      	b.n	80004c6 <displayLed+0x186>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049e:	480c      	ldr	r0, [pc, #48]	; (80004d0 <displayLed+0x190>)
 80004a0:	f001 f9d3 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2108      	movs	r1, #8
 80004a8:	480a      	ldr	r0, [pc, #40]	; (80004d4 <displayLed+0x194>)
 80004aa:	f001 f9ce 	bl	800184a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2120      	movs	r1, #32
 80004b2:	4808      	ldr	r0, [pc, #32]	; (80004d4 <displayLed+0x194>)
 80004b4:	f001 f9c9 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2110      	movs	r1, #16
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <displayLed+0x194>)
 80004be:	f001 f9c4 	bl	800184a <HAL_GPIO_WritePin>
//
//		// pedestrian light
//		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
//		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
//		}
		break;
 80004c2:	e000      	b.n	80004c6 <displayLed+0x186>
//		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
//		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
//		break;

	default:
		break;
 80004c4:	bf00      	nop
	}
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010800 	.word	0x40010800
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <switchMode2>:
 */

#include "fsm_automatic.h"


void switchMode2() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	status = RED_MAN;
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <switchMode2+0x24>)
 80004de:	220a      	movs	r2, #10
 80004e0:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <switchMode2+0x28>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a07      	ldr	r2, [pc, #28]	; (8000504 <switchMode2+0x2c>)
 80004e8:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 80004ea:	2064      	movs	r0, #100	; 0x64
 80004ec:	f000 fcda 	bl	8000ea4 <setTimer2>
	setTimer4(25);
 80004f0:	2019      	movs	r0, #25
 80004f2:	f000 fceb 	bl	8000ecc <setTimer4>

//	updateLedBufferVal(counter1/10, 2, counter1%10, 2);
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000058 	.word	0x20000058
 8000500:	20000018 	.word	0x20000018
 8000504:	2000004c 	.word	0x2000004c

08000508 <displayLedPes>:
int turnPedestrianLight = 0;
int statusPedestrian = 0;


int ledPedestrian = 0;
void displayLedPes (int ledPedestrian) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	switch(ledPedestrian){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b1e      	cmp	r3, #30
 8000514:	d003      	beq.n	800051e <displayLedPes+0x16>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b1f      	cmp	r3, #31
 800051a:	d00d      	beq.n	8000538 <displayLedPes+0x30>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;

	default:
		break;
 800051c:	e019      	b.n	8000552 <displayLedPes+0x4a>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <displayLedPes+0x54>)
 8000526:	f001 f990 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <displayLedPes+0x58>)
 8000532:	f001 f98a 	bl	800184a <HAL_GPIO_WritePin>
		break;
 8000536:	e00c      	b.n	8000552 <displayLedPes+0x4a>
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <displayLedPes+0x54>)
 8000540:	f001 f983 	bl	800184a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <displayLedPes+0x58>)
 800054c:	f001 f97d 	bl	800184a <HAL_GPIO_WritePin>
		break;
 8000550:	bf00      	nop
	}
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010c00 	.word	0x40010c00
 8000560:	40010800 	.word	0x40010800

08000564 <fsm_pedestrian>:
void fsm_pedestrian(){
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <fsm_pedestrian+0x70>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b20      	cmp	r3, #32
 800056e:	d002      	beq.n	8000576 <fsm_pedestrian+0x12>
 8000570:	2b21      	cmp	r3, #33	; 0x21
 8000572:	d013      	beq.n	800059c <fsm_pedestrian+0x38>
			statusPedestrian = GREEN_ON;
			setTimer6((greenTimer + yellowTimer)*100);
		}
		break;
	default:
		break;
 8000574:	e02b      	b.n	80005ce <fsm_pedestrian+0x6a>
		displayLedPes(PES_GREEN);
 8000576:	201e      	movs	r0, #30
 8000578:	f7ff ffc6 	bl	8000508 <displayLedPes>
		if(timer6_flag == 1){
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <fsm_pedestrian+0x74>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d121      	bne.n	80005c8 <fsm_pedestrian+0x64>
			statusPedestrian = RED_ON;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <fsm_pedestrian+0x70>)
 8000586:	2221      	movs	r2, #33	; 0x21
 8000588:	601a      	str	r2, [r3, #0]
			setTimer6(redTimer*100);
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <fsm_pedestrian+0x78>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2264      	movs	r2, #100	; 0x64
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fcc1 	bl	8000f1c <setTimer6>
		break;
 800059a:	e015      	b.n	80005c8 <fsm_pedestrian+0x64>
		displayLedPes(PES_RED);
 800059c:	201f      	movs	r0, #31
 800059e:	f7ff ffb3 	bl	8000508 <displayLedPes>
		if(timer6_flag == 1){
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <fsm_pedestrian+0x74>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d110      	bne.n	80005cc <fsm_pedestrian+0x68>
			statusPedestrian = GREEN_ON;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <fsm_pedestrian+0x70>)
 80005ac:	2220      	movs	r2, #32
 80005ae:	601a      	str	r2, [r3, #0]
			setTimer6((greenTimer + yellowTimer)*100);
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <fsm_pedestrian+0x7c>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <fsm_pedestrian+0x80>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4413      	add	r3, r2
 80005ba:	2264      	movs	r2, #100	; 0x64
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fcab 	bl	8000f1c <setTimer6>
		break;
 80005c6:	e001      	b.n	80005cc <fsm_pedestrian+0x68>
		break;
 80005c8:	bf00      	nop
 80005ca:	e000      	b.n	80005ce <fsm_pedestrian+0x6a>
		break;
 80005cc:	bf00      	nop
	}
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000054 	.word	0x20000054
 80005d8:	20000088 	.word	0x20000088
 80005dc:	20000018 	.word	0x20000018
 80005e0:	20000020 	.word	0x20000020
 80005e4:	2000001c 	.word	0x2000001c

080005e8 <fsm_automatic_run>:
void fsm_automatic_run() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	switch(status) {
 80005ec:	4b96      	ldr	r3, [pc, #600]	; (8000848 <fsm_automatic_run+0x260>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3b01      	subs	r3, #1
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	f200 811c 	bhi.w	8000830 <fsm_automatic_run+0x248>
 80005f8:	a201      	add	r2, pc, #4	; (adr r2, 8000600 <fsm_automatic_run+0x18>)
 80005fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fe:	bf00      	nop
 8000600:	08000615 	.word	0x08000615
 8000604:	0800064f 	.word	0x0800064f
 8000608:	080006ed 	.word	0x080006ed
 800060c:	08000755 	.word	0x08000755
 8000610:	080007c9 	.word	0x080007c9
	case INIT:
		//turnOffLed();

		status = RED1_GREEN2_AUTO;
 8000614:	4b8c      	ldr	r3, [pc, #560]	; (8000848 <fsm_automatic_run+0x260>)
 8000616:	2202      	movs	r2, #2
 8000618:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 800061a:	4b8c      	ldr	r3, [pc, #560]	; (800084c <fsm_automatic_run+0x264>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a8c      	ldr	r2, [pc, #560]	; (8000850 <fsm_automatic_run+0x268>)
 8000620:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000622:	4b8c      	ldr	r3, [pc, #560]	; (8000854 <fsm_automatic_run+0x26c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a8c      	ldr	r2, [pc, #560]	; (8000858 <fsm_automatic_run+0x270>)
 8000628:	6013      	str	r3, [r2, #0]


//		updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		setTimer1(greenTimer*100);
 800062a:	4b8a      	ldr	r3, [pc, #552]	; (8000854 <fsm_automatic_run+0x26c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2264      	movs	r2, #100	; 0x64
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fc21 	bl	8000e7c <setTimer1>
		setTimer2(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 fc32 	bl	8000ea4 <setTimer2>
		setTimer5(25);
 8000640:	2019      	movs	r0, #25
 8000642:	f000 fc57 	bl	8000ef4 <setTimer5>
		setTimer6(3);
 8000646:	2003      	movs	r0, #3
 8000648:	f000 fc68 	bl	8000f1c <setTimer6>
		break;
 800064c:	e0f9      	b.n	8000842 <fsm_automatic_run+0x25a>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 800064e:	2014      	movs	r0, #20
 8000650:	f7ff fe76 	bl	8000340 <displayLed>
		if (isButtonPressed(3)) {
 8000654:	2003      	movs	r0, #3
 8000656:	f7ff fdb5 	bl	80001c4 <isButtonPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00d      	beq.n	800067c <fsm_automatic_run+0x94>
			statusPedestrian = GREEN_ON;
 8000660:	4b7e      	ldr	r3, [pc, #504]	; (800085c <fsm_automatic_run+0x274>)
 8000662:	2220      	movs	r2, #32
 8000664:	601a      	str	r2, [r3, #0]
			setTimer6((greenTimer + yellowTimer)*100);
 8000666:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <fsm_automatic_run+0x26c>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b7d      	ldr	r3, [pc, #500]	; (8000860 <fsm_automatic_run+0x278>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	2264      	movs	r2, #100	; 0x64
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fc50 	bl	8000f1c <setTimer6>
		}
		if(timer2_flag == 1) {
 800067c:	4b79      	ldr	r3, [pc, #484]	; (8000864 <fsm_automatic_run+0x27c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10c      	bne.n	800069e <fsm_automatic_run+0xb6>
			setTimer2(100);
 8000684:	2064      	movs	r0, #100	; 0x64
 8000686:	f000 fc0d 	bl	8000ea4 <setTimer2>
			counter1--;
 800068a:	4b71      	ldr	r3, [pc, #452]	; (8000850 <fsm_automatic_run+0x268>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	3b01      	subs	r3, #1
 8000690:	4a6f      	ldr	r2, [pc, #444]	; (8000850 <fsm_automatic_run+0x268>)
 8000692:	6013      	str	r3, [r2, #0]
			counter2--;
 8000694:	4b70      	ldr	r3, [pc, #448]	; (8000858 <fsm_automatic_run+0x270>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	3b01      	subs	r3, #1
 800069a:	4a6f      	ldr	r2, [pc, #444]	; (8000858 <fsm_automatic_run+0x270>)
 800069c:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 800069e:	4b72      	ldr	r3, [pc, #456]	; (8000868 <fsm_automatic_run+0x280>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d118      	bne.n	80006d8 <fsm_automatic_run+0xf0>
			status = RED1_YELLOW2_AUTO;
 80006a6:	4b68      	ldr	r3, [pc, #416]	; (8000848 <fsm_automatic_run+0x260>)
 80006a8:	2203      	movs	r2, #3
 80006aa:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 80006ac:	4b67      	ldr	r3, [pc, #412]	; (800084c <fsm_automatic_run+0x264>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b68      	ldr	r3, [pc, #416]	; (8000854 <fsm_automatic_run+0x26c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	2264      	movs	r2, #100	; 0x64
 80006b8:	fb02 f303 	mul.w	r3, r2, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fbdd 	bl	8000e7c <setTimer1>
			counter1 = redTimer-greenTimer;
 80006c2:	4b62      	ldr	r3, [pc, #392]	; (800084c <fsm_automatic_run+0x264>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b63      	ldr	r3, [pc, #396]	; (8000854 <fsm_automatic_run+0x26c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4a60      	ldr	r2, [pc, #384]	; (8000850 <fsm_automatic_run+0x268>)
 80006ce:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 80006d0:	4b63      	ldr	r3, [pc, #396]	; (8000860 <fsm_automatic_run+0x278>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a60      	ldr	r2, [pc, #384]	; (8000858 <fsm_automatic_run+0x270>)
 80006d6:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 80006d8:	2000      	movs	r0, #0
 80006da:	f7ff fd73 	bl	80001c4 <isButtonPressed>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f000 80a7 	beq.w	8000834 <fsm_automatic_run+0x24c>
			switchMode2();
 80006e6:	f7ff fef7 	bl	80004d8 <switchMode2>
		}

		break;
 80006ea:	e0a3      	b.n	8000834 <fsm_automatic_run+0x24c>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 80006ec:	2015      	movs	r0, #21
 80006ee:	f7ff fe27 	bl	8000340 <displayLed>
		if(timer2_flag == 1) {
 80006f2:	4b5c      	ldr	r3, [pc, #368]	; (8000864 <fsm_automatic_run+0x27c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d10c      	bne.n	8000714 <fsm_automatic_run+0x12c>
			setTimer2(100);
 80006fa:	2064      	movs	r0, #100	; 0x64
 80006fc:	f000 fbd2 	bl	8000ea4 <setTimer2>
			counter1--;
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <fsm_automatic_run+0x268>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3b01      	subs	r3, #1
 8000706:	4a52      	ldr	r2, [pc, #328]	; (8000850 <fsm_automatic_run+0x268>)
 8000708:	6013      	str	r3, [r2, #0]
			counter2--;
 800070a:	4b53      	ldr	r3, [pc, #332]	; (8000858 <fsm_automatic_run+0x270>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a51      	ldr	r2, [pc, #324]	; (8000858 <fsm_automatic_run+0x270>)
 8000712:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 8000714:	4b54      	ldr	r3, [pc, #336]	; (8000868 <fsm_automatic_run+0x280>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d112      	bne.n	8000742 <fsm_automatic_run+0x15a>
			status = GREEN1_RED2_AUTO;
 800071c:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <fsm_automatic_run+0x260>)
 800071e:	2204      	movs	r2, #4
 8000720:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000722:	4b4c      	ldr	r3, [pc, #304]	; (8000854 <fsm_automatic_run+0x26c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2264      	movs	r2, #100	; 0x64
 8000728:	fb02 f303 	mul.w	r3, r2, r3
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fba5 	bl	8000e7c <setTimer1>
			counter1 = greenTimer;
 8000732:	4b48      	ldr	r3, [pc, #288]	; (8000854 <fsm_automatic_run+0x26c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a46      	ldr	r2, [pc, #280]	; (8000850 <fsm_automatic_run+0x268>)
 8000738:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 800073a:	4b44      	ldr	r3, [pc, #272]	; (800084c <fsm_automatic_run+0x264>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a46      	ldr	r2, [pc, #280]	; (8000858 <fsm_automatic_run+0x270>)
 8000740:	6013      	str	r3, [r2, #0]
		}
//		if (isButtonPressed(3)) {
//					turnPedestrianLight = 1;
//				}

		if(isButtonPressed(0)) {
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fd3e 	bl	80001c4 <isButtonPressed>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d074      	beq.n	8000838 <fsm_automatic_run+0x250>
			switchMode2();
 800074e:	f7ff fec3 	bl	80004d8 <switchMode2>
		}
		break;
 8000752:	e071      	b.n	8000838 <fsm_automatic_run+0x250>
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000754:	2016      	movs	r0, #22
 8000756:	f7ff fdf3 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <fsm_automatic_run+0x27c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d10c      	bne.n	800077c <fsm_automatic_run+0x194>
			setTimer2(100);
 8000762:	2064      	movs	r0, #100	; 0x64
 8000764:	f000 fb9e 	bl	8000ea4 <setTimer2>
			counter1--;
 8000768:	4b39      	ldr	r3, [pc, #228]	; (8000850 <fsm_automatic_run+0x268>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a38      	ldr	r2, [pc, #224]	; (8000850 <fsm_automatic_run+0x268>)
 8000770:	6013      	str	r3, [r2, #0]
			counter2--;
 8000772:	4b39      	ldr	r3, [pc, #228]	; (8000858 <fsm_automatic_run+0x270>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a37      	ldr	r2, [pc, #220]	; (8000858 <fsm_automatic_run+0x270>)
 800077a:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 800077c:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <fsm_automatic_run+0x280>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d118      	bne.n	80007b6 <fsm_automatic_run+0x1ce>
			status = YELLOW1_RED2_AUTO;
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <fsm_automatic_run+0x260>)
 8000786:	2205      	movs	r2, #5
 8000788:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 800078a:	4b30      	ldr	r3, [pc, #192]	; (800084c <fsm_automatic_run+0x264>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <fsm_automatic_run+0x26c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	2264      	movs	r2, #100	; 0x64
 8000796:	fb02 f303 	mul.w	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fb6e 	bl	8000e7c <setTimer1>
			counter1 = yellowTimer;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <fsm_automatic_run+0x278>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <fsm_automatic_run+0x268>)
 80007a6:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <fsm_automatic_run+0x264>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b29      	ldr	r3, [pc, #164]	; (8000854 <fsm_automatic_run+0x26c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1ad3      	subs	r3, r2, r3
 80007b2:	4a29      	ldr	r2, [pc, #164]	; (8000858 <fsm_automatic_run+0x270>)
 80007b4:	6013      	str	r3, [r2, #0]
//		if (isButtonPressed(3)) {
//			turnPedestrianLight = 1;
//		}


		if(isButtonPressed(0)) {
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fd04 	bl	80001c4 <isButtonPressed>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d03c      	beq.n	800083c <fsm_automatic_run+0x254>
			switchMode2();
 80007c2:	f7ff fe89 	bl	80004d8 <switchMode2>
		}
		break;
 80007c6:	e039      	b.n	800083c <fsm_automatic_run+0x254>
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 80007c8:	2017      	movs	r0, #23
 80007ca:	f7ff fdb9 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 80007ce:	4b25      	ldr	r3, [pc, #148]	; (8000864 <fsm_automatic_run+0x27c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d10c      	bne.n	80007f0 <fsm_automatic_run+0x208>
			setTimer2(100);
 80007d6:	2064      	movs	r0, #100	; 0x64
 80007d8:	f000 fb64 	bl	8000ea4 <setTimer2>
			counter1--;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <fsm_automatic_run+0x268>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <fsm_automatic_run+0x268>)
 80007e4:	6013      	str	r3, [r2, #0]
			counter2--;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <fsm_automatic_run+0x270>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a1a      	ldr	r2, [pc, #104]	; (8000858 <fsm_automatic_run+0x270>)
 80007ee:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <fsm_automatic_run+0x280>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d112      	bne.n	800081e <fsm_automatic_run+0x236>
			status = RED1_GREEN2_AUTO;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <fsm_automatic_run+0x260>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <fsm_automatic_run+0x26c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2264      	movs	r2, #100	; 0x64
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fb37 	bl	8000e7c <setTimer1>
			counter1 = redTimer;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <fsm_automatic_run+0x264>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <fsm_automatic_run+0x268>)
 8000814:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <fsm_automatic_run+0x26c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <fsm_automatic_run+0x270>)
 800081c:	6013      	str	r3, [r2, #0]
		}
//		if (isButtonPressed(3)) {
//			turnPedestrianLight = 1;
//		}

		if(isButtonPressed(0)) {
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fcd0 	bl	80001c4 <isButtonPressed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d00a      	beq.n	8000840 <fsm_automatic_run+0x258>
			switchMode2();
 800082a:	f7ff fe55 	bl	80004d8 <switchMode2>
		}
		break;
 800082e:	e007      	b.n	8000840 <fsm_automatic_run+0x258>
	default:
		break;
 8000830:	bf00      	nop
 8000832:	e006      	b.n	8000842 <fsm_automatic_run+0x25a>
		break;
 8000834:	bf00      	nop
 8000836:	e004      	b.n	8000842 <fsm_automatic_run+0x25a>
		break;
 8000838:	bf00      	nop
 800083a:	e002      	b.n	8000842 <fsm_automatic_run+0x25a>
		break;
 800083c:	bf00      	nop
 800083e:	e000      	b.n	8000842 <fsm_automatic_run+0x25a>
		break;
 8000840:	bf00      	nop
	}
};
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000058 	.word	0x20000058
 800084c:	20000018 	.word	0x20000018
 8000850:	2000004c 	.word	0x2000004c
 8000854:	20000020 	.word	0x20000020
 8000858:	20000050 	.word	0x20000050
 800085c:	20000054 	.word	0x20000054
 8000860:	2000001c 	.word	0x2000001c
 8000864:	20000068 	.word	0x20000068
 8000868:	20000060 	.word	0x20000060

0800086c <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <switchMode3+0x24>)
 8000872:	220b      	movs	r2, #11
 8000874:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <switchMode3+0x28>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <switchMode3+0x2c>)
 800087c:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 800087e:	2064      	movs	r0, #100	; 0x64
 8000880:	f000 fb10 	bl	8000ea4 <setTimer2>
	setTimer4(25);
 8000884:	2019      	movs	r0, #25
 8000886:	f000 fb21 	bl	8000ecc <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000058 	.word	0x20000058
 8000894:	2000001c 	.word	0x2000001c
 8000898:	2000004c 	.word	0x2000004c

0800089c <switchMode4>:

void switchMode4() {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <switchMode4+0x24>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <switchMode4+0x28>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <switchMode4+0x2c>)
 80008ac:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 80008ae:	2064      	movs	r0, #100	; 0x64
 80008b0:	f000 faf8 	bl	8000ea4 <setTimer2>
	setTimer4(25);
 80008b4:	2019      	movs	r0, #25
 80008b6:	f000 fb09 	bl	8000ecc <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000058 	.word	0x20000058
 80008c4:	20000020 	.word	0x20000020
 80008c8:	2000004c 	.word	0x2000004c

080008cc <fsm_manual_run>:

void fsm_manual_run() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	switch(status) {
 80008d0:	4b92      	ldr	r3, [pc, #584]	; (8000b1c <fsm_manual_run+0x250>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3b0a      	subs	r3, #10
 80008d6:	2b05      	cmp	r3, #5
 80008d8:	f200 8111 	bhi.w	8000afe <fsm_manual_run+0x232>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <fsm_manual_run+0x18>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	080008fd 	.word	0x080008fd
 80008e8:	080009a7 	.word	0x080009a7
 80008ec:	08000a53 	.word	0x08000a53
 80008f0:	0800093f 	.word	0x0800093f
 80008f4:	080009e9 	.word	0x080009e9
 80008f8:	08000a95 	.word	0x08000a95

	case RED_MAN:
		displayLed(RED_MAN);
 80008fc:	200a      	movs	r0, #10
 80008fe:	f7ff fd1f 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000902:	4b87      	ldr	r3, [pc, #540]	; (8000b20 <fsm_manual_run+0x254>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d102      	bne.n	8000910 <fsm_manual_run+0x44>
			setTimer2(100);
 800090a:	2064      	movs	r0, #100	; 0x64
 800090c:	f000 faca 	bl	8000ea4 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff fc57 	bl	80001c4 <isButtonPressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <fsm_manual_run+0x54>
			switchMode3();
 800091c:	f7ff ffa6 	bl	800086c <switchMode3>
		}

		if(isButtonPressed(1)) {
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fc4f 	bl	80001c4 <isButtonPressed>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	f000 80ea 	beq.w	8000b02 <fsm_manual_run+0x236>
			status = RED_MAN_MODIFY;
 800092e:	4b7b      	ldr	r3, [pc, #492]	; (8000b1c <fsm_manual_run+0x250>)
 8000930:	220d      	movs	r2, #13
 8000932:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 8000934:	4b7b      	ldr	r3, [pc, #492]	; (8000b24 <fsm_manual_run+0x258>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a7b      	ldr	r2, [pc, #492]	; (8000b28 <fsm_manual_run+0x25c>)
 800093a:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 800093c:	e0e1      	b.n	8000b02 <fsm_manual_run+0x236>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 800093e:	200a      	movs	r0, #10
 8000940:	f7ff fcfe 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fc3d 	bl	80001c4 <isButtonPressed>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <fsm_manual_run+0x8a>
			status = RED_MAN;
 8000950:	4b72      	ldr	r3, [pc, #456]	; (8000b1c <fsm_manual_run+0x250>)
 8000952:	220a      	movs	r2, #10
 8000954:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff fc34 	bl	80001c4 <isButtonPressed>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d00b      	beq.n	800097a <fsm_manual_run+0xae>
			timerMan++;
 8000962:	4b71      	ldr	r3, [pc, #452]	; (8000b28 <fsm_manual_run+0x25c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a6f      	ldr	r2, [pc, #444]	; (8000b28 <fsm_manual_run+0x25c>)
 800096a:	6013      	str	r3, [r2, #0]
			if(timerMan > 99) timerMan = 1;
 800096c:	4b6e      	ldr	r3, [pc, #440]	; (8000b28 <fsm_manual_run+0x25c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b63      	cmp	r3, #99	; 0x63
 8000972:	dd02      	ble.n	800097a <fsm_manual_run+0xae>
 8000974:	4b6c      	ldr	r3, [pc, #432]	; (8000b28 <fsm_manual_run+0x25c>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 800097a:	2002      	movs	r0, #2
 800097c:	f7ff fc22 	bl	80001c4 <isButtonPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 80bf 	beq.w	8000b06 <fsm_manual_run+0x23a>
			status = INIT;
 8000988:	4b64      	ldr	r3, [pc, #400]	; (8000b1c <fsm_manual_run+0x250>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
			redTimer = timerMan;
 800098e:	4b66      	ldr	r3, [pc, #408]	; (8000b28 <fsm_manual_run+0x25c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a64      	ldr	r2, [pc, #400]	; (8000b24 <fsm_manual_run+0x258>)
 8000994:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 8000996:	4b63      	ldr	r3, [pc, #396]	; (8000b24 <fsm_manual_run+0x258>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b64      	ldr	r3, [pc, #400]	; (8000b2c <fsm_manual_run+0x260>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	4a63      	ldr	r2, [pc, #396]	; (8000b30 <fsm_manual_run+0x264>)
 80009a2:	6013      	str	r3, [r2, #0]
		}

		break;
 80009a4:	e0af      	b.n	8000b06 <fsm_manual_run+0x23a>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 80009a6:	200b      	movs	r0, #11
 80009a8:	f7ff fcca 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 80009ac:	4b5c      	ldr	r3, [pc, #368]	; (8000b20 <fsm_manual_run+0x254>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d102      	bne.n	80009ba <fsm_manual_run+0xee>
			setTimer2(100);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f000 fa75 	bl	8000ea4 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fc02 	bl	80001c4 <isButtonPressed>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <fsm_manual_run+0xfe>
			switchMode4();
 80009c6:	f7ff ff69 	bl	800089c <switchMode4>
		}

		if(isButtonPressed(1)) {
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff fbfa 	bl	80001c4 <isButtonPressed>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8099 	beq.w	8000b0a <fsm_manual_run+0x23e>
			status = YELLOW_MAN_MODIFY;
 80009d8:	4b50      	ldr	r3, [pc, #320]	; (8000b1c <fsm_manual_run+0x250>)
 80009da:	220e      	movs	r2, #14
 80009dc:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 80009de:	4b53      	ldr	r3, [pc, #332]	; (8000b2c <fsm_manual_run+0x260>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a51      	ldr	r2, [pc, #324]	; (8000b28 <fsm_manual_run+0x25c>)
 80009e4:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 80009e6:	e090      	b.n	8000b0a <fsm_manual_run+0x23e>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 80009e8:	200b      	movs	r0, #11
 80009ea:	f7ff fca9 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fbe8 	bl	80001c4 <isButtonPressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <fsm_manual_run+0x134>
			status = YELLOW_MAN;
 80009fa:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <fsm_manual_run+0x250>)
 80009fc:	220b      	movs	r2, #11
 80009fe:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff fbdf 	bl	80001c4 <isButtonPressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00d      	beq.n	8000a28 <fsm_manual_run+0x15c>
			timerMan++;
 8000a0c:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <fsm_manual_run+0x25c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a45      	ldr	r2, [pc, #276]	; (8000b28 <fsm_manual_run+0x25c>)
 8000a14:	6013      	str	r3, [r2, #0]
			if(timerMan >= redTimer) timerMan = 1;
 8000a16:	4b44      	ldr	r3, [pc, #272]	; (8000b28 <fsm_manual_run+0x25c>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <fsm_manual_run+0x258>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	db02      	blt.n	8000a28 <fsm_manual_run+0x15c>
 8000a22:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <fsm_manual_run+0x25c>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fbcb 	bl	80001c4 <isButtonPressed>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d06c      	beq.n	8000b0e <fsm_manual_run+0x242>
			status = INIT;
 8000a34:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <fsm_manual_run+0x250>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
			yellowTimer = timerMan;
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	; (8000b28 <fsm_manual_run+0x25c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a3b      	ldr	r2, [pc, #236]	; (8000b2c <fsm_manual_run+0x260>)
 8000a40:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <fsm_manual_run+0x258>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <fsm_manual_run+0x260>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	4a38      	ldr	r2, [pc, #224]	; (8000b30 <fsm_manual_run+0x264>)
 8000a4e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a50:	e05d      	b.n	8000b0e <fsm_manual_run+0x242>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8000a52:	200c      	movs	r0, #12
 8000a54:	f7ff fc74 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000a58:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <fsm_manual_run+0x254>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d102      	bne.n	8000a66 <fsm_manual_run+0x19a>
			setTimer2(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fa1f 	bl	8000ea4 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff fbac 	bl	80001c4 <isButtonPressed>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <fsm_manual_run+0x1ac>
			status = INIT;
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <fsm_manual_run+0x250>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f7ff fba3 	bl	80001c4 <isButtonPressed>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d046      	beq.n	8000b12 <fsm_manual_run+0x246>
			status = GREEN_MAN_MODIFY;
 8000a84:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <fsm_manual_run+0x250>)
 8000a86:	220f      	movs	r2, #15
 8000a88:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <fsm_manual_run+0x264>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <fsm_manual_run+0x25c>)
 8000a90:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 8000a92:	e03e      	b.n	8000b12 <fsm_manual_run+0x246>
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8000a94:	200c      	movs	r0, #12
 8000a96:	f7ff fc53 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fb92 	bl	80001c4 <isButtonPressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <fsm_manual_run+0x1e0>
			status = GREEN_MAN;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <fsm_manual_run+0x250>)
 8000aa8:	220c      	movs	r2, #12
 8000aaa:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fb89 	bl	80001c4 <isButtonPressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00d      	beq.n	8000ad4 <fsm_manual_run+0x208>
			timerMan++;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <fsm_manual_run+0x25c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <fsm_manual_run+0x25c>)
 8000ac0:	6013      	str	r3, [r2, #0]
			if(timerMan >= redTimer) timerMan = 1;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <fsm_manual_run+0x25c>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <fsm_manual_run+0x258>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	db02      	blt.n	8000ad4 <fsm_manual_run+0x208>
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <fsm_manual_run+0x25c>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff fb75 	bl	80001c4 <isButtonPressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d01a      	beq.n	8000b16 <fsm_manual_run+0x24a>
			status = INIT;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <fsm_manual_run+0x250>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]
			greenTimer = timerMan;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <fsm_manual_run+0x25c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <fsm_manual_run+0x264>)
 8000aec:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <fsm_manual_run+0x258>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <fsm_manual_run+0x264>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <fsm_manual_run+0x260>)
 8000afa:	6013      	str	r3, [r2, #0]
		}
		break;
 8000afc:	e00b      	b.n	8000b16 <fsm_manual_run+0x24a>
	default:
		break;
 8000afe:	bf00      	nop
 8000b00:	e00a      	b.n	8000b18 <fsm_manual_run+0x24c>
		break;
 8000b02:	bf00      	nop
 8000b04:	e008      	b.n	8000b18 <fsm_manual_run+0x24c>
		break;
 8000b06:	bf00      	nop
 8000b08:	e006      	b.n	8000b18 <fsm_manual_run+0x24c>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <fsm_manual_run+0x24c>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <fsm_manual_run+0x24c>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <fsm_manual_run+0x24c>
		break;
 8000b16:	bf00      	nop
	}
};
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000058 	.word	0x20000058
 8000b20:	20000068 	.word	0x20000068
 8000b24:	20000018 	.word	0x20000018
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	2000001c 	.word	0x2000001c
 8000b30:	20000020 	.word	0x20000020

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b38:	f000 fb7c 	bl	8001234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3c:	f000 f81a 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b40:	f000 f8d2 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b44:	f000 f8a6 	bl	8000c94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b48:	f000 f856 	bl	8000bf8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <main+0x38>)
 8000b4e:	f001 fb15 	bl	800217c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 8000b52:	f7ff fafb 	bl	800014c <initStateForButton>
  status = INIT;
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <main+0x3c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000b5c:	f7ff fd44 	bl	80005e8 <fsm_automatic_run>
	  fsm_manual_run();
 8000b60:	f7ff feb4 	bl	80008cc <fsm_manual_run>
	  fsm_pedestrian();
 8000b64:	f7ff fcfe 	bl	8000564 <fsm_pedestrian>
  {
 8000b68:	e7f8      	b.n	8000b5c <main+0x28>
 8000b6a:	bf00      	nop
 8000b6c:	200000f0 	.word	0x200000f0
 8000b70:	20000058 	.word	0x20000058

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b090      	sub	sp, #64	; 0x40
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	2228      	movs	r2, #40	; 0x28
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 ffaa 	bl	8002adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000baa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fe83 	bl	80018c0 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bc0:	f000 f956 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2102      	movs	r1, #2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f8ee 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bea:	f000 f941 	bl	8000e70 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3740      	adds	r7, #64	; 0x40
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0308 	add.w	r3, r7, #8
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000c1c:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c1e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c2c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c3e:	4814      	ldr	r0, [pc, #80]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c40:	f001 fa4c 	bl	80020dc <HAL_TIM_Base_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c4a:	f000 f911 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c5c:	f001 fbe8 	bl	8002430 <HAL_TIM_ConfigClockSource>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c66:	f000 f903 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	4806      	ldr	r0, [pc, #24]	; (8000c90 <MX_TIM2_Init+0x98>)
 8000c78:	f001 fdbe 	bl	80027f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c82:	f000 f8f5 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000f0 	.word	0x200000f0

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART2_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f001 fe04 	bl	80028d8 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f000 f8cb 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000138 	.word	0x20000138
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfc:	4b51      	ldr	r3, [pc, #324]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a50      	ldr	r2, [pc, #320]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a4a      	ldr	r2, [pc, #296]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a44      	ldr	r2, [pc, #272]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a3e      	ldr	r2, [pc, #248]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b3c      	ldr	r3, [pc, #240]	; (8000e44 <MX_GPIO_Init+0x15c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000d62:	4839      	ldr	r0, [pc, #228]	; (8000e48 <MX_GPIO_Init+0x160>)
 8000d64:	f000 fd71 	bl	800184a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d6e:	4837      	ldr	r0, [pc, #220]	; (8000e4c <MX_GPIO_Init+0x164>)
 8000d70:	f000 fd6b 	bl	800184a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <MX_GPIO_Init+0x168>)
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	4832      	ldr	r0, [pc, #200]	; (8000e54 <MX_GPIO_Init+0x16c>)
 8000d8a:	f000 fbc3 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 8000d9a:	f107 0310 	add.w	r3, r7, #16
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <MX_GPIO_Init+0x160>)
 8000da2:	f000 fbb7 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 8000da6:	2312      	movs	r3, #18
 8000da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4619      	mov	r1, r3
 8000db8:	4823      	ldr	r0, [pc, #140]	; (8000e48 <MX_GPIO_Init+0x160>)
 8000dba:	f000 fbab 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8000dbe:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0x160>)
 8000dd8:	f000 fb9c 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	4816      	ldr	r0, [pc, #88]	; (8000e48 <MX_GPIO_Init+0x160>)
 8000df0:	f000 fb90 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	4811      	ldr	r0, [pc, #68]	; (8000e4c <MX_GPIO_Init+0x164>)
 8000e08:	f000 fb84 	bl	8001514 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e0c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4809      	ldr	r0, [pc, #36]	; (8000e4c <MX_GPIO_Init+0x164>)
 8000e26:	f000 fb75 	bl	8001514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2028      	movs	r0, #40	; 0x28
 8000e30:	f000 fb39 	bl	80014a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e34:	2028      	movs	r0, #40	; 0x28
 8000e36:	f000 fb52 	bl	80014de <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40010800 	.word	0x40010800
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	10110000 	.word	0x10110000
 8000e54:	40011000 	.word	0x40011000

08000e58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	 timerRun();
 8000e60:	f000 f870 	bl	8000f44 <timerRun>
	 getKeyInput();
 8000e64:	f7ff f9d8 	bl	8000218 <getKeyInput>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <setTimer1>:
int timer6_counter = 0;
int timer6_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000e84:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <setTimer1+0x20>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <setTimer1+0x24>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000005c 	.word	0x2000005c
 8000ea0:	20000060 	.word	0x20000060

08000ea4 <setTimer2>:

void setTimer2(int duration) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000eac:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <setTimer2+0x20>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <setTimer2+0x24>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000064 	.word	0x20000064
 8000ec8:	20000068 	.word	0x20000068

08000ecc <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <setTimer4+0x20>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <setTimer4+0x24>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000074 	.word	0x20000074
 8000ef0:	20000078 	.word	0x20000078

08000ef4 <setTimer5>:

void setTimer5(int duration) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8000efc:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <setTimer5+0x20>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <setTimer5+0x24>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	2000007c 	.word	0x2000007c
 8000f18:	20000080 	.word	0x20000080

08000f1c <setTimer6>:
void setTimer6(int duration) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 8000f24:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <setTimer6+0x20>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <setTimer6+0x24>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000084 	.word	0x20000084
 8000f40:	20000088 	.word	0x20000088

08000f44 <timerRun>:
void timerRun() {
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <timerRun+0xcc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dd0b      	ble.n	8000f68 <timerRun+0x24>
		timer1_counter--;
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <timerRun+0xcc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <timerRun+0xcc>)
 8000f58:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <timerRun+0xcc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	dc02      	bgt.n	8000f68 <timerRun+0x24>
			timer1_flag = 1;
 8000f62:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <timerRun+0xd0>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000f68:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <timerRun+0xd4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dd0b      	ble.n	8000f88 <timerRun+0x44>
		timer2_counter--;
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <timerRun+0xd4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3b01      	subs	r3, #1
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <timerRun+0xd4>)
 8000f78:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000f7a:	4b27      	ldr	r3, [pc, #156]	; (8001018 <timerRun+0xd4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dc02      	bgt.n	8000f88 <timerRun+0x44>
			timer2_flag = 1;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <timerRun+0xd8>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <timerRun+0xdc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dd0b      	ble.n	8000fa8 <timerRun+0x64>
		timer3_counter--;
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <timerRun+0xdc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <timerRun+0xdc>)
 8000f98:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <timerRun+0xdc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	dc02      	bgt.n	8000fa8 <timerRun+0x64>
			timer3_flag = 1;
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <timerRun+0xe0>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <timerRun+0xe4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dd0b      	ble.n	8000fc8 <timerRun+0x84>
		timer4_counter--;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <timerRun+0xe4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <timerRun+0xe4>)
 8000fb8:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <timerRun+0xe4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dc02      	bgt.n	8000fc8 <timerRun+0x84>
			timer4_flag = 1;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <timerRun+0xe8>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <timerRun+0xec>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dd0b      	ble.n	8000fe8 <timerRun+0xa4>
		timer5_counter--;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <timerRun+0xec>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	4a16      	ldr	r2, [pc, #88]	; (8001030 <timerRun+0xec>)
 8000fd8:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <timerRun+0xec>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dc02      	bgt.n	8000fe8 <timerRun+0xa4>
			timer5_flag = 1;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <timerRun+0xf0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0) {
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <timerRun+0xf4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	dd0b      	ble.n	8001008 <timerRun+0xc4>
			timer6_counter--;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <timerRun+0xf4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <timerRun+0xf4>)
 8000ff8:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0) {
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <timerRun+0xf4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	dc02      	bgt.n	8001008 <timerRun+0xc4>
				timer6_flag = 1;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <timerRun+0xf8>)
 8001004:	2201      	movs	r2, #1
 8001006:	601a      	str	r2, [r3, #0]
			}
	}
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	2000005c 	.word	0x2000005c
 8001014:	20000060 	.word	0x20000060
 8001018:	20000064 	.word	0x20000064
 800101c:	20000068 	.word	0x20000068
 8001020:	2000006c 	.word	0x2000006c
 8001024:	20000070 	.word	0x20000070
 8001028:	20000074 	.word	0x20000074
 800102c:	20000078 	.word	0x20000078
 8001030:	2000007c 	.word	0x2000007c
 8001034:	20000080 	.word	0x20000080
 8001038:	20000084 	.word	0x20000084
 800103c:	20000088 	.word	0x20000088

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_MspInit+0x5c>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_MspInit+0x5c>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_MspInit+0x5c>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x5c>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x5c>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x5c>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_MspInit+0x60>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_MspInit+0x60>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d113      	bne.n	80010de <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_TIM_Base_MspInit+0x44>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <HAL_TIM_Base_MspInit+0x44>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_TIM_Base_MspInit+0x44>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	201c      	movs	r0, #28
 80010d4:	f000 f9e7 	bl	80014a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010d8:	201c      	movs	r0, #28
 80010da:	f000 fa00 	bl	80014de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_UART_MspInit+0x70>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d123      	bne.n	8001154 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_UART_MspInit+0x74>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	4a13      	ldr	r2, [pc, #76]	; (8001160 <HAL_UART_MspInit+0x74>)
 8001112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001116:	61d3      	str	r3, [r2, #28]
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0x74>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <HAL_UART_MspInit+0x74>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_UART_MspInit+0x74>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <HAL_UART_MspInit+0x74>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113c:	230c      	movs	r3, #12
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0x78>)
 8001150:	f000 f9e0 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40004400 	.word	0x40004400
 8001160:	40021000 	.word	0x40021000
 8001164:	40010800 	.word	0x40010800

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f887 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM2_IRQHandler+0x10>)
 80011be:	f001 f82f 	bl	8002220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000f0 	.word	0x200000f0

080011cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d4:	f000 fb52 	bl	800187c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff fff8 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ee:	490c      	ldr	r1, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001204:	4c09      	ldr	r4, [pc, #36]	; (800122c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f001 fc3f 	bl	8002a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001216:	f7ff fc8d 	bl	8000b34 <main>
  bx lr
 800121a:	4770      	bx	lr
  ldr r0, =_sdata
 800121c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001220:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001224:	08002b38 	.word	0x08002b38
  ldr r2, =_sbss
 8001228:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800122c:	20000184 	.word	0x20000184

08001230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001230:	e7fe      	b.n	8001230 <ADC1_2_IRQHandler>
	...

08001234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x28>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f923 	bl	8001490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fef6 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40022000 	.word	0x40022000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f93b 	bl	80014fa <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f903 	bl	80014a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000024 	.word	0x20000024
 80012b8:	2000002c 	.word	0x2000002c
 80012bc:	20000028 	.word	0x20000028

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_IncTick+0x20>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	2000002c 	.word	0x2000002c
 80012e0:	20000180 	.word	0x20000180

080012e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <HAL_GetTick+0x10>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000180 	.word	0x20000180

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4906      	ldr	r1, [pc, #24]	; (8001390 <__NVIC_EnableIRQ+0x34>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800145c:	d301      	bcc.n	8001462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145e:	2301      	movs	r3, #1
 8001460:	e00f      	b.n	8001482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <SysTick_Config+0x40>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146a:	210f      	movs	r1, #15
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f7ff ff90 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <SysTick_Config+0x40>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <SysTick_Config+0x40>)
 800147c:	2207      	movs	r2, #7
 800147e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	e000e010 	.word	0xe000e010

08001490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff ff2d 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b8:	f7ff ff42 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	68b9      	ldr	r1, [r7, #8]
 80014c2:	6978      	ldr	r0, [r7, #20]
 80014c4:	f7ff ff90 	bl	80013e8 <NVIC_EncodePriority>
 80014c8:	4602      	mov	r2, r0
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff5f 	bl	8001394 <__NVIC_SetPriority>
}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff35 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff ffa2 	bl	800144c <SysTick_Config>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b08b      	sub	sp, #44	; 0x2c
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151e:	2300      	movs	r3, #0
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001526:	e169      	b.n	80017fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001528:	2201      	movs	r2, #1
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	69fa      	ldr	r2, [r7, #28]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	429a      	cmp	r2, r3
 8001542:	f040 8158 	bne.w	80017f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a9a      	ldr	r2, [pc, #616]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d05e      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001550:	4a98      	ldr	r2, [pc, #608]	; (80017b4 <HAL_GPIO_Init+0x2a0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d875      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001556:	4a98      	ldr	r2, [pc, #608]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d058      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 800155c:	4a96      	ldr	r2, [pc, #600]	; (80017b8 <HAL_GPIO_Init+0x2a4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d86f      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001562:	4a96      	ldr	r2, [pc, #600]	; (80017bc <HAL_GPIO_Init+0x2a8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d052      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001568:	4a94      	ldr	r2, [pc, #592]	; (80017bc <HAL_GPIO_Init+0x2a8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d869      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800156e:	4a94      	ldr	r2, [pc, #592]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d04c      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001574:	4a92      	ldr	r2, [pc, #584]	; (80017c0 <HAL_GPIO_Init+0x2ac>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d863      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800157a:	4a92      	ldr	r2, [pc, #584]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d046      	beq.n	800160e <HAL_GPIO_Init+0xfa>
 8001580:	4a90      	ldr	r2, [pc, #576]	; (80017c4 <HAL_GPIO_Init+0x2b0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d85d      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 8001586:	2b12      	cmp	r3, #18
 8001588:	d82a      	bhi.n	80015e0 <HAL_GPIO_Init+0xcc>
 800158a:	2b12      	cmp	r3, #18
 800158c:	d859      	bhi.n	8001642 <HAL_GPIO_Init+0x12e>
 800158e:	a201      	add	r2, pc, #4	; (adr r2, 8001594 <HAL_GPIO_Init+0x80>)
 8001590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001594:	0800160f 	.word	0x0800160f
 8001598:	080015e9 	.word	0x080015e9
 800159c:	080015fb 	.word	0x080015fb
 80015a0:	0800163d 	.word	0x0800163d
 80015a4:	08001643 	.word	0x08001643
 80015a8:	08001643 	.word	0x08001643
 80015ac:	08001643 	.word	0x08001643
 80015b0:	08001643 	.word	0x08001643
 80015b4:	08001643 	.word	0x08001643
 80015b8:	08001643 	.word	0x08001643
 80015bc:	08001643 	.word	0x08001643
 80015c0:	08001643 	.word	0x08001643
 80015c4:	08001643 	.word	0x08001643
 80015c8:	08001643 	.word	0x08001643
 80015cc:	08001643 	.word	0x08001643
 80015d0:	08001643 	.word	0x08001643
 80015d4:	08001643 	.word	0x08001643
 80015d8:	080015f1 	.word	0x080015f1
 80015dc:	08001605 	.word	0x08001605
 80015e0:	4a79      	ldr	r2, [pc, #484]	; (80017c8 <HAL_GPIO_Init+0x2b4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015e6:	e02c      	b.n	8001642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	623b      	str	r3, [r7, #32]
          break;
 80015ee:	e029      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	3304      	adds	r3, #4
 80015f6:	623b      	str	r3, [r7, #32]
          break;
 80015f8:	e024      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	3308      	adds	r3, #8
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e01f      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	330c      	adds	r3, #12
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e01a      	b.n	8001644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001616:	2304      	movs	r3, #4
 8001618:	623b      	str	r3, [r7, #32]
          break;
 800161a:	e013      	b.n	8001644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d105      	bne.n	8001630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001624:	2308      	movs	r3, #8
 8001626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	611a      	str	r2, [r3, #16]
          break;
 800162e:	e009      	b.n	8001644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001630:	2308      	movs	r3, #8
 8001632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	615a      	str	r2, [r3, #20]
          break;
 800163a:	e003      	b.n	8001644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e000      	b.n	8001644 <HAL_GPIO_Init+0x130>
          break;
 8001642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d801      	bhi.n	800164e <HAL_GPIO_Init+0x13a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	e001      	b.n	8001652 <HAL_GPIO_Init+0x13e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d802      	bhi.n	8001660 <HAL_GPIO_Init+0x14c>
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x152>
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	3b08      	subs	r3, #8
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	210f      	movs	r1, #15
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	fa01 f303 	lsl.w	r3, r1, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	401a      	ands	r2, r3
 8001678:	6a39      	ldr	r1, [r7, #32]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	431a      	orrs	r2, r3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80b1 	beq.w	80017f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001694:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <HAL_GPIO_Init+0x2b8>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ac:	4a48      	ldr	r2, [pc, #288]	; (80017d0 <HAL_GPIO_Init+0x2bc>)
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	220f      	movs	r2, #15
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <HAL_GPIO_Init+0x2c0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1ec>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a3f      	ldr	r2, [pc, #252]	; (80017d8 <HAL_GPIO_Init+0x2c4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1e8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <HAL_GPIO_Init+0x2c8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1e4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	; (80017e0 <HAL_GPIO_Init+0x2cc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1e0>
 80016f0:	2303      	movs	r3, #3
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f4:	2304      	movs	r3, #4
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_Init+0x1ee>
 8001700:	2300      	movs	r3, #0
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001712:	492f      	ldr	r1, [pc, #188]	; (80017d0 <HAL_GPIO_Init+0x2bc>)
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	492c      	ldr	r1, [pc, #176]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4928      	ldr	r1, [pc, #160]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001744:	4013      	ands	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001754:	4b23      	ldr	r3, [pc, #140]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4922      	ldr	r1, [pc, #136]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	491e      	ldr	r1, [pc, #120]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4918      	ldr	r1, [pc, #96]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	4914      	ldr	r1, [pc, #80]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d021      	beq.n	80017e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	600b      	str	r3, [r1, #0]
 80017b0:	e021      	b.n	80017f6 <HAL_GPIO_Init+0x2e2>
 80017b2:	bf00      	nop
 80017b4:	10320000 	.word	0x10320000
 80017b8:	10310000 	.word	0x10310000
 80017bc:	10220000 	.word	0x10220000
 80017c0:	10210000 	.word	0x10210000
 80017c4:	10120000 	.word	0x10120000
 80017c8:	10110000 	.word	0x10110000
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40010000 	.word	0x40010000
 80017d4:	40010800 	.word	0x40010800
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40011000 	.word	0x40011000
 80017e0:	40011400 	.word	0x40011400
 80017e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	4909      	ldr	r1, [pc, #36]	; (8001818 <HAL_GPIO_Init+0x304>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	f47f ae8e 	bne.w	8001528 <HAL_GPIO_Init+0x14>
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	372c      	adds	r7, #44	; 0x2c
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40010400 	.word	0x40010400

0800181c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
 8001838:	e001      	b.n	800183e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	807b      	strh	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185a:	787b      	ldrb	r3, [r7, #1]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001866:	e003      	b.n	8001870 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001868:	887b      	ldrh	r3, [r7, #2]
 800186a:	041a      	lsls	r2, r3, #16
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	611a      	str	r2, [r3, #16]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001888:	695a      	ldr	r2, [r3, #20]
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f806 	bl	80018ac <HAL_GPIO_EXTI_Callback>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40010400 	.word	0x40010400

080018ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e26c      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8087 	beq.w	80019ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e0:	4b92      	ldr	r3, [pc, #584]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d00c      	beq.n	8001906 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ec:	4b8f      	ldr	r3, [pc, #572]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d112      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
 80018f8:	4b8c      	ldr	r3, [pc, #560]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b89      	ldr	r3, [pc, #548]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06c      	beq.n	80019ec <HAL_RCC_OscConfig+0x12c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d168      	bne.n	80019ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e246      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x76>
 8001928:	4b80      	ldr	r3, [pc, #512]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a7f      	ldr	r2, [pc, #508]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e02e      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b7b      	ldr	r3, [pc, #492]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7a      	ldr	r2, [pc, #488]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xbc>
 8001962:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a71      	ldr	r2, [pc, #452]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6e      	ldr	r2, [pc, #440]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 800197c:	4b6b      	ldr	r3, [pc, #428]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6a      	ldr	r2, [pc, #424]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a67      	ldr	r2, [pc, #412]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fca2 	bl	80012e4 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fc9e 	bl	80012e4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1fa      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b5d      	ldr	r3, [pc, #372]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe4>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff fc8e 	bl	80012e4 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fc8a 	bl	80012e4 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1e6      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x10c>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fa:	4b4c      	ldr	r3, [pc, #304]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x18c>
 8001a12:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x176>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1ba      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4939      	ldr	r1, [pc, #228]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b36      	ldr	r3, [pc, #216]	; (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fc43 	bl	80012e4 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fc3f 	bl	80012e4 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e19b      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4927      	ldr	r1, [pc, #156]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fc22 	bl	80012e4 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fc1e 	bl	80012e4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e17a      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d03a      	beq.n	8001b44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d019      	beq.n	8001b0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fc02 	bl	80012e4 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbfe 	bl	80012e4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e15a      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f000 facc 	bl	80020a0 <RCC_Delay>
 8001b08:	e01c      	b.n	8001b44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7ff fbe8 	bl	80012e4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff fbe4 	bl	80012e4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d908      	bls.n	8001b38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e140      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	42420000 	.word	0x42420000
 8001b34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	4b9e      	ldr	r3, [pc, #632]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1e9      	bne.n	8001b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80a6 	beq.w	8001c9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4b97      	ldr	r3, [pc, #604]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10d      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a93      	ldr	r2, [pc, #588]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <HAL_RCC_OscConfig+0x4f8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8a:	4b8b      	ldr	r3, [pc, #556]	; (8001db8 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a8a      	ldr	r2, [pc, #552]	; (8001db8 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fba5 	bl	80012e4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff fba1 	bl	80012e4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0fd      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x312>
 8001bc4:	4b7b      	ldr	r3, [pc, #492]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e02d      	b.n	8001c2e <HAL_RCC_OscConfig+0x36e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x334>
 8001bda:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a75      	ldr	r2, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a72      	ldr	r2, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	e01c      	b.n	8001c2e <HAL_RCC_OscConfig+0x36e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x356>
 8001bfc:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a6c      	ldr	r2, [pc, #432]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e00b      	b.n	8001c2e <HAL_RCC_OscConfig+0x36e>
 8001c16:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a66      	ldr	r2, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d015      	beq.n	8001c62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb55 	bl	80012e4 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7ff fb51 	bl	80012e4 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0ab      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	4b57      	ldr	r3, [pc, #348]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ee      	beq.n	8001c3e <HAL_RCC_OscConfig+0x37e>
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb3f 	bl	80012e4 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff fb3b 	bl	80012e4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e095      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	4b4c      	ldr	r3, [pc, #304]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ee      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d105      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a47      	ldr	r2, [pc, #284]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8081 	beq.w	8001daa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca8:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d061      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d146      	bne.n	8001d4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <HAL_RCC_OscConfig+0x4fc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff fb0f 	bl	80012e4 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff fb0b 	bl	80012e4 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e067      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf0:	d108      	bne.n	8001d04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	492d      	ldr	r1, [pc, #180]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a19      	ldr	r1, [r3, #32]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	430b      	orrs	r3, r1
 8001d16:	4927      	ldr	r1, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x4fc>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7ff fadf 	bl	80012e4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff fadb 	bl	80012e4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e037      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46a>
 8001d48:	e02f      	b.n	8001daa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <HAL_RCC_OscConfig+0x4fc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fac8 	bl	80012e4 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff fac4 	bl	80012e4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e020      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x498>
 8001d76:	e018      	b.n	8001daa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e013      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	42420060 	.word	0x42420060

08001dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0d0      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b6a      	ldr	r3, [pc, #424]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b67      	ldr	r3, [pc, #412]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	4965      	ldr	r1, [pc, #404]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0b8      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d020      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e1c:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a58      	ldr	r2, [pc, #352]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e40:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	494d      	ldr	r1, [pc, #308]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d040      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d107      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b47      	ldr	r3, [pc, #284]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d115      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e07f      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b41      	ldr	r3, [pc, #260]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e073      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06b      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4936      	ldr	r1, [pc, #216]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff fa18 	bl	80012e4 <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff fa14 	bl	80012e4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e053      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d210      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0207 	bic.w	r2, r3, #7
 8001ef6:	4922      	ldr	r1, [pc, #136]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e032      	b.n	8001f76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4916      	ldr	r1, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f3a:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490e      	ldr	r1, [pc, #56]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f4e:	f000 f821 	bl	8001f94 <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490a      	ldr	r1, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	fa22 f303 	lsr.w	r3, r2, r3
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_RCC_ClockConfig+0x1cc>)
 8001f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1d0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f976 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08002b04 	.word	0x08002b04
 8001f8c:	20000024 	.word	0x20000024
 8001f90:	20000028 	.word	0x20000028

08001f94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d002      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d003      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x36>
 8001fc2:	e027      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc6:	613b      	str	r3, [r7, #16]
      break;
 8001fc8:	e027      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0c9b      	lsrs	r3, r3, #18
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fd4:	5cd3      	ldrb	r3, [r2, r3]
 8001fd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	0c5b      	lsrs	r3, r3, #17
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff6:	fb02 f203 	mul.w	r2, r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e004      	b.n	800200e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	613b      	str	r3, [r7, #16]
      break;
 8002012:	e002      	b.n	800201a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_GetSysClockFreq+0x98>)
 8002016:	613b      	str	r3, [r7, #16]
      break;
 8002018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201a:	693b      	ldr	r3, [r7, #16]
}
 800201c:	4618      	mov	r0, r3
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	007a1200 	.word	0x007a1200
 8002030:	08002b1c 	.word	0x08002b1c
 8002034:	08002b2c 	.word	0x08002b2c
 8002038:	003d0900 	.word	0x003d0900

0800203c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <HAL_RCC_GetHCLKFreq+0x10>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	20000024 	.word	0x20000024

08002050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002054:	f7ff fff2 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000
 8002074:	08002b14 	.word	0x08002b14

08002078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800207c:	f7ff ffde 	bl	800203c <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0adb      	lsrs	r3, r3, #11
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4903      	ldr	r1, [pc, #12]	; (800209c <HAL_RCC_GetPCLK2Freq+0x24>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08002b14 	.word	0x08002b14

080020a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <RCC_Delay+0x34>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <RCC_Delay+0x38>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020bc:	bf00      	nop
  }
  while (Delay --);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	60fa      	str	r2, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f9      	bne.n	80020bc <RCC_Delay+0x1c>
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000024 	.word	0x20000024
 80020d8:	10624dd3 	.word	0x10624dd3

080020dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e041      	b.n	8002172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe ffce 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3304      	adds	r3, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4610      	mov	r0, r2
 800211c:	f000 fa74 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e03a      	b.n	800220a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_TIM_Base_Start_IT+0x98>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x58>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021be:	d009      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x58>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_TIM_Base_Start_IT+0x9c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x58>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_TIM_Base_Start_IT+0xa0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d111      	bne.n	80021f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b06      	cmp	r3, #6
 80021e4:	d010      	beq.n	8002208 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	e007      	b.n	8002208 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40000400 	.word	0x40000400
 800221c:	40000800 	.word	0x40000800

08002220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b02      	cmp	r3, #2
 8002234:	d122      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d11b      	bne.n	800227c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0202 	mvn.w	r2, #2
 800224c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f9b4 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f9a7 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f9b6 	bl	80025e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d122      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b04      	cmp	r3, #4
 8002296:	d11b      	bne.n	80022d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0204 	mvn.w	r2, #4
 80022a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2202      	movs	r2, #2
 80022a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f98a 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 80022bc:	e005      	b.n	80022ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f97d 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f98c 	bl	80025e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d122      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d11b      	bne.n	8002324 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f06f 0208 	mvn.w	r2, #8
 80022f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2204      	movs	r2, #4
 80022fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f960 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 8002310:	e005      	b.n	800231e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f953 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f962 	bl	80025e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b10      	cmp	r3, #16
 8002330:	d122      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b10      	cmp	r3, #16
 800233e:	d11b      	bne.n	8002378 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0210 	mvn.w	r2, #16
 8002348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2208      	movs	r2, #8
 800234e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f936 	bl	80025d0 <HAL_TIM_IC_CaptureCallback>
 8002364:	e005      	b.n	8002372 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f929 	bl	80025be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f938 	bl	80025e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b01      	cmp	r3, #1
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0201 	mvn.w	r2, #1
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe fd5a 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	2b80      	cmp	r3, #128	; 0x80
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023bc:	2b80      	cmp	r3, #128	; 0x80
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa7b 	bl	80028c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023da:	2b40      	cmp	r3, #64	; 0x40
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8fc 	bl	80025f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0320 	and.w	r3, r3, #32
 8002406:	2b20      	cmp	r3, #32
 8002408:	d10e      	bne.n	8002428 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b20      	cmp	r3, #32
 8002416:	d107      	bne.n	8002428 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0220 	mvn.w	r2, #32
 8002420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa46 	bl	80028b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_TIM_ConfigClockSource+0x1c>
 8002448:	2302      	movs	r3, #2
 800244a:	e0b4      	b.n	80025b6 <HAL_TIM_ConfigClockSource+0x186>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800246a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002484:	d03e      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0xd4>
 8002486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248a:	f200 8087 	bhi.w	800259c <HAL_TIM_ConfigClockSource+0x16c>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	f000 8086 	beq.w	80025a2 <HAL_TIM_ConfigClockSource+0x172>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800249a:	d87f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d01a      	beq.n	80024d6 <HAL_TIM_ConfigClockSource+0xa6>
 80024a0:	2b70      	cmp	r3, #112	; 0x70
 80024a2:	d87b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b60      	cmp	r3, #96	; 0x60
 80024a6:	d050      	beq.n	800254a <HAL_TIM_ConfigClockSource+0x11a>
 80024a8:	2b60      	cmp	r3, #96	; 0x60
 80024aa:	d877      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b50      	cmp	r3, #80	; 0x50
 80024ae:	d03c      	beq.n	800252a <HAL_TIM_ConfigClockSource+0xfa>
 80024b0:	2b50      	cmp	r3, #80	; 0x50
 80024b2:	d873      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d058      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x13a>
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d86f      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b30      	cmp	r3, #48	; 0x30
 80024be:	d064      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b30      	cmp	r3, #48	; 0x30
 80024c2:	d86b      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d060      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d867      	bhi.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05c      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d05a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	e062      	b.n	800259c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6899      	ldr	r1, [r3, #8]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f000 f968 	bl	80027ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	609a      	str	r2, [r3, #8]
      break;
 8002502:	e04f      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f000 f951 	bl	80027ba <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	609a      	str	r2, [r3, #8]
      break;
 8002528:	e03c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	461a      	mov	r2, r3
 8002538:	f000 f8c8 	bl	80026cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2150      	movs	r1, #80	; 0x50
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f91f 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 8002548:	e02c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6859      	ldr	r1, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	f000 f8e6 	bl	8002728 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2160      	movs	r1, #96	; 0x60
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f90f 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 8002568:	e01c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8a8 	bl	80026cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f8ff 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 8002588:	e00c      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f000 f8f6 	bl	8002786 <TIM_ITRx_SetConfig>
      break;
 800259a:	e003      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      break;
 80025a0:	e000      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <TIM_Base_SetConfig+0xb8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00b      	beq.n	8002638 <TIM_Base_SetConfig+0x30>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d007      	beq.n	8002638 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <TIM_Base_SetConfig+0xbc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0x30>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <TIM_Base_SetConfig+0xc0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <TIM_Base_SetConfig+0xb8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <TIM_Base_SetConfig+0xbc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <TIM_Base_SetConfig+0xc0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <TIM_Base_SetConfig+0xb8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800

080026cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 030a 	bic.w	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	621a      	str	r2, [r3, #32]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f023 0210 	bic.w	r2, r3, #16
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002764:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	621a      	str	r2, [r3, #32]
}
 800277c:	bf00      	nop
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f043 0307 	orr.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b087      	sub	sp, #28
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	021a      	lsls	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	431a      	orrs	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	371c      	adds	r7, #28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800280c:	2302      	movs	r3, #2
 800280e:	e046      	b.n	800289e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a16      	ldr	r2, [pc, #88]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d009      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	4313      	orrs	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800

080028b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e042      	b.n	8002970 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe fbf4 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 f82b 	bl	8002978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029b2:	f023 030c 	bic.w	r3, r3, #12
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	430b      	orrs	r3, r1
 80029be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <UART_SetConfig+0x114>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029e0:	f7ff fb4a 	bl	8002078 <HAL_RCC_GetPCLK2Freq>
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	e002      	b.n	80029ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029e8:	f7ff fb32 	bl	8002050 <HAL_RCC_GetPCLK1Freq>
 80029ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	009a      	lsls	r2, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	0119      	lsls	r1, r3, #4
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <UART_SetConfig+0x118>)
 8002a26:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2064      	movs	r0, #100	; 0x64
 8002a2e:	fb00 f303 	mul.w	r3, r0, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	3332      	adds	r3, #50	; 0x32
 8002a38:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	4419      	add	r1, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <UART_SetConfig+0x118>)
 8002a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2064      	movs	r0, #100	; 0x64
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	3332      	adds	r3, #50	; 0x32
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <UART_SetConfig+0x118>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	440a      	add	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	51eb851f 	.word	0x51eb851f

08002a94 <__libc_init_array>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	2600      	movs	r6, #0
 8002a98:	4d0c      	ldr	r5, [pc, #48]	; (8002acc <__libc_init_array+0x38>)
 8002a9a:	4c0d      	ldr	r4, [pc, #52]	; (8002ad0 <__libc_init_array+0x3c>)
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	42a6      	cmp	r6, r4
 8002aa2:	d109      	bne.n	8002ab8 <__libc_init_array+0x24>
 8002aa4:	f000 f822 	bl	8002aec <_init>
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	4d0a      	ldr	r5, [pc, #40]	; (8002ad4 <__libc_init_array+0x40>)
 8002aac:	4c0a      	ldr	r4, [pc, #40]	; (8002ad8 <__libc_init_array+0x44>)
 8002aae:	1b64      	subs	r4, r4, r5
 8002ab0:	10a4      	asrs	r4, r4, #2
 8002ab2:	42a6      	cmp	r6, r4
 8002ab4:	d105      	bne.n	8002ac2 <__libc_init_array+0x2e>
 8002ab6:	bd70      	pop	{r4, r5, r6, pc}
 8002ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002abc:	4798      	blx	r3
 8002abe:	3601      	adds	r6, #1
 8002ac0:	e7ee      	b.n	8002aa0 <__libc_init_array+0xc>
 8002ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac6:	4798      	blx	r3
 8002ac8:	3601      	adds	r6, #1
 8002aca:	e7f2      	b.n	8002ab2 <__libc_init_array+0x1e>
 8002acc:	08002b30 	.word	0x08002b30
 8002ad0:	08002b30 	.word	0x08002b30
 8002ad4:	08002b30 	.word	0x08002b30
 8002ad8:	08002b34 	.word	0x08002b34

08002adc <memset>:
 8002adc:	4603      	mov	r3, r0
 8002ade:	4402      	add	r2, r0
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <memset+0xa>
 8002ae4:	4770      	bx	lr
 8002ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aea:	e7f9      	b.n	8002ae0 <memset+0x4>

08002aec <_init>:
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aee:	bf00      	nop
 8002af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af2:	bc08      	pop	{r3}
 8002af4:	469e      	mov	lr, r3
 8002af6:	4770      	bx	lr

08002af8 <_fini>:
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afa:	bf00      	nop
 8002afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002afe:	bc08      	pop	{r3}
 8002b00:	469e      	mov	lr, r3
 8002b02:	4770      	bx	lr
