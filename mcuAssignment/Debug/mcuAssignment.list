
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08004124  08004124  00014124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042ac  080042ac  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080042ac  080042ac  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042ac  080042ac  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000094  08004348  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08004348  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125db  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002788  00000000  00000000  00032698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00034e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e72  00000000  00000000  00036760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010278  00000000  00000000  0004f5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4f5  00000000  00000000  0005f84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ead3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  000ead94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	0800410c 	.word	0x0800410c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	0800410c 	.word	0x0800410c

0800014c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initStateForButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initStateForButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initStateForButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initStateForButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initStateForButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initStateForButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2100      	movs	r1, #0
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b03      	cmp	r3, #3
 800019e:	dddb      	ble.n	8000158 <initStateForButton+0xc>
	 }
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000168 	.word	0x20000168
 80001b0:	20000178 	.word	0x20000178
 80001b4:	200001a8 	.word	0x200001a8
 80001b8:	20000158 	.word	0x20000158
 80001bc:	20000198 	.word	0x20000198
 80001c0:	20000188 	.word	0x20000188

080001c4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <isButtonPressed+0x30>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2100      	movs	r1, #0
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <isButtonPressed+0x24>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000188 	.word	0x20000188

080001f8 <subKeyProcess>:

void subKeyProcess(int key_index) {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <subKeyProcess+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2101      	movs	r1, #1
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000188 	.word	0x20000188

08000218 <getKeyInput>:

void getKeyInput() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e076      	b.n	8000312 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000224:	4a3f      	ldr	r2, [pc, #252]	; (8000324 <getKeyInput+0x10c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	493e      	ldr	r1, [pc, #248]	; (8000328 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000234:	4a3d      	ldr	r2, [pc, #244]	; (800032c <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4939      	ldr	r1, [pc, #228]	; (8000324 <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000244:	4a3a      	ldr	r2, [pc, #232]	; (8000330 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4939      	ldr	r1, [pc, #228]	; (8000334 <getKeyInput+0x11c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f001 fc6a 	bl	8001b30 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	4619      	mov	r1, r3
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <getKeyInput+0x114>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <getKeyInput+0x110>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	492c      	ldr	r1, [pc, #176]	; (8000324 <getKeyInput+0x10c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d147      	bne.n	800030c <getKeyInput+0xf4>
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	4929      	ldr	r1, [pc, #164]	; (800032c <getKeyInput+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028c:	429a      	cmp	r2, r3
 800028e:	d13d      	bne.n	800030c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 8000290:	4a29      	ldr	r2, [pc, #164]	; (8000338 <getKeyInput+0x120>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <getKeyInput+0x114>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d016      	beq.n	80002d2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <getKeyInput+0x114>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4922      	ldr	r1, [pc, #136]	; (8000338 <getKeyInput+0x120>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <getKeyInput+0x114>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d125      	bne.n	800030c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ff99 	bl	80001f8 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <getKeyInput+0x124>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	21c8      	movs	r1, #200	; 0xc8
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d0:	e01c      	b.n	800030c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80002d2:	4a1a      	ldr	r2, [pc, #104]	; (800033c <getKeyInput+0x124>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4917      	ldr	r1, [pc, #92]	; (800033c <getKeyInput+0x124>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <getKeyInput+0x124>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dc0d      	bgt.n	800030c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <getKeyInput+0x114>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <getKeyInput+0xea>
						subKeyProcess(i);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff7b 	bl	80001f8 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <getKeyInput+0x124>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	21c8      	movs	r1, #200	; 0xc8
 8000308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b03      	cmp	r3, #3
 8000316:	dd85      	ble.n	8000224 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000178 	.word	0x20000178
 8000328:	20000168 	.word	0x20000168
 800032c:	200001a8 	.word	0x200001a8
 8000330:	20000008 	.word	0x20000008
 8000334:	20000000 	.word	0x20000000
 8000338:	20000158 	.word	0x20000158
 800033c:	20000198 	.word	0x20000198

08000340 <turnOffLed>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};

void turnOffLed() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	480a      	ldr	r0, [pc, #40]	; (8000374 <turnOffLed+0x34>)
 800034c:	f001 fc07 	bl	8001b5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <turnOffLed+0x38>)
 8000356:	f001 fc02 	bl	8001b5e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2120      	movs	r1, #32
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <turnOffLed+0x38>)
 8000360:	f001 fbfd 	bl	8001b5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <turnOffLed+0x38>)
 800036a:	f001 fbf8 	bl	8001b5e <HAL_GPIO_WritePin>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <displayLed>:

void displayLed(int led_index) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b0a      	subs	r3, #10
 8000388:	2b0d      	cmp	r3, #13
 800038a:	f200 80b9 	bhi.w	8000500 <displayLed+0x184>
 800038e:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <displayLed+0x18>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003cd 	.word	0x080003cd
 8000398:	080003f9 	.word	0x080003f9
 800039c:	08000425 	.word	0x08000425
 80003a0:	08000501 	.word	0x08000501
 80003a4:	08000501 	.word	0x08000501
 80003a8:	08000501 	.word	0x08000501
 80003ac:	08000501 	.word	0x08000501
 80003b0:	08000501 	.word	0x08000501
 80003b4:	08000501 	.word	0x08000501
 80003b8:	08000501 	.word	0x08000501
 80003bc:	08000451 	.word	0x08000451
 80003c0:	0800047d 	.word	0x0800047d
 80003c4:	080004a9 	.word	0x080004a9
 80003c8:	080004d5 	.word	0x080004d5
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d2:	484e      	ldr	r0, [pc, #312]	; (800050c <displayLed+0x190>)
 80003d4:	f001 fbc3 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	484c      	ldr	r0, [pc, #304]	; (8000510 <displayLed+0x194>)
 80003de:	f001 fbbe 	bl	8001b5e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	484a      	ldr	r0, [pc, #296]	; (8000510 <displayLed+0x194>)
 80003e8:	f001 fbb9 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2110      	movs	r1, #16
 80003f0:	4847      	ldr	r0, [pc, #284]	; (8000510 <displayLed+0x194>)
 80003f2:	f001 fbb4 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 80003f6:	e084      	b.n	8000502 <displayLed+0x186>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fe:	4843      	ldr	r0, [pc, #268]	; (800050c <displayLed+0x190>)
 8000400:	f001 fbad 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2108      	movs	r1, #8
 8000408:	4841      	ldr	r0, [pc, #260]	; (8000510 <displayLed+0x194>)
 800040a:	f001 fba8 	bl	8001b5e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2120      	movs	r1, #32
 8000412:	483f      	ldr	r0, [pc, #252]	; (8000510 <displayLed+0x194>)
 8000414:	f001 fba3 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2110      	movs	r1, #16
 800041c:	483c      	ldr	r0, [pc, #240]	; (8000510 <displayLed+0x194>)
 800041e:	f001 fb9e 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 8000422:	e06e      	b.n	8000502 <displayLed+0x186>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	4838      	ldr	r0, [pc, #224]	; (800050c <displayLed+0x190>)
 800042c:	f001 fb97 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2108      	movs	r1, #8
 8000434:	4836      	ldr	r0, [pc, #216]	; (8000510 <displayLed+0x194>)
 8000436:	f001 fb92 	bl	8001b5e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	4834      	ldr	r0, [pc, #208]	; (8000510 <displayLed+0x194>)
 8000440:	f001 fb8d 	bl	8001b5e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2110      	movs	r1, #16
 8000448:	4831      	ldr	r0, [pc, #196]	; (8000510 <displayLed+0x194>)
 800044a:	f001 fb88 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 800044e:	e058      	b.n	8000502 <displayLed+0x186>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000456:	482d      	ldr	r0, [pc, #180]	; (800050c <displayLed+0x190>)
 8000458:	f001 fb81 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2108      	movs	r1, #8
 8000460:	482b      	ldr	r0, [pc, #172]	; (8000510 <displayLed+0x194>)
 8000462:	f001 fb7c 	bl	8001b5e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2120      	movs	r1, #32
 800046a:	4829      	ldr	r0, [pc, #164]	; (8000510 <displayLed+0x194>)
 800046c:	f001 fb77 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	4826      	ldr	r0, [pc, #152]	; (8000510 <displayLed+0x194>)
 8000476:	f001 fb72 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 800047a:	e042      	b.n	8000502 <displayLed+0x186>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	4822      	ldr	r0, [pc, #136]	; (800050c <displayLed+0x190>)
 8000484:	f001 fb6b 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2108      	movs	r1, #8
 800048c:	4820      	ldr	r0, [pc, #128]	; (8000510 <displayLed+0x194>)
 800048e:	f001 fb66 	bl	8001b5e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2120      	movs	r1, #32
 8000496:	481e      	ldr	r0, [pc, #120]	; (8000510 <displayLed+0x194>)
 8000498:	f001 fb61 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	481b      	ldr	r0, [pc, #108]	; (8000510 <displayLed+0x194>)
 80004a2:	f001 fb5c 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 80004a6:	e02c      	b.n	8000502 <displayLed+0x186>
	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	4817      	ldr	r0, [pc, #92]	; (800050c <displayLed+0x190>)
 80004b0:	f001 fb55 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2108      	movs	r1, #8
 80004b8:	4815      	ldr	r0, [pc, #84]	; (8000510 <displayLed+0x194>)
 80004ba:	f001 fb50 	bl	8001b5e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2120      	movs	r1, #32
 80004c2:	4813      	ldr	r0, [pc, #76]	; (8000510 <displayLed+0x194>)
 80004c4:	f001 fb4b 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4810      	ldr	r0, [pc, #64]	; (8000510 <displayLed+0x194>)
 80004ce:	f001 fb46 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 80004d2:	e016      	b.n	8000502 <displayLed+0x186>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <displayLed+0x190>)
 80004dc:	f001 fb3f 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <displayLed+0x194>)
 80004e6:	f001 fb3a 	bl	8001b5e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2120      	movs	r1, #32
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <displayLed+0x194>)
 80004f0:	f001 fb35 	bl	8001b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2110      	movs	r1, #16
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <displayLed+0x194>)
 80004fa:	f001 fb30 	bl	8001b5e <HAL_GPIO_WritePin>
		break;
 80004fe:	e000      	b.n	8000502 <displayLed+0x186>
	default:
		break;
 8000500:	bf00      	nop
	}
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010800 	.word	0x40010800
 8000510:	40010c00 	.word	0x40010c00

08000514 <switchMode2>:
 *      Author: Asus
 */

#include "fsm_automatic.h"
//hello
void switchMode2() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	status = RED_MAN;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <switchMode2+0x24>)
 800051a:	220a      	movs	r2, #10
 800051c:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <switchMode2+0x28>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <switchMode2+0x2c>)
 8000524:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 fd74 	bl	8001014 <setTimer2>
	setTimer4(25);
 800052c:	2019      	movs	r0, #25
 800052e:	f000 fd85 	bl	800103c <setTimer4>

//	updateLedBufferVal(counter1/10, 2, counter1%10, 2);
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000b8 	.word	0x200000b8
 800053c:	20000018 	.word	0x20000018
 8000540:	200000b0 	.word	0x200000b0

08000544 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
	switch(status) {
 800054a:	4b9b      	ldr	r3, [pc, #620]	; (80007b8 <fsm_automatic_run+0x274>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	2b04      	cmp	r3, #4
 8000552:	f200 81a2 	bhi.w	800089a <fsm_automatic_run+0x356>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <fsm_automatic_run+0x18>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	08000571 	.word	0x08000571
 8000560:	080005a9 	.word	0x080005a9
 8000564:	0800065d 	.word	0x0800065d
 8000568:	08000705 	.word	0x08000705
 800056c:	080007f5 	.word	0x080007f5
	case INIT:
		turnOffLed();
 8000570:	f7ff fee6 	bl	8000340 <turnOffLed>

		status = RED1_GREEN2_AUTO;
 8000574:	4b90      	ldr	r3, [pc, #576]	; (80007b8 <fsm_automatic_run+0x274>)
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 800057a:	4b90      	ldr	r3, [pc, #576]	; (80007bc <fsm_automatic_run+0x278>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a90      	ldr	r2, [pc, #576]	; (80007c0 <fsm_automatic_run+0x27c>)
 8000580:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000582:	4b90      	ldr	r3, [pc, #576]	; (80007c4 <fsm_automatic_run+0x280>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a90      	ldr	r2, [pc, #576]	; (80007c8 <fsm_automatic_run+0x284>)
 8000588:	6013      	str	r3, [r2, #0]

//		updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		setTimer1(greenTimer*100);
 800058a:	4b8e      	ldr	r3, [pc, #568]	; (80007c4 <fsm_automatic_run+0x280>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2264      	movs	r2, #100	; 0x64
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fd29 	bl	8000fec <setTimer1>
		setTimer2(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 fd3a 	bl	8001014 <setTimer2>
		setTimer5(25);
 80005a0:	2019      	movs	r0, #25
 80005a2:	f000 fd5f 	bl	8001064 <setTimer5>
		break;
 80005a6:	e181      	b.n	80008ac <fsm_automatic_run+0x368>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 80005a8:	2014      	movs	r0, #20
 80005aa:	f7ff fee7 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 80005ae:	4b87      	ldr	r3, [pc, #540]	; (80007cc <fsm_automatic_run+0x288>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d11d      	bne.n	80005f2 <fsm_automatic_run+0xae>
			int len= sprintf(str,"LED RED      = %d    LED GREEN    = %d\r\n",counter1,counter2);
 80005b6:	4b82      	ldr	r3, [pc, #520]	; (80007c0 <fsm_automatic_run+0x27c>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b83      	ldr	r3, [pc, #524]	; (80007c8 <fsm_automatic_run+0x284>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4984      	ldr	r1, [pc, #528]	; (80007d0 <fsm_automatic_run+0x28c>)
 80005c0:	4884      	ldr	r0, [pc, #528]	; (80007d4 <fsm_automatic_run+0x290>)
 80005c2:	f003 f969 	bl	8003898 <siprintf>
 80005c6:	6078      	str	r0, [r7, #4]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	4980      	ldr	r1, [pc, #512]	; (80007d4 <fsm_automatic_run+0x290>)
 80005d2:	4881      	ldr	r0, [pc, #516]	; (80007d8 <fsm_automatic_run+0x294>)
 80005d4:	f002 fb5a 	bl	8002c8c <HAL_UART_Transmit>
			setTimer2(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f000 fd1b 	bl	8001014 <setTimer2>
			counter1--;
 80005de:	4b78      	ldr	r3, [pc, #480]	; (80007c0 <fsm_automatic_run+0x27c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a76      	ldr	r2, [pc, #472]	; (80007c0 <fsm_automatic_run+0x27c>)
 80005e6:	6013      	str	r3, [r2, #0]
			counter2--;
 80005e8:	4b77      	ldr	r3, [pc, #476]	; (80007c8 <fsm_automatic_run+0x284>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	4a76      	ldr	r2, [pc, #472]	; (80007c8 <fsm_automatic_run+0x284>)
 80005f0:	6013      	str	r3, [r2, #0]
//			str ="Hello world";
//			HAL_UART_Transmit(&huart2, str, strlen(str), 1000);

		}

		if(timer1_flag == 1) {
 80005f2:	4b7a      	ldr	r3, [pc, #488]	; (80007dc <fsm_automatic_run+0x298>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d118      	bne.n	800062c <fsm_automatic_run+0xe8>
			status = RED1_YELLOW2_AUTO;
 80005fa:	4b6f      	ldr	r3, [pc, #444]	; (80007b8 <fsm_automatic_run+0x274>)
 80005fc:	2203      	movs	r2, #3
 80005fe:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000600:	4b6e      	ldr	r3, [pc, #440]	; (80007bc <fsm_automatic_run+0x278>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b6f      	ldr	r3, [pc, #444]	; (80007c4 <fsm_automatic_run+0x280>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	2264      	movs	r2, #100	; 0x64
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fceb 	bl	8000fec <setTimer1>
			counter1 = redTimer-greenTimer;
 8000616:	4b69      	ldr	r3, [pc, #420]	; (80007bc <fsm_automatic_run+0x278>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b6a      	ldr	r3, [pc, #424]	; (80007c4 <fsm_automatic_run+0x280>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a67      	ldr	r2, [pc, #412]	; (80007c0 <fsm_automatic_run+0x27c>)
 8000622:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 8000624:	4b6e      	ldr	r3, [pc, #440]	; (80007e0 <fsm_automatic_run+0x29c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a67      	ldr	r2, [pc, #412]	; (80007c8 <fsm_automatic_run+0x284>)
 800062a:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fdc9 	bl	80001c4 <isButtonPressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 8132 	beq.w	800089e <fsm_automatic_run+0x35a>
			switchMode2();
 800063a:	f7ff ff6b 	bl	8000514 <switchMode2>
			int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 800063e:	4a69      	ldr	r2, [pc, #420]	; (80007e4 <fsm_automatic_run+0x2a0>)
 8000640:	4969      	ldr	r1, [pc, #420]	; (80007e8 <fsm_automatic_run+0x2a4>)
 8000642:	4864      	ldr	r0, [pc, #400]	; (80007d4 <fsm_automatic_run+0x290>)
 8000644:	f003 f928 	bl	8003898 <siprintf>
 8000648:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	b29a      	uxth	r2, r3
 800064e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000652:	4960      	ldr	r1, [pc, #384]	; (80007d4 <fsm_automatic_run+0x290>)
 8000654:	4860      	ldr	r0, [pc, #384]	; (80007d8 <fsm_automatic_run+0x294>)
 8000656:	f002 fb19 	bl	8002c8c <HAL_UART_Transmit>
//		if(isButtonPressed(3)){
//
//
//
//		}
		break;
 800065a:	e120      	b.n	800089e <fsm_automatic_run+0x35a>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 800065c:	2015      	movs	r0, #21
 800065e:	f7ff fe8d 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 8000662:	4b5a      	ldr	r3, [pc, #360]	; (80007cc <fsm_automatic_run+0x288>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d11d      	bne.n	80006a6 <fsm_automatic_run+0x162>
			int len= sprintf(str,"LED RED      = %d    LED YELLOW   = %d\r\n",counter1,counter2);
 800066a:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <fsm_automatic_run+0x27c>)
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	4b56      	ldr	r3, [pc, #344]	; (80007c8 <fsm_automatic_run+0x284>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	495e      	ldr	r1, [pc, #376]	; (80007ec <fsm_automatic_run+0x2a8>)
 8000674:	4857      	ldr	r0, [pc, #348]	; (80007d4 <fsm_automatic_run+0x290>)
 8000676:	f003 f90f 	bl	8003898 <siprintf>
 800067a:	60f8      	str	r0, [r7, #12]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	b29a      	uxth	r2, r3
 8000680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000684:	4953      	ldr	r1, [pc, #332]	; (80007d4 <fsm_automatic_run+0x290>)
 8000686:	4854      	ldr	r0, [pc, #336]	; (80007d8 <fsm_automatic_run+0x294>)
 8000688:	f002 fb00 	bl	8002c8c <HAL_UART_Transmit>
			setTimer2(100);
 800068c:	2064      	movs	r0, #100	; 0x64
 800068e:	f000 fcc1 	bl	8001014 <setTimer2>
			counter1--;
 8000692:	4b4b      	ldr	r3, [pc, #300]	; (80007c0 <fsm_automatic_run+0x27c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	3b01      	subs	r3, #1
 8000698:	4a49      	ldr	r2, [pc, #292]	; (80007c0 <fsm_automatic_run+0x27c>)
 800069a:	6013      	str	r3, [r2, #0]
			counter2--;
 800069c:	4b4a      	ldr	r3, [pc, #296]	; (80007c8 <fsm_automatic_run+0x284>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3b01      	subs	r3, #1
 80006a2:	4a49      	ldr	r2, [pc, #292]	; (80007c8 <fsm_automatic_run+0x284>)
 80006a4:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);

		}

		if(timer1_flag == 1) {
 80006a6:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <fsm_automatic_run+0x298>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d112      	bne.n	80006d4 <fsm_automatic_run+0x190>
			status = GREEN1_RED2_AUTO;
 80006ae:	4b42      	ldr	r3, [pc, #264]	; (80007b8 <fsm_automatic_run+0x274>)
 80006b0:	2204      	movs	r2, #4
 80006b2:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 80006b4:	4b43      	ldr	r3, [pc, #268]	; (80007c4 <fsm_automatic_run+0x280>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2264      	movs	r2, #100	; 0x64
 80006ba:	fb02 f303 	mul.w	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fc94 	bl	8000fec <setTimer1>
			counter1 = greenTimer;
 80006c4:	4b3f      	ldr	r3, [pc, #252]	; (80007c4 <fsm_automatic_run+0x280>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a3d      	ldr	r2, [pc, #244]	; (80007c0 <fsm_automatic_run+0x27c>)
 80006ca:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 80006cc:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <fsm_automatic_run+0x278>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a3d      	ldr	r2, [pc, #244]	; (80007c8 <fsm_automatic_run+0x284>)
 80006d2:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 80006d4:	2000      	movs	r0, #0
 80006d6:	f7ff fd75 	bl	80001c4 <isButtonPressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	f000 80e0 	beq.w	80008a2 <fsm_automatic_run+0x35e>
			switchMode2();
 80006e2:	f7ff ff17 	bl	8000514 <switchMode2>
			int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 80006e6:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <fsm_automatic_run+0x2a0>)
 80006e8:	493f      	ldr	r1, [pc, #252]	; (80007e8 <fsm_automatic_run+0x2a4>)
 80006ea:	483a      	ldr	r0, [pc, #232]	; (80007d4 <fsm_automatic_run+0x290>)
 80006ec:	f003 f8d4 	bl	8003898 <siprintf>
 80006f0:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	4936      	ldr	r1, [pc, #216]	; (80007d4 <fsm_automatic_run+0x290>)
 80006fc:	4836      	ldr	r0, [pc, #216]	; (80007d8 <fsm_automatic_run+0x294>)
 80006fe:	f002 fac5 	bl	8002c8c <HAL_UART_Transmit>
		}
		break;
 8000702:	e0ce      	b.n	80008a2 <fsm_automatic_run+0x35e>
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000704:	2016      	movs	r0, #22
 8000706:	f7ff fe39 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 800070a:	4b30      	ldr	r3, [pc, #192]	; (80007cc <fsm_automatic_run+0x288>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d11d      	bne.n	800074e <fsm_automatic_run+0x20a>
			int len= sprintf(str,"LED GREEN    = %d    LED RED      = %d\r\n",counter1,counter2);
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <fsm_automatic_run+0x27c>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <fsm_automatic_run+0x284>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4935      	ldr	r1, [pc, #212]	; (80007f0 <fsm_automatic_run+0x2ac>)
 800071c:	482d      	ldr	r0, [pc, #180]	; (80007d4 <fsm_automatic_run+0x290>)
 800071e:	f003 f8bb 	bl	8003898 <siprintf>
 8000722:	6178      	str	r0, [r7, #20]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	b29a      	uxth	r2, r3
 8000728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072c:	4929      	ldr	r1, [pc, #164]	; (80007d4 <fsm_automatic_run+0x290>)
 800072e:	482a      	ldr	r0, [pc, #168]	; (80007d8 <fsm_automatic_run+0x294>)
 8000730:	f002 faac 	bl	8002c8c <HAL_UART_Transmit>
			setTimer2(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f000 fc6d 	bl	8001014 <setTimer2>
			counter1--;
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <fsm_automatic_run+0x27c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <fsm_automatic_run+0x27c>)
 8000742:	6013      	str	r3, [r2, #0]
			counter2--;
 8000744:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <fsm_automatic_run+0x284>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	3b01      	subs	r3, #1
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <fsm_automatic_run+0x284>)
 800074c:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);

		}

		if(timer1_flag == 1) {
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <fsm_automatic_run+0x298>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d118      	bne.n	8000788 <fsm_automatic_run+0x244>
			status = YELLOW1_RED2_AUTO;
 8000756:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <fsm_automatic_run+0x274>)
 8000758:	2205      	movs	r2, #5
 800075a:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <fsm_automatic_run+0x278>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <fsm_automatic_run+0x280>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	2264      	movs	r2, #100	; 0x64
 8000768:	fb02 f303 	mul.w	r3, r2, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fc3d 	bl	8000fec <setTimer1>
			counter1 = yellowTimer;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <fsm_automatic_run+0x29c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <fsm_automatic_run+0x27c>)
 8000778:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <fsm_automatic_run+0x278>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <fsm_automatic_run+0x280>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <fsm_automatic_run+0x284>)
 8000786:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fd1b 	bl	80001c4 <isButtonPressed>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	f000 8088 	beq.w	80008a6 <fsm_automatic_run+0x362>
			switchMode2();
 8000796:	f7ff febd 	bl	8000514 <switchMode2>
			int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <fsm_automatic_run+0x2a0>)
 800079c:	4912      	ldr	r1, [pc, #72]	; (80007e8 <fsm_automatic_run+0x2a4>)
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <fsm_automatic_run+0x290>)
 80007a0:	f003 f87a 	bl	8003898 <siprintf>
 80007a4:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	4909      	ldr	r1, [pc, #36]	; (80007d4 <fsm_automatic_run+0x290>)
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <fsm_automatic_run+0x294>)
 80007b2:	f002 fa6b 	bl	8002c8c <HAL_UART_Transmit>
		}
		break;
 80007b6:	e076      	b.n	80008a6 <fsm_automatic_run+0x362>
 80007b8:	200000b8 	.word	0x200000b8
 80007bc:	20000018 	.word	0x20000018
 80007c0:	200000b0 	.word	0x200000b0
 80007c4:	20000020 	.word	0x20000020
 80007c8:	200000b4 	.word	0x200000b4
 80007cc:	2000012c 	.word	0x2000012c
 80007d0:	08004124 	.word	0x08004124
 80007d4:	200000bc 	.word	0x200000bc
 80007d8:	20000200 	.word	0x20000200
 80007dc:	20000124 	.word	0x20000124
 80007e0:	2000001c 	.word	0x2000001c
 80007e4:	08004150 	.word	0x08004150
 80007e8:	08004168 	.word	0x08004168
 80007ec:	08004170 	.word	0x08004170
 80007f0:	0800419c 	.word	0x0800419c
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 80007f4:	2017      	movs	r0, #23
 80007f6:	f7ff fdc1 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 80007fa:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <fsm_automatic_run+0x370>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d11d      	bne.n	800083e <fsm_automatic_run+0x2fa>
			 int len= sprintf(str,"LED YELLOW   = %d    LED RED      = %d\r\n",counter1,counter2);
 8000802:	4b2d      	ldr	r3, [pc, #180]	; (80008b8 <fsm_automatic_run+0x374>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <fsm_automatic_run+0x378>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	492d      	ldr	r1, [pc, #180]	; (80008c0 <fsm_automatic_run+0x37c>)
 800080c:	482d      	ldr	r0, [pc, #180]	; (80008c4 <fsm_automatic_run+0x380>)
 800080e:	f003 f843 	bl	8003898 <siprintf>
 8000812:	61f8      	str	r0, [r7, #28]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	b29a      	uxth	r2, r3
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	4929      	ldr	r1, [pc, #164]	; (80008c4 <fsm_automatic_run+0x380>)
 800081e:	482a      	ldr	r0, [pc, #168]	; (80008c8 <fsm_automatic_run+0x384>)
 8000820:	f002 fa34 	bl	8002c8c <HAL_UART_Transmit>
			setTimer2(100);
 8000824:	2064      	movs	r0, #100	; 0x64
 8000826:	f000 fbf5 	bl	8001014 <setTimer2>
			counter1--;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <fsm_automatic_run+0x374>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3b01      	subs	r3, #1
 8000830:	4a21      	ldr	r2, [pc, #132]	; (80008b8 <fsm_automatic_run+0x374>)
 8000832:	6013      	str	r3, [r2, #0]
			counter2--;
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <fsm_automatic_run+0x378>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	3b01      	subs	r3, #1
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <fsm_automatic_run+0x378>)
 800083c:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);

		}

		if(timer1_flag == 1) {
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <fsm_automatic_run+0x388>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d112      	bne.n	800086c <fsm_automatic_run+0x328>
			status = RED1_GREEN2_AUTO;
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <fsm_automatic_run+0x38c>)
 8000848:	2202      	movs	r2, #2
 800084a:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 800084c:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <fsm_automatic_run+0x390>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2264      	movs	r2, #100	; 0x64
 8000852:	fb02 f303 	mul.w	r3, r2, r3
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fbc8 	bl	8000fec <setTimer1>
			counter1 = redTimer;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <fsm_automatic_run+0x394>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <fsm_automatic_run+0x374>)
 8000862:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <fsm_automatic_run+0x390>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a14      	ldr	r2, [pc, #80]	; (80008bc <fsm_automatic_run+0x378>)
 800086a:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fca9 	bl	80001c4 <isButtonPressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d018      	beq.n	80008aa <fsm_automatic_run+0x366>
			switchMode2();
 8000878:	f7ff fe4c 	bl	8000514 <switchMode2>
			int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 800087c:	4a17      	ldr	r2, [pc, #92]	; (80008dc <fsm_automatic_run+0x398>)
 800087e:	4918      	ldr	r1, [pc, #96]	; (80008e0 <fsm_automatic_run+0x39c>)
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <fsm_automatic_run+0x380>)
 8000882:	f003 f809 	bl	8003898 <siprintf>
 8000886:	61b8      	str	r0, [r7, #24]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	b29a      	uxth	r2, r3
 800088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000890:	490c      	ldr	r1, [pc, #48]	; (80008c4 <fsm_automatic_run+0x380>)
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <fsm_automatic_run+0x384>)
 8000894:	f002 f9fa 	bl	8002c8c <HAL_UART_Transmit>
		}
		break;
 8000898:	e007      	b.n	80008aa <fsm_automatic_run+0x366>
	default:
		break;
 800089a:	bf00      	nop
 800089c:	e006      	b.n	80008ac <fsm_automatic_run+0x368>
		break;
 800089e:	bf00      	nop
 80008a0:	e004      	b.n	80008ac <fsm_automatic_run+0x368>
		break;
 80008a2:	bf00      	nop
 80008a4:	e002      	b.n	80008ac <fsm_automatic_run+0x368>
		break;
 80008a6:	bf00      	nop
 80008a8:	e000      	b.n	80008ac <fsm_automatic_run+0x368>
		break;
 80008aa:	bf00      	nop
	}
};
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000012c 	.word	0x2000012c
 80008b8:	200000b0 	.word	0x200000b0
 80008bc:	200000b4 	.word	0x200000b4
 80008c0:	080041c8 	.word	0x080041c8
 80008c4:	200000bc 	.word	0x200000bc
 80008c8:	20000200 	.word	0x20000200
 80008cc:	20000124 	.word	0x20000124
 80008d0:	200000b8 	.word	0x200000b8
 80008d4:	20000020 	.word	0x20000020
 80008d8:	20000018 	.word	0x20000018
 80008dc:	08004150 	.word	0x08004150
 80008e0:	08004168 	.word	0x08004168

080008e4 <switchMode3>:
 */


#include "fsm_manual.h"

void switchMode3() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <switchMode3+0x24>)
 80008ea:	220b      	movs	r2, #11
 80008ec:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <switchMode3+0x28>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <switchMode3+0x2c>)
 80008f4:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 80008f6:	2064      	movs	r0, #100	; 0x64
 80008f8:	f000 fb8c 	bl	8001014 <setTimer2>
	setTimer4(25);
 80008fc:	2019      	movs	r0, #25
 80008fe:	f000 fb9d 	bl	800103c <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200000b8 	.word	0x200000b8
 800090c:	2000001c 	.word	0x2000001c
 8000910:	200000b0 	.word	0x200000b0

08000914 <switchMode4>:

void switchMode4() {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <switchMode4+0x24>)
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <switchMode4+0x28>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <switchMode4+0x2c>)
 8000924:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000926:	2064      	movs	r0, #100	; 0x64
 8000928:	f000 fb74 	bl	8001014 <setTimer2>
	setTimer4(25);
 800092c:	2019      	movs	r0, #25
 800092e:	f000 fb85 	bl	800103c <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000b8 	.word	0x200000b8
 800093c:	20000020 	.word	0x20000020
 8000940:	200000b0 	.word	0x200000b0

08000944 <fsm_manual_run>:

void fsm_manual_run() {
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
	switch(status) {
 800094a:	4b8f      	ldr	r3, [pc, #572]	; (8000b88 <fsm_manual_run+0x244>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	3b0a      	subs	r3, #10
 8000950:	2b05      	cmp	r3, #5
 8000952:	f200 8184 	bhi.w	8000c5e <fsm_manual_run+0x31a>
 8000956:	a201      	add	r2, pc, #4	; (adr r2, 800095c <fsm_manual_run+0x18>)
 8000958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095c:	08000975 	.word	0x08000975
 8000960:	08000a5b 	.word	0x08000a5b
 8000964:	08000b45 	.word	0x08000b45
 8000968:	080009b7 	.word	0x080009b7
 800096c:	08000a9d 	.word	0x08000a9d
 8000970:	08000bb9 	.word	0x08000bb9



	case RED_MAN:
		displayLed(RED_MAN);
 8000974:	200a      	movs	r0, #10
 8000976:	f7ff fd01 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 800097a:	4b84      	ldr	r3, [pc, #528]	; (8000b8c <fsm_manual_run+0x248>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d102      	bne.n	8000988 <fsm_manual_run+0x44>
			setTimer2(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fb46 	bl	8001014 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff fc1b 	bl	80001c4 <isButtonPressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <fsm_manual_run+0x54>
			switchMode3();
 8000994:	f7ff ffa6 	bl	80008e4 <switchMode3>
		}

		if(isButtonPressed(1)) {
 8000998:	2001      	movs	r0, #1
 800099a:	f7ff fc13 	bl	80001c4 <isButtonPressed>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 815e 	beq.w	8000c62 <fsm_manual_run+0x31e>
			status = RED_MAN_MODIFY;
 80009a6:	4b78      	ldr	r3, [pc, #480]	; (8000b88 <fsm_manual_run+0x244>)
 80009a8:	220d      	movs	r2, #13
 80009aa:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 80009ac:	4b78      	ldr	r3, [pc, #480]	; (8000b90 <fsm_manual_run+0x24c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a78      	ldr	r2, [pc, #480]	; (8000b94 <fsm_manual_run+0x250>)
 80009b2:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 80009b4:	e155      	b.n	8000c62 <fsm_manual_run+0x31e>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 80009b6:	200a      	movs	r0, #10
 80009b8:	f7ff fce0 	bl	800037c <displayLed>

		if(isButtonPressed(0)) {
 80009bc:	2000      	movs	r0, #0
 80009be:	f7ff fc01 	bl	80001c4 <isButtonPressed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <fsm_manual_run+0x8a>
			status = RED_MAN;
 80009c8:	4b6f      	ldr	r3, [pc, #444]	; (8000b88 <fsm_manual_run+0x244>)
 80009ca:	220a      	movs	r2, #10
 80009cc:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fbf8 	bl	80001c4 <isButtonPressed>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d01b      	beq.n	8000a12 <fsm_manual_run+0xce>
			timerMan++;
 80009da:	4b6e      	ldr	r3, [pc, #440]	; (8000b94 <fsm_manual_run+0x250>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	3301      	adds	r3, #1
 80009e0:	4a6c      	ldr	r2, [pc, #432]	; (8000b94 <fsm_manual_run+0x250>)
 80009e2:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 80009e4:	4b6b      	ldr	r3, [pc, #428]	; (8000b94 <fsm_manual_run+0x250>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	496b      	ldr	r1, [pc, #428]	; (8000b98 <fsm_manual_run+0x254>)
 80009ec:	486b      	ldr	r0, [pc, #428]	; (8000b9c <fsm_manual_run+0x258>)
 80009ee:	f002 ff53 	bl	8003898 <siprintf>
 80009f2:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fc:	4967      	ldr	r1, [pc, #412]	; (8000b9c <fsm_manual_run+0x258>)
 80009fe:	4868      	ldr	r0, [pc, #416]	; (8000ba0 <fsm_manual_run+0x25c>)
 8000a00:	f002 f944 	bl	8002c8c <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 8000a04:	4b63      	ldr	r3, [pc, #396]	; (8000b94 <fsm_manual_run+0x250>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b63      	cmp	r3, #99	; 0x63
 8000a0a:	dd02      	ble.n	8000a12 <fsm_manual_run+0xce>
 8000a0c:	4b61      	ldr	r3, [pc, #388]	; (8000b94 <fsm_manual_run+0x250>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff fbd6 	bl	80001c4 <isButtonPressed>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f000 8123 	beq.w	8000c66 <fsm_manual_run+0x322>
			int len= sprintf(str,"%s\r\n","save successfully");
 8000a20:	4a60      	ldr	r2, [pc, #384]	; (8000ba4 <fsm_manual_run+0x260>)
 8000a22:	4961      	ldr	r1, [pc, #388]	; (8000ba8 <fsm_manual_run+0x264>)
 8000a24:	485d      	ldr	r0, [pc, #372]	; (8000b9c <fsm_manual_run+0x258>)
 8000a26:	f002 ff37 	bl	8003898 <siprintf>
 8000a2a:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a34:	4959      	ldr	r1, [pc, #356]	; (8000b9c <fsm_manual_run+0x258>)
 8000a36:	485a      	ldr	r0, [pc, #360]	; (8000ba0 <fsm_manual_run+0x25c>)
 8000a38:	f002 f928 	bl	8002c8c <HAL_UART_Transmit>
			status = INIT;
 8000a3c:	4b52      	ldr	r3, [pc, #328]	; (8000b88 <fsm_manual_run+0x244>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
			redTimer = timerMan;
 8000a42:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <fsm_manual_run+0x250>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a52      	ldr	r2, [pc, #328]	; (8000b90 <fsm_manual_run+0x24c>)
 8000a48:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 8000a4a:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <fsm_manual_run+0x24c>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4b57      	ldr	r3, [pc, #348]	; (8000bac <fsm_manual_run+0x268>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	4a56      	ldr	r2, [pc, #344]	; (8000bb0 <fsm_manual_run+0x26c>)
 8000a56:	6013      	str	r3, [r2, #0]

		}

		break;
 8000a58:	e105      	b.n	8000c66 <fsm_manual_run+0x322>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 8000a5a:	200b      	movs	r0, #11
 8000a5c:	f7ff fc8e 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 8000a60:	4b4a      	ldr	r3, [pc, #296]	; (8000b8c <fsm_manual_run+0x248>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d102      	bne.n	8000a6e <fsm_manual_run+0x12a>
			setTimer2(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f000 fad3 	bl	8001014 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fba8 	bl	80001c4 <isButtonPressed>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <fsm_manual_run+0x13a>
			switchMode4();
 8000a7a:	f7ff ff4b 	bl	8000914 <switchMode4>
		}

		if(isButtonPressed(1)) {
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fba0 	bl	80001c4 <isButtonPressed>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 80ef 	beq.w	8000c6a <fsm_manual_run+0x326>
			status = YELLOW_MAN_MODIFY;
 8000a8c:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <fsm_manual_run+0x244>)
 8000a8e:	220e      	movs	r2, #14
 8000a90:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 8000a92:	4b46      	ldr	r3, [pc, #280]	; (8000bac <fsm_manual_run+0x268>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a3f      	ldr	r2, [pc, #252]	; (8000b94 <fsm_manual_run+0x250>)
 8000a98:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 8000a9a:	e0e6      	b.n	8000c6a <fsm_manual_run+0x326>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 8000a9c:	200b      	movs	r0, #11
 8000a9e:	f7ff fc6d 	bl	800037c <displayLed>

		if(isButtonPressed(0)) {
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fb8e 	bl	80001c4 <isButtonPressed>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <fsm_manual_run+0x170>
			status = YELLOW_MAN;
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <fsm_manual_run+0x244>)
 8000ab0:	220b      	movs	r2, #11
 8000ab2:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fb85 	bl	80001c4 <isButtonPressed>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d01d      	beq.n	8000afc <fsm_manual_run+0x1b8>
			timerMan++;
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <fsm_manual_run+0x250>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <fsm_manual_run+0x250>)
 8000ac8:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <fsm_manual_run+0x250>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4938      	ldr	r1, [pc, #224]	; (8000bb4 <fsm_manual_run+0x270>)
 8000ad2:	4832      	ldr	r0, [pc, #200]	; (8000b9c <fsm_manual_run+0x258>)
 8000ad4:	f002 fee0 	bl	8003898 <siprintf>
 8000ad8:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	492e      	ldr	r1, [pc, #184]	; (8000b9c <fsm_manual_run+0x258>)
 8000ae4:	482e      	ldr	r0, [pc, #184]	; (8000ba0 <fsm_manual_run+0x25c>)
 8000ae6:	f002 f8d1 	bl	8002c8c <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <fsm_manual_run+0x250>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <fsm_manual_run+0x24c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	db02      	blt.n	8000afc <fsm_manual_run+0x1b8>
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <fsm_manual_run+0x250>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 8000afc:	2002      	movs	r0, #2
 8000afe:	f7ff fb61 	bl	80001c4 <isButtonPressed>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 80b2 	beq.w	8000c6e <fsm_manual_run+0x32a>
			int len= sprintf(str,"%s\r\n","save successfully");
 8000b0a:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <fsm_manual_run+0x260>)
 8000b0c:	4926      	ldr	r1, [pc, #152]	; (8000ba8 <fsm_manual_run+0x264>)
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <fsm_manual_run+0x258>)
 8000b10:	f002 fec2 	bl	8003898 <siprintf>
 8000b14:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	491f      	ldr	r1, [pc, #124]	; (8000b9c <fsm_manual_run+0x258>)
 8000b20:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <fsm_manual_run+0x25c>)
 8000b22:	f002 f8b3 	bl	8002c8c <HAL_UART_Transmit>
			status = INIT;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <fsm_manual_run+0x244>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
			yellowTimer = timerMan;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <fsm_manual_run+0x250>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <fsm_manual_run+0x268>)
 8000b32:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <fsm_manual_run+0x24c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <fsm_manual_run+0x268>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <fsm_manual_run+0x26c>)
 8000b40:	6013      	str	r3, [r2, #0]
		}
		break;
 8000b42:	e094      	b.n	8000c6e <fsm_manual_run+0x32a>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8000b44:	200c      	movs	r0, #12
 8000b46:	f7ff fc19 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <fsm_manual_run+0x248>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d102      	bne.n	8000b58 <fsm_manual_run+0x214>
			setTimer2(100);
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f000 fa5e 	bl	8001014 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fb33 	bl	80001c4 <isButtonPressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <fsm_manual_run+0x226>
			status = INIT;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <fsm_manual_run+0x244>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fb2a 	bl	80001c4 <isButtonPressed>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d07d      	beq.n	8000c72 <fsm_manual_run+0x32e>
			status = GREEN_MAN_MODIFY;
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <fsm_manual_run+0x244>)
 8000b78:	220f      	movs	r2, #15
 8000b7a:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <fsm_manual_run+0x26c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <fsm_manual_run+0x250>)
 8000b82:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 8000b84:	e075      	b.n	8000c72 <fsm_manual_run+0x32e>
 8000b86:	bf00      	nop
 8000b88:	200000b8 	.word	0x200000b8
 8000b8c:	2000012c 	.word	0x2000012c
 8000b90:	20000018 	.word	0x20000018
 8000b94:	20000148 	.word	0x20000148
 8000b98:	080041f4 	.word	0x080041f4
 8000b9c:	200000bc 	.word	0x200000bc
 8000ba0:	20000200 	.word	0x20000200
 8000ba4:	08004208 	.word	0x08004208
 8000ba8:	0800421c 	.word	0x0800421c
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	20000020 	.word	0x20000020
 8000bb4:	08004224 	.word	0x08004224
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8000bb8:	200c      	movs	r0, #12
 8000bba:	f7ff fbdf 	bl	800037c <displayLed>

		if(isButtonPressed(0)) {
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fb00 	bl	80001c4 <isButtonPressed>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <fsm_manual_run+0x28c>
			status = GREEN_MAN;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <fsm_manual_run+0x33c>)
 8000bcc:	220c      	movs	r2, #12
 8000bce:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff faf7 	bl	80001c4 <isButtonPressed>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d01d      	beq.n	8000c18 <fsm_manual_run+0x2d4>
			timerMan++;
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <fsm_manual_run+0x340>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <fsm_manual_run+0x340>)
 8000be4:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <fsm_manual_run+0x340>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4926      	ldr	r1, [pc, #152]	; (8000c88 <fsm_manual_run+0x344>)
 8000bee:	4827      	ldr	r0, [pc, #156]	; (8000c8c <fsm_manual_run+0x348>)
 8000bf0:	f002 fe52 	bl	8003898 <siprintf>
 8000bf4:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	4923      	ldr	r1, [pc, #140]	; (8000c8c <fsm_manual_run+0x348>)
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <fsm_manual_run+0x34c>)
 8000c02:	f002 f843 	bl	8002c8c <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <fsm_manual_run+0x340>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <fsm_manual_run+0x350>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	db02      	blt.n	8000c18 <fsm_manual_run+0x2d4>
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <fsm_manual_run+0x340>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fad3 	bl	80001c4 <isButtonPressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d028      	beq.n	8000c76 <fsm_manual_run+0x332>

			int len= sprintf(str,"%s\r\n","save successfully");
 8000c24:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <fsm_manual_run+0x354>)
 8000c26:	491d      	ldr	r1, [pc, #116]	; (8000c9c <fsm_manual_run+0x358>)
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <fsm_manual_run+0x348>)
 8000c2a:	f002 fe35 	bl	8003898 <siprintf>
 8000c2e:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c38:	4914      	ldr	r1, [pc, #80]	; (8000c8c <fsm_manual_run+0x348>)
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <fsm_manual_run+0x34c>)
 8000c3c:	f002 f826 	bl	8002c8c <HAL_UART_Transmit>
			status = INIT;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <fsm_manual_run+0x33c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
			greenTimer = timerMan;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <fsm_manual_run+0x340>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <fsm_manual_run+0x35c>)
 8000c4c:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <fsm_manual_run+0x350>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <fsm_manual_run+0x35c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <fsm_manual_run+0x360>)
 8000c5a:	6013      	str	r3, [r2, #0]

		}
		break;
 8000c5c:	e00b      	b.n	8000c76 <fsm_manual_run+0x332>
	default:
		break;
 8000c5e:	bf00      	nop
 8000c60:	e00a      	b.n	8000c78 <fsm_manual_run+0x334>
		break;
 8000c62:	bf00      	nop
 8000c64:	e008      	b.n	8000c78 <fsm_manual_run+0x334>
		break;
 8000c66:	bf00      	nop
 8000c68:	e006      	b.n	8000c78 <fsm_manual_run+0x334>
		break;
 8000c6a:	bf00      	nop
 8000c6c:	e004      	b.n	8000c78 <fsm_manual_run+0x334>
		break;
 8000c6e:	bf00      	nop
 8000c70:	e002      	b.n	8000c78 <fsm_manual_run+0x334>
		break;
 8000c72:	bf00      	nop
 8000c74:	e000      	b.n	8000c78 <fsm_manual_run+0x334>
		break;
 8000c76:	bf00      	nop
	}
};
 8000c78:	bf00      	nop
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000b8 	.word	0x200000b8
 8000c84:	20000148 	.word	0x20000148
 8000c88:	08004238 	.word	0x08004238
 8000c8c:	200000bc 	.word	0x200000bc
 8000c90:	20000200 	.word	0x20000200
 8000c94:	20000018 	.word	0x20000018
 8000c98:	08004208 	.word	0x08004208
 8000c9c:	0800421c 	.word	0x0800421c
 8000ca0:	20000020 	.word	0x20000020
 8000ca4:	2000001c 	.word	0x2000001c

08000ca8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fb9a 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f818 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f000 f8d0 	bl	8000e58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cb8:	f000 f8a4 	bl	8000e04 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cbc:	f000 f854 	bl	8000d68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000cc0:	4806      	ldr	r0, [pc, #24]	; (8000cdc <main+0x34>)
 8000cc2:	f001 fbe5 	bl	8002490 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 8000cc6:	f7ff fa41 	bl	800014c <initStateForButton>
  status = INIT;
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <main+0x38>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000cd0:	f7ff fc38 	bl	8000544 <fsm_automatic_run>
	  fsm_manual_run();
 8000cd4:	f7ff fe36 	bl	8000944 <fsm_manual_run>
	  fsm_automatic_run();
 8000cd8:	e7fa      	b.n	8000cd0 <main+0x28>
 8000cda:	bf00      	nop
 8000cdc:	200001b8 	.word	0x200001b8
 8000ce0:	200000b8 	.word	0x200000b8

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2228      	movs	r2, #40	; 0x28
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 fdc8 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0e:	2310      	movs	r3, #16
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000d16:	2300      	movs	r3, #0
 8000d18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000d1a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 ff55 	bl	8001bd4 <HAL_RCC_OscConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000d30:	f000 f956 	bl	8000fe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d34:	230f      	movs	r3, #15
 8000d36:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f9c0 	bl	80020d4 <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d5a:	f000 f941 	bl	8000fe0 <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	3740      	adds	r7, #64	; 0x40
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d8e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000d9c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000db0:	f001 fb1e 	bl	80023f0 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dba:	f000 f911 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000dcc:	f001 fcba 	bl	8002744 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dd6:	f000 f903 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_TIM2_Init+0x98>)
 8000de8:	f001 fe90 	bl	8002b0c <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000df2:	f000 f8f5 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001b8 	.word	0x200001b8

08000e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <MX_USART2_UART_Init+0x50>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	f001 fed6 	bl	8002bec <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e46:	f000 f8cb 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000200 	.word	0x20000200
 8000e54:	40004400 	.word	0x40004400

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b51      	ldr	r3, [pc, #324]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a50      	ldr	r2, [pc, #320]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b4b      	ldr	r3, [pc, #300]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b48      	ldr	r3, [pc, #288]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b45      	ldr	r3, [pc, #276]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b42      	ldr	r3, [pc, #264]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b3f      	ldr	r3, [pc, #252]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a3e      	ldr	r2, [pc, #248]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b3c      	ldr	r3, [pc, #240]	; (8000fb4 <MX_GPIO_Init+0x15c>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000ed2:	4839      	ldr	r0, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000ed4:	f000 fe43 	bl	8001b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000ede:	4837      	ldr	r0, [pc, #220]	; (8000fbc <MX_GPIO_Init+0x164>)
 8000ee0:	f000 fe3d 	bl	8001b5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eea:	4b35      	ldr	r3, [pc, #212]	; (8000fc0 <MX_GPIO_Init+0x168>)
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4832      	ldr	r0, [pc, #200]	; (8000fc4 <MX_GPIO_Init+0x16c>)
 8000efa:	f000 fc95 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 8000efe:	2301      	movs	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4829      	ldr	r0, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000f12:	f000 fc89 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 8000f16:	2312      	movs	r3, #18
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4619      	mov	r1, r3
 8000f28:	4823      	ldr	r0, [pc, #140]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000f2a:	f000 fc7d 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8000f2e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4619      	mov	r1, r3
 8000f46:	481c      	ldr	r0, [pc, #112]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000f48:	f000 fc6e 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0310 	add.w	r3, r7, #16
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <MX_GPIO_Init+0x160>)
 8000f60:	f000 fc62 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8000f64:	2301      	movs	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <MX_GPIO_Init+0x164>)
 8000f78:	f000 fc56 	bl	8001828 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000f7c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	4619      	mov	r1, r3
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_GPIO_Init+0x164>)
 8000f96:	f000 fc47 	bl	8001828 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2028      	movs	r0, #40	; 0x28
 8000fa0:	f000 fb59 	bl	8001656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa4:	2028      	movs	r0, #40	; 0x28
 8000fa6:	f000 fb72 	bl	800168e <HAL_NVIC_EnableIRQ>

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	10110000 	.word	0x10110000
 8000fc4:	40011000 	.word	0x40011000

08000fc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	 timerRun();
 8000fd0:	f000 f85c 	bl	800108c <timerRun>
	 getKeyInput();
 8000fd4:	f7ff f920 	bl	8000218 <getKeyInput>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <setTimer1>:
int timer5_counter = 0;
int timer5_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <setTimer1+0x20>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <setTimer1+0x24>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000120 	.word	0x20000120
 8001010:	20000124 	.word	0x20000124

08001014 <setTimer2>:

void setTimer2(int duration) {
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800101c:	4a05      	ldr	r2, [pc, #20]	; (8001034 <setTimer2+0x20>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001022:	4b05      	ldr	r3, [pc, #20]	; (8001038 <setTimer2+0x24>)
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000128 	.word	0x20000128
 8001038:	2000012c 	.word	0x2000012c

0800103c <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001044:	4a05      	ldr	r2, [pc, #20]	; (800105c <setTimer4+0x20>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <setTimer4+0x24>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000138 	.word	0x20000138
 8001060:	2000013c 	.word	0x2000013c

08001064 <setTimer5>:

void setTimer5(int duration) {
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <setTimer5+0x20>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <setTimer5+0x24>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000140 	.word	0x20000140
 8001088:	20000144 	.word	0x20000144

0800108c <timerRun>:

void timerRun() {
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <timerRun+0xac>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	dd0b      	ble.n	80010b0 <timerRun+0x24>
		timer1_counter--;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <timerRun+0xac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	4a26      	ldr	r2, [pc, #152]	; (8001138 <timerRun+0xac>)
 80010a0:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <timerRun+0xac>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dc02      	bgt.n	80010b0 <timerRun+0x24>
			timer1_flag = 1;
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <timerRun+0xb0>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <timerRun+0xb4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	dd0b      	ble.n	80010d0 <timerRun+0x44>
		timer2_counter--;
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <timerRun+0xb4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a20      	ldr	r2, [pc, #128]	; (8001140 <timerRun+0xb4>)
 80010c0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <timerRun+0xb4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dc02      	bgt.n	80010d0 <timerRun+0x44>
			timer2_flag = 1;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <timerRun+0xb8>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <timerRun+0xbc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd0b      	ble.n	80010f0 <timerRun+0x64>
		timer3_counter--;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <timerRun+0xbc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3b01      	subs	r3, #1
 80010de:	4a1a      	ldr	r2, [pc, #104]	; (8001148 <timerRun+0xbc>)
 80010e0:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <timerRun+0xbc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc02      	bgt.n	80010f0 <timerRun+0x64>
			timer3_flag = 1;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <timerRun+0xc0>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <timerRun+0xc4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dd0b      	ble.n	8001110 <timerRun+0x84>
		timer4_counter--;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <timerRun+0xc4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4a14      	ldr	r2, [pc, #80]	; (8001150 <timerRun+0xc4>)
 8001100:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <timerRun+0xc4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dc02      	bgt.n	8001110 <timerRun+0x84>
			timer4_flag = 1;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <timerRun+0xc8>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <timerRun+0xcc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	dd0b      	ble.n	8001130 <timerRun+0xa4>
		timer5_counter--;
 8001118:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <timerRun+0xcc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3b01      	subs	r3, #1
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <timerRun+0xcc>)
 8001120:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <timerRun+0xcc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	dc02      	bgt.n	8001130 <timerRun+0xa4>
			timer5_flag = 1;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <timerRun+0xd0>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	20000120 	.word	0x20000120
 800113c:	20000124 	.word	0x20000124
 8001140:	20000128 	.word	0x20000128
 8001144:	2000012c 	.word	0x2000012c
 8001148:	20000130 	.word	0x20000130
 800114c:	20000134 	.word	0x20000134
 8001150:	20000138 	.word	0x20000138
 8001154:	2000013c 	.word	0x2000013c
 8001158:	20000140 	.word	0x20000140
 800115c:	20000144 	.word	0x20000144

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_MspInit+0x5c>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a14      	ldr	r2, [pc, #80]	; (80011bc <HAL_MspInit+0x5c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_MspInit+0x5c>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_MspInit+0x5c>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_MspInit+0x5c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_MspInit+0x5c>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_MspInit+0x60>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <HAL_MspInit+0x60>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d4:	d113      	bne.n	80011fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x44>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	201c      	movs	r0, #28
 80011f4:	f000 fa2f 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011f8:	201c      	movs	r0, #28
 80011fa:	f000 fa48 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_UART_MspInit+0x80>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d12b      	bne.n	8001284 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_UART_MspInit+0x84>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001236:	61d3      	str	r3, [r2, #28]
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0x84>)
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_UART_MspInit+0x84>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_UART_MspInit+0x84>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800125c:	230c      	movs	r3, #12
 800125e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2302      	movs	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4619      	mov	r1, r3
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <HAL_UART_MspInit+0x88>)
 8001270:	f000 fada 	bl	8001828 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2100      	movs	r1, #0
 8001278:	2026      	movs	r0, #38	; 0x26
 800127a:	f000 f9ec 	bl	8001656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800127e:	2026      	movs	r0, #38	; 0x26
 8001280:	f000 fa05 	bl	800168e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40004400 	.word	0x40004400
 8001290:	40021000 	.word	0x40021000
 8001294:	40010800 	.word	0x40010800

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800129c:	e7fe      	b.n	800129c <NMI_Handler+0x4>

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012de:	f000 f8c7 	bl	8001470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM2_IRQHandler+0x10>)
 80012ee:	f001 f921 	bl	8002534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200001b8 	.word	0x200001b8

080012fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001300:	4802      	ldr	r0, [pc, #8]	; (800130c <USART2_IRQHandler+0x10>)
 8001302:	f001 fd47 	bl	8002d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000200 	.word	0x20000200

08001310 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001314:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001318:	f000 fc3a 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f002 fa70 	bl	8003834 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20005000 	.word	0x20005000
 8001380:	00000400 	.word	0x00000400
 8001384:	2000014c 	.word	0x2000014c
 8001388:	20000260 	.word	0x20000260

0800138c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001398:	f7ff fff8 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800139c:	480b      	ldr	r0, [pc, #44]	; (80013cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800139e:	490c      	ldr	r1, [pc, #48]	; (80013d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013a0:	4a0c      	ldr	r2, [pc, #48]	; (80013d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a4:	e002      	b.n	80013ac <LoopCopyDataInit>

080013a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013aa:	3304      	adds	r3, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b0:	d3f9      	bcc.n	80013a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b2:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013b4:	4c09      	ldr	r4, [pc, #36]	; (80013dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b8:	e001      	b.n	80013be <LoopFillZerobss>

080013ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013bc:	3204      	adds	r2, #4

080013be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c0:	d3fb      	bcc.n	80013ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c2:	f002 fa3d 	bl	8003840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c6:	f7ff fc6f 	bl	8000ca8 <main>
  bx lr
 80013ca:	4770      	bx	lr
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80013d4:	080042b4 	.word	0x080042b4
  ldr r2, =_sbss
 80013d8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80013dc:	2000025c 	.word	0x2000025c

080013e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC1_2_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_Init+0x28>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a07      	ldr	r2, [pc, #28]	; (800140c <HAL_Init+0x28>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f923 	bl	8001640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f808 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f7ff feae 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40022000 	.word	0x40022000

08001410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_InitTick+0x54>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x58>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	fbb3 f3f1 	udiv	r3, r3, r1
 800142a:	fbb2 f3f3 	udiv	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f93b 	bl	80016aa <HAL_SYSTICK_Config>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e00e      	b.n	800145c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d80a      	bhi.n	800145a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f000 f903 	bl	8001656 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001450:	4a06      	ldr	r2, [pc, #24]	; (800146c <HAL_InitTick+0x5c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e000      	b.n	800145c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000024 	.word	0x20000024
 8001468:	2000002c 	.word	0x2000002c
 800146c:	20000028 	.word	0x20000028

08001470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_IncTick+0x1c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4b05      	ldr	r3, [pc, #20]	; (8001490 <HAL_IncTick+0x20>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4413      	add	r3, r2
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <HAL_IncTick+0x20>)
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	2000002c 	.word	0x2000002c
 8001490:	20000248 	.word	0x20000248

08001494 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_GetTick+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000248 	.word	0x20000248

080014a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c4:	4013      	ands	r3, r2
 80014c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x44>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_GetPriorityGrouping+0x18>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	f003 0307 	and.w	r3, r3, #7
}
 80014fe:	4618      	mov	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	db0b      	blt.n	8001536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 021f 	and.w	r2, r3, #31
 8001524:	4906      	ldr	r1, [pc, #24]	; (8001540 <__NVIC_EnableIRQ+0x34>)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	2001      	movs	r0, #1
 800152e:	fa00 f202 	lsl.w	r2, r0, r2
 8001532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3b01      	subs	r3, #1
 8001608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160c:	d301      	bcc.n	8001612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160e:	2301      	movs	r3, #1
 8001610:	e00f      	b.n	8001632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <SysTick_Config+0x40>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161a:	210f      	movs	r1, #15
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f7ff ff90 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SysTick_Config+0x40>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <SysTick_Config+0x40>)
 800162c:	2207      	movs	r2, #7
 800162e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	e000e010 	.word	0xe000e010

08001640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff2d 	bl	80014a8 <__NVIC_SetPriorityGrouping>
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001668:	f7ff ff42 	bl	80014f0 <__NVIC_GetPriorityGrouping>
 800166c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff ff90 	bl	8001598 <NVIC_EncodePriority>
 8001678:	4602      	mov	r2, r0
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff5f 	bl	8001544 <__NVIC_SetPriority>
}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff35 	bl	800150c <__NVIC_EnableIRQ>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff ffa2 	bl	80015fc <SysTick_Config>
 80016b8:	4603      	mov	r3, r0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d008      	beq.n	80016ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2204      	movs	r2, #4
 80016de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e020      	b.n	800172e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 020e 	bic.w	r2, r2, #14
 80016fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d005      	beq.n	800175c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2204      	movs	r2, #4
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e051      	b.n	8001800 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 020e 	bic.w	r2, r2, #14
 800176a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_DMA_Abort_IT+0xd4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d029      	beq.n	80017da <HAL_DMA_Abort_IT+0xa2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <HAL_DMA_Abort_IT+0xd8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d022      	beq.n	80017d6 <HAL_DMA_Abort_IT+0x9e>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_DMA_Abort_IT+0xdc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01a      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x98>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_DMA_Abort_IT+0xe0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d012      	beq.n	80017ca <HAL_DMA_Abort_IT+0x92>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <HAL_DMA_Abort_IT+0xe4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00a      	beq.n	80017c4 <HAL_DMA_Abort_IT+0x8c>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_DMA_Abort_IT+0xe8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <HAL_DMA_Abort_IT+0x86>
 80017b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80017bc:	e00e      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c2:	e00b      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	e008      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	e005      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d4:	e002      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017d6:	2310      	movs	r3, #16
 80017d8:	e000      	b.n	80017dc <HAL_DMA_Abort_IT+0xa4>
 80017da:	2301      	movs	r3, #1
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_DMA_Abort_IT+0xec>)
 80017de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
    } 
  }
  return status;
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40020008 	.word	0x40020008
 8001810:	4002001c 	.word	0x4002001c
 8001814:	40020030 	.word	0x40020030
 8001818:	40020044 	.word	0x40020044
 800181c:	40020058 	.word	0x40020058
 8001820:	4002006c 	.word	0x4002006c
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b08b      	sub	sp, #44	; 0x2c
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001832:	2300      	movs	r3, #0
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183a:	e169      	b.n	8001b10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800183c:	2201      	movs	r2, #1
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 8158 	bne.w	8001b0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a9a      	ldr	r2, [pc, #616]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d05e      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001864:	4a98      	ldr	r2, [pc, #608]	; (8001ac8 <HAL_GPIO_Init+0x2a0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d875      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800186a:	4a98      	ldr	r2, [pc, #608]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d058      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001870:	4a96      	ldr	r2, [pc, #600]	; (8001acc <HAL_GPIO_Init+0x2a4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d86f      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001876:	4a96      	ldr	r2, [pc, #600]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d052      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 800187c:	4a94      	ldr	r2, [pc, #592]	; (8001ad0 <HAL_GPIO_Init+0x2a8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d869      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 8001882:	4a94      	ldr	r2, [pc, #592]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d04c      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001888:	4a92      	ldr	r2, [pc, #584]	; (8001ad4 <HAL_GPIO_Init+0x2ac>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d863      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800188e:	4a92      	ldr	r2, [pc, #584]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d046      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
 8001894:	4a90      	ldr	r2, [pc, #576]	; (8001ad8 <HAL_GPIO_Init+0x2b0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d85d      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 800189a:	2b12      	cmp	r3, #18
 800189c:	d82a      	bhi.n	80018f4 <HAL_GPIO_Init+0xcc>
 800189e:	2b12      	cmp	r3, #18
 80018a0:	d859      	bhi.n	8001956 <HAL_GPIO_Init+0x12e>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_GPIO_Init+0x80>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001923 	.word	0x08001923
 80018ac:	080018fd 	.word	0x080018fd
 80018b0:	0800190f 	.word	0x0800190f
 80018b4:	08001951 	.word	0x08001951
 80018b8:	08001957 	.word	0x08001957
 80018bc:	08001957 	.word	0x08001957
 80018c0:	08001957 	.word	0x08001957
 80018c4:	08001957 	.word	0x08001957
 80018c8:	08001957 	.word	0x08001957
 80018cc:	08001957 	.word	0x08001957
 80018d0:	08001957 	.word	0x08001957
 80018d4:	08001957 	.word	0x08001957
 80018d8:	08001957 	.word	0x08001957
 80018dc:	08001957 	.word	0x08001957
 80018e0:	08001957 	.word	0x08001957
 80018e4:	08001957 	.word	0x08001957
 80018e8:	08001957 	.word	0x08001957
 80018ec:	08001905 	.word	0x08001905
 80018f0:	08001919 	.word	0x08001919
 80018f4:	4a79      	ldr	r2, [pc, #484]	; (8001adc <HAL_GPIO_Init+0x2b4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018fa:	e02c      	b.n	8001956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e029      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	3304      	adds	r3, #4
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e024      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	3308      	adds	r3, #8
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e01f      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	330c      	adds	r3, #12
 800191e:	623b      	str	r3, [r7, #32]
          break;
 8001920:	e01a      	b.n	8001958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800192a:	2304      	movs	r3, #4
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e013      	b.n	8001958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001938:	2308      	movs	r3, #8
 800193a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	611a      	str	r2, [r3, #16]
          break;
 8001942:	e009      	b.n	8001958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001944:	2308      	movs	r3, #8
 8001946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	615a      	str	r2, [r3, #20]
          break;
 800194e:	e003      	b.n	8001958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001950:	2300      	movs	r3, #0
 8001952:	623b      	str	r3, [r7, #32]
          break;
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x130>
          break;
 8001956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2bff      	cmp	r3, #255	; 0xff
 800195c:	d801      	bhi.n	8001962 <HAL_GPIO_Init+0x13a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_Init+0x13e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3304      	adds	r3, #4
 8001966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d802      	bhi.n	8001974 <HAL_GPIO_Init+0x14c>
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x152>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3b08      	subs	r3, #8
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	210f      	movs	r1, #15
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	401a      	ands	r2, r3
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	431a      	orrs	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 80b1 	beq.w	8001b0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	4b4d      	ldr	r3, [pc, #308]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6193      	str	r3, [r2, #24]
 80019b4:	4b4a      	ldr	r3, [pc, #296]	; (8001ae0 <HAL_GPIO_Init+0x2b8>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	089b      	lsrs	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <HAL_GPIO_Init+0x2c0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d013      	beq.n	8001a14 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_GPIO_Init+0x2c4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d00d      	beq.n	8001a10 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a3e      	ldr	r2, [pc, #248]	; (8001af0 <HAL_GPIO_Init+0x2c8>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0x1e4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <HAL_GPIO_Init+0x2cc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_GPIO_Init+0x1e0>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1ee>
 8001a14:	2300      	movs	r3, #0
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a26:	492f      	ldr	r1, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x2bc>)
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d006      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	492c      	ldr	r1, [pc, #176]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
 8001a4c:	e006      	b.n	8001a5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	4928      	ldr	r1, [pc, #160]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a68:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4922      	ldr	r1, [pc, #136]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	60cb      	str	r3, [r1, #12]
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	491e      	ldr	r1, [pc, #120]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	4918      	ldr	r1, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	4914      	ldr	r1, [pc, #80]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d021      	beq.n	8001afc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	490e      	ldr	r1, [pc, #56]	; (8001af8 <HAL_GPIO_Init+0x2d0>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
 8001ac4:	e021      	b.n	8001b0a <HAL_GPIO_Init+0x2e2>
 8001ac6:	bf00      	nop
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10310000 	.word	0x10310000
 8001ad0:	10220000 	.word	0x10220000
 8001ad4:	10210000 	.word	0x10210000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	10110000 	.word	0x10110000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40011400 	.word	0x40011400
 8001af8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	4909      	ldr	r1, [pc, #36]	; (8001b2c <HAL_GPIO_Init+0x304>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f47f ae8e 	bne.w	800183c <HAL_GPIO_Init+0x14>
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	372c      	adds	r7, #44	; 0x2c
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	40010400 	.word	0x40010400

08001b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
 8001b4c:	e001      	b.n	8001b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	807b      	strh	r3, [r7, #2]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6e:	787b      	ldrb	r3, [r7, #1]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b7a:	e003      	b.n	8001b84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	041a      	lsls	r2, r3, #16
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	611a      	str	r2, [r3, #16]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f000 f806 	bl	8001bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e26c      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8087 	beq.w	8001d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf4:	4b92      	ldr	r3, [pc, #584]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d00c      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c00:	4b8f      	ldr	r3, [pc, #572]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d112      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
 8001c0c:	4b8c      	ldr	r3, [pc, #560]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d06c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x12c>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d168      	bne.n	8001d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e246      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x76>
 8001c3c:	4b80      	ldr	r3, [pc, #512]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a7f      	ldr	r2, [pc, #508]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e02e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b7b      	ldr	r3, [pc, #492]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a7a      	ldr	r2, [pc, #488]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b78      	ldr	r3, [pc, #480]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a77      	ldr	r2, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e01d      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0xbc>
 8001c76:	4b72      	ldr	r3, [pc, #456]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a71      	ldr	r2, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a6e      	ldr	r2, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xd4>
 8001c90:	4b6b      	ldr	r3, [pc, #428]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a67      	ldr	r2, [pc, #412]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d013      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fbf0 	bl	8001494 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fbec 	bl	8001494 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b64      	cmp	r3, #100	; 0x64
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1fa      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe4>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fbdc 	bl	8001494 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fbd8 	bl	8001494 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	; 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1e6      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x10c>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d063      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0e:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1a:	4b49      	ldr	r3, [pc, #292]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d11c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
 8001d26:	4b46      	ldr	r3, [pc, #280]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d116      	bne.n	8001d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d001      	beq.n	8001d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1ba      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4939      	ldr	r1, [pc, #228]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	e03a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d020      	beq.n	8001daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb91 	bl	8001494 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff fb8d 	bl	8001494 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e19b      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
 8001da8:	e015      	b.n	8001dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_RCC_OscConfig+0x270>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fb70 	bl	8001494 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db8:	f7ff fb6c 	bl	8001494 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e17a      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d03a      	beq.n	8001e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d019      	beq.n	8001e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff fb50 	bl	8001494 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff fb4c 	bl	8001494 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e15a      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 facc 	bl	80023b4 <RCC_Delay>
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <HAL_RCC_OscConfig+0x274>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fb36 	bl	8001494 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2a:	e00f      	b.n	8001e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fb32 	bl	8001494 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d908      	bls.n	8001e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e140      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
 8001e3e:	bf00      	nop
 8001e40:	40021000 	.word	0x40021000
 8001e44:	42420000 	.word	0x42420000
 8001e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b9e      	ldr	r3, [pc, #632]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e9      	bne.n	8001e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80a6 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b97      	ldr	r3, [pc, #604]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	4b94      	ldr	r3, [pc, #592]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4a93      	ldr	r2, [pc, #588]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	61d3      	str	r3, [r2, #28]
 8001e82:	4b91      	ldr	r3, [pc, #580]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x4f8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a8a      	ldr	r2, [pc, #552]	; (80020cc <HAL_RCC_OscConfig+0x4f8>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff faf3 	bl	8001494 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff faef 	bl	8001494 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0fd      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b81      	ldr	r3, [pc, #516]	; (80020cc <HAL_RCC_OscConfig+0x4f8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x312>
 8001ed8:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a7a      	ldr	r2, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	e02d      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x334>
 8001eee:	4b76      	ldr	r3, [pc, #472]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a75      	ldr	r2, [pc, #468]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	4b73      	ldr	r3, [pc, #460]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6213      	str	r3, [r2, #32]
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x356>
 8001f10:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a6c      	ldr	r2, [pc, #432]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	4b6a      	ldr	r3, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a69      	ldr	r2, [pc, #420]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	4b67      	ldr	r3, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a66      	ldr	r2, [pc, #408]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 0301 	bic.w	r3, r3, #1
 8001f34:	6213      	str	r3, [r2, #32]
 8001f36:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	4a63      	ldr	r2, [pc, #396]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	f023 0304 	bic.w	r3, r3, #4
 8001f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d015      	beq.n	8001f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff faa3 	bl	8001494 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7ff fa9f 	bl	8001494 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0ab      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ee      	beq.n	8001f52 <HAL_RCC_OscConfig+0x37e>
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fa8d 	bl	8001494 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff fa89 	bl	8001494 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e095      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f94:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa0:	7dfb      	ldrb	r3, [r7, #23]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d105      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b48      	ldr	r3, [pc, #288]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a47      	ldr	r2, [pc, #284]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8081 	beq.w	80020be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d061      	beq.n	800208c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d146      	bne.n	800205e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b3f      	ldr	r3, [pc, #252]	; (80020d0 <HAL_RCC_OscConfig+0x4fc>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fa5d 	bl	8001494 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff fa59 	bl	8001494 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e067      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d108      	bne.n	8002018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002006:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	492d      	ldr	r1, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a19      	ldr	r1, [r3, #32]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	430b      	orrs	r3, r1
 800202a:	4927      	ldr	r1, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x4fc>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fa2d 	bl	8001494 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7ff fa29 	bl	8001494 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e037      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x46a>
 800205c:	e02f      	b.n	80020be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_RCC_OscConfig+0x4fc>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7ff fa16 	bl	8001494 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff fa12 	bl	8001494 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e020      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x498>
 800208a:	e018      	b.n	80020be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e013      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	42420060 	.word	0x42420060

080020d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0d0      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e8:	4b6a      	ldr	r3, [pc, #424]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d910      	bls.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b67      	ldr	r3, [pc, #412]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 0207 	bic.w	r2, r3, #7
 80020fe:	4965      	ldr	r1, [pc, #404]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	4313      	orrs	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e0b8      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d020      	beq.n	8002166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a58      	ldr	r2, [pc, #352]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002148:	4b53      	ldr	r3, [pc, #332]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a52      	ldr	r2, [pc, #328]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	494d      	ldr	r1, [pc, #308]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d040      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e07f      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002192:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e073      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06b      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4936      	ldr	r1, [pc, #216]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c4:	f7ff f966 	bl	8001494 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7ff f962 	bl	8001494 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e053      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d210      	bcs.n	8002224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0207 	bic.w	r2, r3, #7
 800220a:	4922      	ldr	r1, [pc, #136]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	4313      	orrs	r3, r2
 8002210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b20      	ldr	r3, [pc, #128]	; (8002294 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e032      	b.n	800228a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4916      	ldr	r1, [pc, #88]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800223e:	4313      	orrs	r3, r2
 8002240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	490e      	ldr	r1, [pc, #56]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	4313      	orrs	r3, r2
 8002260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002262:	f000 f821 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002266:	4602      	mov	r2, r0
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	490a      	ldr	r1, [pc, #40]	; (800229c <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	5ccb      	ldrb	r3, [r1, r3]
 8002276:	fa22 f303 	lsr.w	r3, r2, r3
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_RCC_ClockConfig+0x1cc>)
 800227c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f8c4 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40022000 	.word	0x40022000
 8002298:	40021000 	.word	0x40021000
 800229c:	0800424c 	.word	0x0800424c
 80022a0:	20000024 	.word	0x20000024
 80022a4:	20000028 	.word	0x20000028

080022a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d002      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x30>
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d003      	beq.n	80022de <HAL_RCC_GetSysClockFreq+0x36>
 80022d6:	e027      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	613b      	str	r3, [r7, #16]
      break;
 80022dc:	e027      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	0c9b      	lsrs	r3, r3, #18
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e8:	5cd3      	ldrb	r3, [r2, r3]
 80022ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_GetSysClockFreq+0x94>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0c5b      	lsrs	r3, r3, #17
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 800230a:	fb02 f203 	mul.w	r2, r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	e004      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_RCC_GetSysClockFreq+0xa4>)
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	613b      	str	r3, [r7, #16]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	693b      	ldr	r3, [r7, #16]
}
 8002330:	4618      	mov	r0, r3
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	007a1200 	.word	0x007a1200
 8002344:	08004264 	.word	0x08004264
 8002348:	08004274 	.word	0x08004274
 800234c:	003d0900 	.word	0x003d0900

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_RCC_GetHCLKFreq+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000024 	.word	0x20000024

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff2 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4903      	ldr	r1, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	0800425c 	.word	0x0800425c

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffde 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	0800425c 	.word	0x0800425c

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	20000024 	.word	0x20000024
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e041      	b.n	8002486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fed4 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f000 fa74 	bl	800291c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e03a      	b.n	800251e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_TIM_Base_Start_IT+0x98>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00e      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x58>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d009      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x58>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_TIM_Base_Start_IT+0x9c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x58>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_TIM_Base_Start_IT+0xa0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d111      	bne.n	800250c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d010      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0201 	orr.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250a:	e007      	b.n	800251c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40000400 	.word	0x40000400
 8002530:	40000800 	.word	0x40000800

08002534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	d122      	bne.n	8002590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b02      	cmp	r3, #2
 8002556:	d11b      	bne.n	8002590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0202 	mvn.w	r2, #2
 8002560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f9b4 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f9a7 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f9b6 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b04      	cmp	r3, #4
 800259c:	d122      	bne.n	80025e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0204 	mvn.w	r2, #4
 80025b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f98a 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f97d 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f98c 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d122      	bne.n	8002638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d11b      	bne.n	8002638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0208 	mvn.w	r2, #8
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2204      	movs	r2, #4
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f960 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f953 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f962 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b10      	cmp	r3, #16
 8002644:	d122      	bne.n	800268c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d11b      	bne.n	800268c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0210 	mvn.w	r2, #16
 800265c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2208      	movs	r2, #8
 8002662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f936 	bl	80028e4 <HAL_TIM_IC_CaptureCallback>
 8002678:	e005      	b.n	8002686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f929 	bl	80028d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f938 	bl	80028f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0201 	mvn.w	r2, #1
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fc88 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b80      	cmp	r3, #128	; 0x80
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d0:	2b80      	cmp	r3, #128	; 0x80
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fa7b 	bl	8002bda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b40      	cmp	r3, #64	; 0x40
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8fc 	bl	8002908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b20      	cmp	r3, #32
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b20      	cmp	r3, #32
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0220 	mvn.w	r2, #32
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa46 	bl	8002bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x1c>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b4      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x186>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800277e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd4>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a6:	f000 8086 	beq.w	80028b6 <HAL_TIM_ConfigClockSource+0x172>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b70      	cmp	r3, #112	; 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa6>
 80027b4:	2b70      	cmp	r3, #112	; 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b60      	cmp	r3, #96	; 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x11a>
 80027bc:	2b60      	cmp	r3, #96	; 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b50      	cmp	r3, #80	; 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xfa>
 80027c4:	2b50      	cmp	r3, #80	; 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b40      	cmp	r3, #64	; 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x13a>
 80027cc:	2b40      	cmp	r3, #64	; 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027d4:	2b30      	cmp	r3, #48	; 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f000 f968 	bl	8002ace <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800280c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04f      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f000 f951 	bl	8002ace <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	461a      	mov	r2, r3
 800284c:	f000 f8c8 	bl	80029e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	; 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 f91f 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800285c:	e02c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	461a      	mov	r2, r3
 800286c:	f000 f8e6 	bl	8002a3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	; 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f90f 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800287c:	e01c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	461a      	mov	r2, r3
 800288c:	f000 f8a8 	bl	80029e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f8ff 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 800289c:	e00c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 f8f6 	bl	8002a9a <TIM_ITRx_SetConfig>
      break;
 80028ae:	e003      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e000      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
	...

0800291c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <TIM_Base_SetConfig+0xb8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00b      	beq.n	800294c <TIM_Base_SetConfig+0x30>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d007      	beq.n	800294c <TIM_Base_SetConfig+0x30>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <TIM_Base_SetConfig+0xbc>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_Base_SetConfig+0x30>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a25      	ldr	r2, [pc, #148]	; (80029dc <TIM_Base_SetConfig+0xc0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d108      	bne.n	800295e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <TIM_Base_SetConfig+0xb8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00b      	beq.n	800297e <TIM_Base_SetConfig+0x62>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800296c:	d007      	beq.n	800297e <TIM_Base_SetConfig+0x62>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <TIM_Base_SetConfig+0xbc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d003      	beq.n	800297e <TIM_Base_SetConfig+0x62>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <TIM_Base_SetConfig+0xc0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <TIM_Base_SetConfig+0xb8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d103      	bne.n	80029c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	615a      	str	r2, [r3, #20]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0201 	bic.w	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 030a 	bic.w	r3, r3, #10
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	f023 0210 	bic.w	r2, r3, #16
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	031b      	lsls	r3, r3, #12
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	621a      	str	r2, [r3, #32]
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f043 0307 	orr.w	r3, r3, #7
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	609a      	str	r2, [r3, #8]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	021a      	lsls	r2, r3, #8
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	609a      	str	r2, [r3, #8]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e046      	b.n	8002bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b70:	d009      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10c      	bne.n	8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012c00 	.word	0x40012c00
 8002bc0:	40000400 	.word	0x40000400
 8002bc4:	40000800 	.word	0x40000800

08002bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e042      	b.n	8002c84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe fafa 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2224      	movs	r2, #36	; 0x24
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fd71 	bl	8003718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d16d      	bne.n	8002d88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_UART_Transmit+0x2c>
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e066      	b.n	8002d8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cca:	f7fe fbe3 	bl	8001494 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce4:	d108      	bne.n	8002cf8 <HAL_UART_Transmit+0x6c>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e003      	b.n	8002d00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d00:	e02a      	b.n	8002d58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 faf9 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e036      	b.n	8002d8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3302      	adds	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e007      	b.n	8002d4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	781a      	ldrb	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	3301      	adds	r3, #1
 8002d48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1cf      	bne.n	8002d02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2140      	movs	r1, #64	; 0x40
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fac9 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e006      	b.n	8002d8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b0ba      	sub	sp, #232	; 0xe8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d009      	beq.n	8002dfa <HAL_UART_IRQHandler+0x66>
 8002de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fbd1 	bl	800359a <UART_Receive_IT>
      return;
 8002df8:	e25b      	b.n	80032b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80de 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x22c>
 8002e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80d1 	beq.w	8002fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xae>
 8002e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xd2>
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_UART_IRQHandler+0xf6>
 8002e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	f043 0204 	orr.w	r2, r3, #4
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d011      	beq.n	8002eba <HAL_UART_IRQHandler+0x126>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f043 0208 	orr.w	r2, r3, #8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 81f2 	beq.w	80032a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x14e>
 8002ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fb5c 	bl	800359a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_UART_IRQHandler+0x17a>
 8002f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04f      	beq.n	8002fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fa66 	bl	80033e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d041      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3314      	adds	r3, #20
 8002f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1d9      	bne.n	8002f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d013      	beq.n	8002f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	4a7e      	ldr	r2, [pc, #504]	; (8003174 <HAL_UART_IRQHandler+0x3e0>)
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fbd8 	bl	8001738 <HAL_DMA_Abort_IT>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d016      	beq.n	8002fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f9c:	e00e      	b.n	8002fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f99c 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa4:	e00a      	b.n	8002fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f998 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fac:	e006      	b.n	8002fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f994 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002fba:	e175      	b.n	80032a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	bf00      	nop
    return;
 8002fbe:	e173      	b.n	80032a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	f040 814f 	bne.w	8003268 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 8148 	beq.w	8003268 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8141 	beq.w	8003268 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80b6 	beq.w	8003178 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8145 	beq.w	80032ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800302a:	429a      	cmp	r2, r3
 800302c:	f080 813e 	bcs.w	80032ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b20      	cmp	r3, #32
 8003040:	f000 8088 	beq.w	8003154 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800305a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800305e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003062:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	330c      	adds	r3, #12
 800306c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003070:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800307c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003080:	e841 2300 	strex	r3, r2, [r1]
 8003084:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1d9      	bne.n	8003044 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3314      	adds	r3, #20
 8003096:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030b4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e1      	bne.n	8003090 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3314      	adds	r3, #20
 80030d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e3      	bne.n	80030cc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	330c      	adds	r3, #12
 8003118:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	e853 3f00 	ldrex	r3, [r3]
 8003120:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003124:	f023 0310 	bic.w	r3, r3, #16
 8003128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003136:	65ba      	str	r2, [r7, #88]	; 0x58
 8003138:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800313c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e3      	bne.n	8003112 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fab7 	bl	80016c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003162:	b29b      	uxth	r3, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	b29b      	uxth	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8bf 	bl	80032ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003170:	e09c      	b.n	80032ac <HAL_UART_IRQHandler+0x518>
 8003172:	bf00      	nop
 8003174:	080034a5 	.word	0x080034a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003180:	b29b      	uxth	r3, r3
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 808e 	beq.w	80032b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8089 	beq.w	80032b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031c2:	647a      	str	r2, [r7, #68]	; 0x44
 80031c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e3      	bne.n	800319e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	623b      	str	r3, [r7, #32]
   return(result);
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3314      	adds	r3, #20
 80031f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031fa:	633a      	str	r2, [r7, #48]	; 0x30
 80031fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003202:	e841 2300 	strex	r3, r2, [r1]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1e3      	bne.n	80031d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	60fb      	str	r3, [r7, #12]
   return(result);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	330c      	adds	r3, #12
 800323c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003240:	61fa      	str	r2, [r7, #28]
 8003242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	69b9      	ldr	r1, [r7, #24]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	e841 2300 	strex	r3, r2, [r1]
 800324c:	617b      	str	r3, [r7, #20]
   return(result);
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e3      	bne.n	800321c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800325a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800325e:	4619      	mov	r1, r3
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f844 	bl	80032ee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003266:	e023      	b.n	80032b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_UART_IRQHandler+0x4f4>
 8003274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f923 	bl	80034cc <UART_Transmit_IT>
    return;
 8003286:	e014      	b.n	80032b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <HAL_UART_IRQHandler+0x51e>
 8003294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f962 	bl	800356a <UART_EndTransmit_IT>
    return;
 80032a6:	e004      	b.n	80032b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80032a8:	bf00      	nop
 80032aa:	e002      	b.n	80032b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80032b0:	bf00      	nop
  }
}
 80032b2:	37e8      	adds	r7, #232	; 0xe8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b090      	sub	sp, #64	; 0x40
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003314:	e050      	b.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d04c      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	2b00      	cmp	r3, #0
 8003322:	d007      	beq.n	8003334 <UART_WaitOnFlagUntilTimeout+0x30>
 8003324:	f7fe f8b6 	bl	8001494 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003330:	429a      	cmp	r2, r3
 8003332:	d241      	bcs.n	80033b8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003354:	637a      	str	r2, [r7, #52]	; 0x34
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800335a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e5      	bne.n	8003334 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	3314      	adds	r3, #20
 800336e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	e853 3f00 	ldrex	r3, [r3]
 8003376:	613b      	str	r3, [r7, #16]
   return(result);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3314      	adds	r3, #20
 8003386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003388:	623a      	str	r2, [r7, #32]
 800338a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338c:	69f9      	ldr	r1, [r7, #28]
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	e841 2300 	strex	r3, r2, [r1]
 8003394:	61bb      	str	r3, [r7, #24]
   return(result);
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e00f      	b.n	80033d8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d09f      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3740      	adds	r7, #64	; 0x40
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b095      	sub	sp, #84	; 0x54
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003408:	643a      	str	r2, [r7, #64]	; 0x40
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800340e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	61fb      	str	r3, [r7, #28]
   return(result);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3314      	adds	r3, #20
 800343a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800343c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	2b01      	cmp	r3, #1
 8003456:	d119      	bne.n	800348c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	60bb      	str	r3, [r7, #8]
   return(result);
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	647b      	str	r3, [r7, #68]	; 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003478:	61ba      	str	r2, [r7, #24]
 800347a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6979      	ldr	r1, [r7, #20]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	613b      	str	r3, [r7, #16]
   return(result);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
}
 800349a:	bf00      	nop
 800349c:	3754      	adds	r7, #84	; 0x54
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff ff0c 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b21      	cmp	r3, #33	; 0x21
 80034de:	d13e      	bne.n	800355e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d114      	bne.n	8003514 <UART_Transmit_IT+0x48>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d110      	bne.n	8003514 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003506:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]
 8003512:	e008      	b.n	8003526 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6211      	str	r1, [r2, #32]
 800351e:	781a      	ldrb	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29b      	uxth	r3, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	4619      	mov	r1, r3
 8003534:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10f      	bne.n	800355a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003548:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003558:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
  }
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr

0800356a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003580:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff fe94 	bl	80032b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b08c      	sub	sp, #48	; 0x30
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b22      	cmp	r3, #34	; 0x22
 80035ac:	f040 80ae 	bne.w	800370c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d117      	bne.n	80035ea <UART_Receive_IT+0x50>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d8:	b29a      	uxth	r2, r3
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
 80035e8:	e026      	b.n	8003638 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035fc:	d007      	beq.n	800360e <UART_Receive_IT+0x74>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10a      	bne.n	800361c <UART_Receive_IT+0x82>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e008      	b.n	800362e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003628:	b2da      	uxtb	r2, r3
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29b      	uxth	r3, r3
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4619      	mov	r1, r3
 8003646:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003648:	2b00      	cmp	r3, #0
 800364a:	d15d      	bne.n	8003708 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0220 	bic.w	r2, r2, #32
 800365a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800366a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	2b01      	cmp	r3, #1
 8003690:	d135      	bne.n	80036fe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	613b      	str	r3, [r7, #16]
   return(result);
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 0310 	bic.w	r3, r3, #16
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b8:	623a      	str	r2, [r7, #32]
 80036ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	69f9      	ldr	r1, [r7, #28]
 80036be:	6a3a      	ldr	r2, [r7, #32]
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d10a      	bne.n	80036f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036da:	2300      	movs	r3, #0
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fdf9 	bl	80032ee <HAL_UARTEx_RxEventCallback>
 80036fc:	e002      	b.n	8003704 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fde3 	bl	80032ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e002      	b.n	800370e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3730      	adds	r7, #48	; 0x30
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003752:	f023 030c 	bic.w	r3, r3, #12
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	68b9      	ldr	r1, [r7, #8]
 800375c:	430b      	orrs	r3, r1
 800375e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2c      	ldr	r2, [pc, #176]	; (800382c <UART_SetConfig+0x114>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d103      	bne.n	8003788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003780:	f7fe fe04 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	e002      	b.n	800378e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003788:	f7fe fdec 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 800378c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	009a      	lsls	r2, r3, #2
 8003798:	441a      	add	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a4:	4a22      	ldr	r2, [pc, #136]	; (8003830 <UART_SetConfig+0x118>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	0119      	lsls	r1, r3, #4
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009a      	lsls	r2, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <UART_SetConfig+0x118>)
 80037c6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2064      	movs	r0, #100	; 0x64
 80037ce:	fb00 f303 	mul.w	r3, r0, r3
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	3332      	adds	r3, #50	; 0x32
 80037d8:	4a15      	ldr	r2, [pc, #84]	; (8003830 <UART_SetConfig+0x118>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e4:	4419      	add	r1, r3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	009a      	lsls	r2, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <UART_SetConfig+0x118>)
 80037fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2064      	movs	r0, #100	; 0x64
 8003806:	fb00 f303 	mul.w	r3, r0, r3
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	3332      	adds	r3, #50	; 0x32
 8003810:	4a07      	ldr	r2, [pc, #28]	; (8003830 <UART_SetConfig+0x118>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 020f 	and.w	r2, r3, #15
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	440a      	add	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013800 	.word	0x40013800
 8003830:	51eb851f 	.word	0x51eb851f

08003834 <__errno>:
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <__errno+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000030 	.word	0x20000030

08003840 <__libc_init_array>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	2600      	movs	r6, #0
 8003844:	4d0c      	ldr	r5, [pc, #48]	; (8003878 <__libc_init_array+0x38>)
 8003846:	4c0d      	ldr	r4, [pc, #52]	; (800387c <__libc_init_array+0x3c>)
 8003848:	1b64      	subs	r4, r4, r5
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	42a6      	cmp	r6, r4
 800384e:	d109      	bne.n	8003864 <__libc_init_array+0x24>
 8003850:	f000 fc5c 	bl	800410c <_init>
 8003854:	2600      	movs	r6, #0
 8003856:	4d0a      	ldr	r5, [pc, #40]	; (8003880 <__libc_init_array+0x40>)
 8003858:	4c0a      	ldr	r4, [pc, #40]	; (8003884 <__libc_init_array+0x44>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	42a6      	cmp	r6, r4
 8003860:	d105      	bne.n	800386e <__libc_init_array+0x2e>
 8003862:	bd70      	pop	{r4, r5, r6, pc}
 8003864:	f855 3b04 	ldr.w	r3, [r5], #4
 8003868:	4798      	blx	r3
 800386a:	3601      	adds	r6, #1
 800386c:	e7ee      	b.n	800384c <__libc_init_array+0xc>
 800386e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003872:	4798      	blx	r3
 8003874:	3601      	adds	r6, #1
 8003876:	e7f2      	b.n	800385e <__libc_init_array+0x1e>
 8003878:	080042ac 	.word	0x080042ac
 800387c:	080042ac 	.word	0x080042ac
 8003880:	080042ac 	.word	0x080042ac
 8003884:	080042b0 	.word	0x080042b0

08003888 <memset>:
 8003888:	4603      	mov	r3, r0
 800388a:	4402      	add	r2, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <siprintf>:
 8003898:	b40e      	push	{r1, r2, r3}
 800389a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800389e:	b500      	push	{lr}
 80038a0:	b09c      	sub	sp, #112	; 0x70
 80038a2:	ab1d      	add	r3, sp, #116	; 0x74
 80038a4:	9002      	str	r0, [sp, #8]
 80038a6:	9006      	str	r0, [sp, #24]
 80038a8:	9107      	str	r1, [sp, #28]
 80038aa:	9104      	str	r1, [sp, #16]
 80038ac:	4808      	ldr	r0, [pc, #32]	; (80038d0 <siprintf+0x38>)
 80038ae:	4909      	ldr	r1, [pc, #36]	; (80038d4 <siprintf+0x3c>)
 80038b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038b4:	9105      	str	r1, [sp, #20]
 80038b6:	6800      	ldr	r0, [r0, #0]
 80038b8:	a902      	add	r1, sp, #8
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	f000 f868 	bl	8003990 <_svfiprintf_r>
 80038c0:	2200      	movs	r2, #0
 80038c2:	9b02      	ldr	r3, [sp, #8]
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	b01c      	add	sp, #112	; 0x70
 80038c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038cc:	b003      	add	sp, #12
 80038ce:	4770      	bx	lr
 80038d0:	20000030 	.word	0x20000030
 80038d4:	ffff0208 	.word	0xffff0208

080038d8 <__ssputs_r>:
 80038d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038dc:	688e      	ldr	r6, [r1, #8]
 80038de:	4682      	mov	sl, r0
 80038e0:	429e      	cmp	r6, r3
 80038e2:	460c      	mov	r4, r1
 80038e4:	4690      	mov	r8, r2
 80038e6:	461f      	mov	r7, r3
 80038e8:	d838      	bhi.n	800395c <__ssputs_r+0x84>
 80038ea:	898a      	ldrh	r2, [r1, #12]
 80038ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038f0:	d032      	beq.n	8003958 <__ssputs_r+0x80>
 80038f2:	6825      	ldr	r5, [r4, #0]
 80038f4:	6909      	ldr	r1, [r1, #16]
 80038f6:	3301      	adds	r3, #1
 80038f8:	eba5 0901 	sub.w	r9, r5, r1
 80038fc:	6965      	ldr	r5, [r4, #20]
 80038fe:	444b      	add	r3, r9
 8003900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003908:	106d      	asrs	r5, r5, #1
 800390a:	429d      	cmp	r5, r3
 800390c:	bf38      	it	cc
 800390e:	461d      	movcc	r5, r3
 8003910:	0553      	lsls	r3, r2, #21
 8003912:	d531      	bpl.n	8003978 <__ssputs_r+0xa0>
 8003914:	4629      	mov	r1, r5
 8003916:	f000 fb53 	bl	8003fc0 <_malloc_r>
 800391a:	4606      	mov	r6, r0
 800391c:	b950      	cbnz	r0, 8003934 <__ssputs_r+0x5c>
 800391e:	230c      	movs	r3, #12
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	f8ca 3000 	str.w	r3, [sl]
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800392e:	81a3      	strh	r3, [r4, #12]
 8003930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003934:	464a      	mov	r2, r9
 8003936:	6921      	ldr	r1, [r4, #16]
 8003938:	f000 face 	bl	8003ed8 <memcpy>
 800393c:	89a3      	ldrh	r3, [r4, #12]
 800393e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	6126      	str	r6, [r4, #16]
 800394a:	444e      	add	r6, r9
 800394c:	6026      	str	r6, [r4, #0]
 800394e:	463e      	mov	r6, r7
 8003950:	6165      	str	r5, [r4, #20]
 8003952:	eba5 0509 	sub.w	r5, r5, r9
 8003956:	60a5      	str	r5, [r4, #8]
 8003958:	42be      	cmp	r6, r7
 800395a:	d900      	bls.n	800395e <__ssputs_r+0x86>
 800395c:	463e      	mov	r6, r7
 800395e:	4632      	mov	r2, r6
 8003960:	4641      	mov	r1, r8
 8003962:	6820      	ldr	r0, [r4, #0]
 8003964:	f000 fac6 	bl	8003ef4 <memmove>
 8003968:	68a3      	ldr	r3, [r4, #8]
 800396a:	6822      	ldr	r2, [r4, #0]
 800396c:	1b9b      	subs	r3, r3, r6
 800396e:	4432      	add	r2, r6
 8003970:	2000      	movs	r0, #0
 8003972:	60a3      	str	r3, [r4, #8]
 8003974:	6022      	str	r2, [r4, #0]
 8003976:	e7db      	b.n	8003930 <__ssputs_r+0x58>
 8003978:	462a      	mov	r2, r5
 800397a:	f000 fb7b 	bl	8004074 <_realloc_r>
 800397e:	4606      	mov	r6, r0
 8003980:	2800      	cmp	r0, #0
 8003982:	d1e1      	bne.n	8003948 <__ssputs_r+0x70>
 8003984:	4650      	mov	r0, sl
 8003986:	6921      	ldr	r1, [r4, #16]
 8003988:	f000 face 	bl	8003f28 <_free_r>
 800398c:	e7c7      	b.n	800391e <__ssputs_r+0x46>
	...

08003990 <_svfiprintf_r>:
 8003990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003994:	4698      	mov	r8, r3
 8003996:	898b      	ldrh	r3, [r1, #12]
 8003998:	4607      	mov	r7, r0
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	460d      	mov	r5, r1
 800399e:	4614      	mov	r4, r2
 80039a0:	b09d      	sub	sp, #116	; 0x74
 80039a2:	d50e      	bpl.n	80039c2 <_svfiprintf_r+0x32>
 80039a4:	690b      	ldr	r3, [r1, #16]
 80039a6:	b963      	cbnz	r3, 80039c2 <_svfiprintf_r+0x32>
 80039a8:	2140      	movs	r1, #64	; 0x40
 80039aa:	f000 fb09 	bl	8003fc0 <_malloc_r>
 80039ae:	6028      	str	r0, [r5, #0]
 80039b0:	6128      	str	r0, [r5, #16]
 80039b2:	b920      	cbnz	r0, 80039be <_svfiprintf_r+0x2e>
 80039b4:	230c      	movs	r3, #12
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	e0d1      	b.n	8003b62 <_svfiprintf_r+0x1d2>
 80039be:	2340      	movs	r3, #64	; 0x40
 80039c0:	616b      	str	r3, [r5, #20]
 80039c2:	2300      	movs	r3, #0
 80039c4:	9309      	str	r3, [sp, #36]	; 0x24
 80039c6:	2320      	movs	r3, #32
 80039c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039cc:	2330      	movs	r3, #48	; 0x30
 80039ce:	f04f 0901 	mov.w	r9, #1
 80039d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80039d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b7c <_svfiprintf_r+0x1ec>
 80039da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039de:	4623      	mov	r3, r4
 80039e0:	469a      	mov	sl, r3
 80039e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039e6:	b10a      	cbz	r2, 80039ec <_svfiprintf_r+0x5c>
 80039e8:	2a25      	cmp	r2, #37	; 0x25
 80039ea:	d1f9      	bne.n	80039e0 <_svfiprintf_r+0x50>
 80039ec:	ebba 0b04 	subs.w	fp, sl, r4
 80039f0:	d00b      	beq.n	8003a0a <_svfiprintf_r+0x7a>
 80039f2:	465b      	mov	r3, fp
 80039f4:	4622      	mov	r2, r4
 80039f6:	4629      	mov	r1, r5
 80039f8:	4638      	mov	r0, r7
 80039fa:	f7ff ff6d 	bl	80038d8 <__ssputs_r>
 80039fe:	3001      	adds	r0, #1
 8003a00:	f000 80aa 	beq.w	8003b58 <_svfiprintf_r+0x1c8>
 8003a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a06:	445a      	add	r2, fp
 8003a08:	9209      	str	r2, [sp, #36]	; 0x24
 8003a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80a2 	beq.w	8003b58 <_svfiprintf_r+0x1c8>
 8003a14:	2300      	movs	r3, #0
 8003a16:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a1e:	f10a 0a01 	add.w	sl, sl, #1
 8003a22:	9304      	str	r3, [sp, #16]
 8003a24:	9307      	str	r3, [sp, #28]
 8003a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003a2c:	4654      	mov	r4, sl
 8003a2e:	2205      	movs	r2, #5
 8003a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a34:	4851      	ldr	r0, [pc, #324]	; (8003b7c <_svfiprintf_r+0x1ec>)
 8003a36:	f000 fa41 	bl	8003ebc <memchr>
 8003a3a:	9a04      	ldr	r2, [sp, #16]
 8003a3c:	b9d8      	cbnz	r0, 8003a76 <_svfiprintf_r+0xe6>
 8003a3e:	06d0      	lsls	r0, r2, #27
 8003a40:	bf44      	itt	mi
 8003a42:	2320      	movmi	r3, #32
 8003a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a48:	0711      	lsls	r1, r2, #28
 8003a4a:	bf44      	itt	mi
 8003a4c:	232b      	movmi	r3, #43	; 0x2b
 8003a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a52:	f89a 3000 	ldrb.w	r3, [sl]
 8003a56:	2b2a      	cmp	r3, #42	; 0x2a
 8003a58:	d015      	beq.n	8003a86 <_svfiprintf_r+0xf6>
 8003a5a:	4654      	mov	r4, sl
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f04f 0c0a 	mov.w	ip, #10
 8003a62:	9a07      	ldr	r2, [sp, #28]
 8003a64:	4621      	mov	r1, r4
 8003a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a6a:	3b30      	subs	r3, #48	; 0x30
 8003a6c:	2b09      	cmp	r3, #9
 8003a6e:	d94e      	bls.n	8003b0e <_svfiprintf_r+0x17e>
 8003a70:	b1b0      	cbz	r0, 8003aa0 <_svfiprintf_r+0x110>
 8003a72:	9207      	str	r2, [sp, #28]
 8003a74:	e014      	b.n	8003aa0 <_svfiprintf_r+0x110>
 8003a76:	eba0 0308 	sub.w	r3, r0, r8
 8003a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	46a2      	mov	sl, r4
 8003a82:	9304      	str	r3, [sp, #16]
 8003a84:	e7d2      	b.n	8003a2c <_svfiprintf_r+0x9c>
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	1d19      	adds	r1, r3, #4
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	9103      	str	r1, [sp, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bfbb      	ittet	lt
 8003a92:	425b      	neglt	r3, r3
 8003a94:	f042 0202 	orrlt.w	r2, r2, #2
 8003a98:	9307      	strge	r3, [sp, #28]
 8003a9a:	9307      	strlt	r3, [sp, #28]
 8003a9c:	bfb8      	it	lt
 8003a9e:	9204      	strlt	r2, [sp, #16]
 8003aa0:	7823      	ldrb	r3, [r4, #0]
 8003aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa4:	d10c      	bne.n	8003ac0 <_svfiprintf_r+0x130>
 8003aa6:	7863      	ldrb	r3, [r4, #1]
 8003aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aaa:	d135      	bne.n	8003b18 <_svfiprintf_r+0x188>
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	3402      	adds	r4, #2
 8003ab0:	1d1a      	adds	r2, r3, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	9203      	str	r2, [sp, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bfb8      	it	lt
 8003aba:	f04f 33ff 	movlt.w	r3, #4294967295
 8003abe:	9305      	str	r3, [sp, #20]
 8003ac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b8c <_svfiprintf_r+0x1fc>
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	4650      	mov	r0, sl
 8003ac8:	7821      	ldrb	r1, [r4, #0]
 8003aca:	f000 f9f7 	bl	8003ebc <memchr>
 8003ace:	b140      	cbz	r0, 8003ae2 <_svfiprintf_r+0x152>
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	eba0 000a 	sub.w	r0, r0, sl
 8003ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8003ada:	9b04      	ldr	r3, [sp, #16]
 8003adc:	3401      	adds	r4, #1
 8003ade:	4303      	orrs	r3, r0
 8003ae0:	9304      	str	r3, [sp, #16]
 8003ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae6:	2206      	movs	r2, #6
 8003ae8:	4825      	ldr	r0, [pc, #148]	; (8003b80 <_svfiprintf_r+0x1f0>)
 8003aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aee:	f000 f9e5 	bl	8003ebc <memchr>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d038      	beq.n	8003b68 <_svfiprintf_r+0x1d8>
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <_svfiprintf_r+0x1f4>)
 8003af8:	bb1b      	cbnz	r3, 8003b42 <_svfiprintf_r+0x1b2>
 8003afa:	9b03      	ldr	r3, [sp, #12]
 8003afc:	3307      	adds	r3, #7
 8003afe:	f023 0307 	bic.w	r3, r3, #7
 8003b02:	3308      	adds	r3, #8
 8003b04:	9303      	str	r3, [sp, #12]
 8003b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b08:	4433      	add	r3, r6
 8003b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0c:	e767      	b.n	80039de <_svfiprintf_r+0x4e>
 8003b0e:	460c      	mov	r4, r1
 8003b10:	2001      	movs	r0, #1
 8003b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b16:	e7a5      	b.n	8003a64 <_svfiprintf_r+0xd4>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f04f 0c0a 	mov.w	ip, #10
 8003b1e:	4619      	mov	r1, r3
 8003b20:	3401      	adds	r4, #1
 8003b22:	9305      	str	r3, [sp, #20]
 8003b24:	4620      	mov	r0, r4
 8003b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b2a:	3a30      	subs	r2, #48	; 0x30
 8003b2c:	2a09      	cmp	r2, #9
 8003b2e:	d903      	bls.n	8003b38 <_svfiprintf_r+0x1a8>
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0c5      	beq.n	8003ac0 <_svfiprintf_r+0x130>
 8003b34:	9105      	str	r1, [sp, #20]
 8003b36:	e7c3      	b.n	8003ac0 <_svfiprintf_r+0x130>
 8003b38:	4604      	mov	r4, r0
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b40:	e7f0      	b.n	8003b24 <_svfiprintf_r+0x194>
 8003b42:	ab03      	add	r3, sp, #12
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	462a      	mov	r2, r5
 8003b48:	4638      	mov	r0, r7
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <_svfiprintf_r+0x1f8>)
 8003b4c:	a904      	add	r1, sp, #16
 8003b4e:	f3af 8000 	nop.w
 8003b52:	1c42      	adds	r2, r0, #1
 8003b54:	4606      	mov	r6, r0
 8003b56:	d1d6      	bne.n	8003b06 <_svfiprintf_r+0x176>
 8003b58:	89ab      	ldrh	r3, [r5, #12]
 8003b5a:	065b      	lsls	r3, r3, #25
 8003b5c:	f53f af2c 	bmi.w	80039b8 <_svfiprintf_r+0x28>
 8003b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b62:	b01d      	add	sp, #116	; 0x74
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	ab03      	add	r3, sp, #12
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	462a      	mov	r2, r5
 8003b6e:	4638      	mov	r0, r7
 8003b70:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <_svfiprintf_r+0x1f8>)
 8003b72:	a904      	add	r1, sp, #16
 8003b74:	f000 f87c 	bl	8003c70 <_printf_i>
 8003b78:	e7eb      	b.n	8003b52 <_svfiprintf_r+0x1c2>
 8003b7a:	bf00      	nop
 8003b7c:	08004276 	.word	0x08004276
 8003b80:	08004280 	.word	0x08004280
 8003b84:	00000000 	.word	0x00000000
 8003b88:	080038d9 	.word	0x080038d9
 8003b8c:	0800427c 	.word	0x0800427c

08003b90 <_printf_common>:
 8003b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	4616      	mov	r6, r2
 8003b96:	4699      	mov	r9, r3
 8003b98:	688a      	ldr	r2, [r1, #8]
 8003b9a:	690b      	ldr	r3, [r1, #16]
 8003b9c:	4607      	mov	r7, r0
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	bfb8      	it	lt
 8003ba2:	4613      	movlt	r3, r2
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003baa:	460c      	mov	r4, r1
 8003bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bb0:	b10a      	cbz	r2, 8003bb6 <_printf_common+0x26>
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	0699      	lsls	r1, r3, #26
 8003bba:	bf42      	ittt	mi
 8003bbc:	6833      	ldrmi	r3, [r6, #0]
 8003bbe:	3302      	addmi	r3, #2
 8003bc0:	6033      	strmi	r3, [r6, #0]
 8003bc2:	6825      	ldr	r5, [r4, #0]
 8003bc4:	f015 0506 	ands.w	r5, r5, #6
 8003bc8:	d106      	bne.n	8003bd8 <_printf_common+0x48>
 8003bca:	f104 0a19 	add.w	sl, r4, #25
 8003bce:	68e3      	ldr	r3, [r4, #12]
 8003bd0:	6832      	ldr	r2, [r6, #0]
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	42ab      	cmp	r3, r5
 8003bd6:	dc28      	bgt.n	8003c2a <_printf_common+0x9a>
 8003bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bdc:	1e13      	subs	r3, r2, #0
 8003bde:	6822      	ldr	r2, [r4, #0]
 8003be0:	bf18      	it	ne
 8003be2:	2301      	movne	r3, #1
 8003be4:	0692      	lsls	r2, r2, #26
 8003be6:	d42d      	bmi.n	8003c44 <_printf_common+0xb4>
 8003be8:	4649      	mov	r1, r9
 8003bea:	4638      	mov	r0, r7
 8003bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d020      	beq.n	8003c38 <_printf_common+0xa8>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	68e5      	ldr	r5, [r4, #12]
 8003bfa:	f003 0306 	and.w	r3, r3, #6
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	bf18      	it	ne
 8003c02:	2500      	movne	r5, #0
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	f04f 0600 	mov.w	r6, #0
 8003c0a:	68a3      	ldr	r3, [r4, #8]
 8003c0c:	bf08      	it	eq
 8003c0e:	1aad      	subeq	r5, r5, r2
 8003c10:	6922      	ldr	r2, [r4, #16]
 8003c12:	bf08      	it	eq
 8003c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfc4      	itt	gt
 8003c1c:	1a9b      	subgt	r3, r3, r2
 8003c1e:	18ed      	addgt	r5, r5, r3
 8003c20:	341a      	adds	r4, #26
 8003c22:	42b5      	cmp	r5, r6
 8003c24:	d11a      	bne.n	8003c5c <_printf_common+0xcc>
 8003c26:	2000      	movs	r0, #0
 8003c28:	e008      	b.n	8003c3c <_printf_common+0xac>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	4652      	mov	r2, sl
 8003c2e:	4649      	mov	r1, r9
 8003c30:	4638      	mov	r0, r7
 8003c32:	47c0      	blx	r8
 8003c34:	3001      	adds	r0, #1
 8003c36:	d103      	bne.n	8003c40 <_printf_common+0xb0>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c40:	3501      	adds	r5, #1
 8003c42:	e7c4      	b.n	8003bce <_printf_common+0x3e>
 8003c44:	2030      	movs	r0, #48	; 0x30
 8003c46:	18e1      	adds	r1, r4, r3
 8003c48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c52:	4422      	add	r2, r4
 8003c54:	3302      	adds	r3, #2
 8003c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c5a:	e7c5      	b.n	8003be8 <_printf_common+0x58>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4622      	mov	r2, r4
 8003c60:	4649      	mov	r1, r9
 8003c62:	4638      	mov	r0, r7
 8003c64:	47c0      	blx	r8
 8003c66:	3001      	adds	r0, #1
 8003c68:	d0e6      	beq.n	8003c38 <_printf_common+0xa8>
 8003c6a:	3601      	adds	r6, #1
 8003c6c:	e7d9      	b.n	8003c22 <_printf_common+0x92>
	...

08003c70 <_printf_i>:
 8003c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	460c      	mov	r4, r1
 8003c76:	7e27      	ldrb	r7, [r4, #24]
 8003c78:	4691      	mov	r9, r2
 8003c7a:	2f78      	cmp	r7, #120	; 0x78
 8003c7c:	4680      	mov	r8, r0
 8003c7e:	469a      	mov	sl, r3
 8003c80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c86:	d807      	bhi.n	8003c98 <_printf_i+0x28>
 8003c88:	2f62      	cmp	r7, #98	; 0x62
 8003c8a:	d80a      	bhi.n	8003ca2 <_printf_i+0x32>
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	f000 80d9 	beq.w	8003e44 <_printf_i+0x1d4>
 8003c92:	2f58      	cmp	r7, #88	; 0x58
 8003c94:	f000 80a4 	beq.w	8003de0 <_printf_i+0x170>
 8003c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ca0:	e03a      	b.n	8003d18 <_printf_i+0xa8>
 8003ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ca6:	2b15      	cmp	r3, #21
 8003ca8:	d8f6      	bhi.n	8003c98 <_printf_i+0x28>
 8003caa:	a001      	add	r0, pc, #4	; (adr r0, 8003cb0 <_printf_i+0x40>)
 8003cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cb0:	08003d09 	.word	0x08003d09
 8003cb4:	08003d1d 	.word	0x08003d1d
 8003cb8:	08003c99 	.word	0x08003c99
 8003cbc:	08003c99 	.word	0x08003c99
 8003cc0:	08003c99 	.word	0x08003c99
 8003cc4:	08003c99 	.word	0x08003c99
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003c99 	.word	0x08003c99
 8003cd0:	08003c99 	.word	0x08003c99
 8003cd4:	08003c99 	.word	0x08003c99
 8003cd8:	08003c99 	.word	0x08003c99
 8003cdc:	08003e2b 	.word	0x08003e2b
 8003ce0:	08003d4d 	.word	0x08003d4d
 8003ce4:	08003e0d 	.word	0x08003e0d
 8003ce8:	08003c99 	.word	0x08003c99
 8003cec:	08003c99 	.word	0x08003c99
 8003cf0:	08003e4d 	.word	0x08003e4d
 8003cf4:	08003c99 	.word	0x08003c99
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003c99 	.word	0x08003c99
 8003d00:	08003c99 	.word	0x08003c99
 8003d04:	08003e15 	.word	0x08003e15
 8003d08:	680b      	ldr	r3, [r1, #0]
 8003d0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d0e:	1d1a      	adds	r2, r3, #4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	600a      	str	r2, [r1, #0]
 8003d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0a4      	b.n	8003e66 <_printf_i+0x1f6>
 8003d1c:	6825      	ldr	r5, [r4, #0]
 8003d1e:	6808      	ldr	r0, [r1, #0]
 8003d20:	062e      	lsls	r6, r5, #24
 8003d22:	f100 0304 	add.w	r3, r0, #4
 8003d26:	d50a      	bpl.n	8003d3e <_printf_i+0xce>
 8003d28:	6805      	ldr	r5, [r0, #0]
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	da03      	bge.n	8003d38 <_printf_i+0xc8>
 8003d30:	232d      	movs	r3, #45	; 0x2d
 8003d32:	426d      	negs	r5, r5
 8003d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d38:	230a      	movs	r3, #10
 8003d3a:	485e      	ldr	r0, [pc, #376]	; (8003eb4 <_printf_i+0x244>)
 8003d3c:	e019      	b.n	8003d72 <_printf_i+0x102>
 8003d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d42:	6805      	ldr	r5, [r0, #0]
 8003d44:	600b      	str	r3, [r1, #0]
 8003d46:	bf18      	it	ne
 8003d48:	b22d      	sxthne	r5, r5
 8003d4a:	e7ef      	b.n	8003d2c <_printf_i+0xbc>
 8003d4c:	680b      	ldr	r3, [r1, #0]
 8003d4e:	6825      	ldr	r5, [r4, #0]
 8003d50:	1d18      	adds	r0, r3, #4
 8003d52:	6008      	str	r0, [r1, #0]
 8003d54:	0628      	lsls	r0, r5, #24
 8003d56:	d501      	bpl.n	8003d5c <_printf_i+0xec>
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	e002      	b.n	8003d62 <_printf_i+0xf2>
 8003d5c:	0669      	lsls	r1, r5, #25
 8003d5e:	d5fb      	bpl.n	8003d58 <_printf_i+0xe8>
 8003d60:	881d      	ldrh	r5, [r3, #0]
 8003d62:	2f6f      	cmp	r7, #111	; 0x6f
 8003d64:	bf0c      	ite	eq
 8003d66:	2308      	moveq	r3, #8
 8003d68:	230a      	movne	r3, #10
 8003d6a:	4852      	ldr	r0, [pc, #328]	; (8003eb4 <_printf_i+0x244>)
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d72:	6866      	ldr	r6, [r4, #4]
 8003d74:	2e00      	cmp	r6, #0
 8003d76:	bfa8      	it	ge
 8003d78:	6821      	ldrge	r1, [r4, #0]
 8003d7a:	60a6      	str	r6, [r4, #8]
 8003d7c:	bfa4      	itt	ge
 8003d7e:	f021 0104 	bicge.w	r1, r1, #4
 8003d82:	6021      	strge	r1, [r4, #0]
 8003d84:	b90d      	cbnz	r5, 8003d8a <_printf_i+0x11a>
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d04d      	beq.n	8003e26 <_printf_i+0x1b6>
 8003d8a:	4616      	mov	r6, r2
 8003d8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d90:	fb03 5711 	mls	r7, r3, r1, r5
 8003d94:	5dc7      	ldrb	r7, [r0, r7]
 8003d96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d9a:	462f      	mov	r7, r5
 8003d9c:	42bb      	cmp	r3, r7
 8003d9e:	460d      	mov	r5, r1
 8003da0:	d9f4      	bls.n	8003d8c <_printf_i+0x11c>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d10b      	bne.n	8003dbe <_printf_i+0x14e>
 8003da6:	6823      	ldr	r3, [r4, #0]
 8003da8:	07df      	lsls	r7, r3, #31
 8003daa:	d508      	bpl.n	8003dbe <_printf_i+0x14e>
 8003dac:	6923      	ldr	r3, [r4, #16]
 8003dae:	6861      	ldr	r1, [r4, #4]
 8003db0:	4299      	cmp	r1, r3
 8003db2:	bfde      	ittt	le
 8003db4:	2330      	movle	r3, #48	; 0x30
 8003db6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dbe:	1b92      	subs	r2, r2, r6
 8003dc0:	6122      	str	r2, [r4, #16]
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	4640      	mov	r0, r8
 8003dc8:	f8cd a000 	str.w	sl, [sp]
 8003dcc:	aa03      	add	r2, sp, #12
 8003dce:	f7ff fedf 	bl	8003b90 <_printf_common>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d14c      	bne.n	8003e70 <_printf_i+0x200>
 8003dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dda:	b004      	add	sp, #16
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	4834      	ldr	r0, [pc, #208]	; (8003eb4 <_printf_i+0x244>)
 8003de2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003de6:	680e      	ldr	r6, [r1, #0]
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dee:	061f      	lsls	r7, r3, #24
 8003df0:	600e      	str	r6, [r1, #0]
 8003df2:	d514      	bpl.n	8003e1e <_printf_i+0x1ae>
 8003df4:	07d9      	lsls	r1, r3, #31
 8003df6:	bf44      	itt	mi
 8003df8:	f043 0320 	orrmi.w	r3, r3, #32
 8003dfc:	6023      	strmi	r3, [r4, #0]
 8003dfe:	b91d      	cbnz	r5, 8003e08 <_printf_i+0x198>
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f023 0320 	bic.w	r3, r3, #32
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	2310      	movs	r3, #16
 8003e0a:	e7af      	b.n	8003d6c <_printf_i+0xfc>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	6023      	str	r3, [r4, #0]
 8003e14:	2378      	movs	r3, #120	; 0x78
 8003e16:	4828      	ldr	r0, [pc, #160]	; (8003eb8 <_printf_i+0x248>)
 8003e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e1c:	e7e3      	b.n	8003de6 <_printf_i+0x176>
 8003e1e:	065e      	lsls	r6, r3, #25
 8003e20:	bf48      	it	mi
 8003e22:	b2ad      	uxthmi	r5, r5
 8003e24:	e7e6      	b.n	8003df4 <_printf_i+0x184>
 8003e26:	4616      	mov	r6, r2
 8003e28:	e7bb      	b.n	8003da2 <_printf_i+0x132>
 8003e2a:	680b      	ldr	r3, [r1, #0]
 8003e2c:	6826      	ldr	r6, [r4, #0]
 8003e2e:	1d1d      	adds	r5, r3, #4
 8003e30:	6960      	ldr	r0, [r4, #20]
 8003e32:	600d      	str	r5, [r1, #0]
 8003e34:	0635      	lsls	r5, r6, #24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	d501      	bpl.n	8003e3e <_printf_i+0x1ce>
 8003e3a:	6018      	str	r0, [r3, #0]
 8003e3c:	e002      	b.n	8003e44 <_printf_i+0x1d4>
 8003e3e:	0671      	lsls	r1, r6, #25
 8003e40:	d5fb      	bpl.n	8003e3a <_printf_i+0x1ca>
 8003e42:	8018      	strh	r0, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	4616      	mov	r6, r2
 8003e48:	6123      	str	r3, [r4, #16]
 8003e4a:	e7ba      	b.n	8003dc2 <_printf_i+0x152>
 8003e4c:	680b      	ldr	r3, [r1, #0]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	600a      	str	r2, [r1, #0]
 8003e52:	681e      	ldr	r6, [r3, #0]
 8003e54:	2100      	movs	r1, #0
 8003e56:	4630      	mov	r0, r6
 8003e58:	6862      	ldr	r2, [r4, #4]
 8003e5a:	f000 f82f 	bl	8003ebc <memchr>
 8003e5e:	b108      	cbz	r0, 8003e64 <_printf_i+0x1f4>
 8003e60:	1b80      	subs	r0, r0, r6
 8003e62:	6060      	str	r0, [r4, #4]
 8003e64:	6863      	ldr	r3, [r4, #4]
 8003e66:	6123      	str	r3, [r4, #16]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e6e:	e7a8      	b.n	8003dc2 <_printf_i+0x152>
 8003e70:	4632      	mov	r2, r6
 8003e72:	4649      	mov	r1, r9
 8003e74:	4640      	mov	r0, r8
 8003e76:	6923      	ldr	r3, [r4, #16]
 8003e78:	47d0      	blx	sl
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0ab      	beq.n	8003dd6 <_printf_i+0x166>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	079b      	lsls	r3, r3, #30
 8003e82:	d413      	bmi.n	8003eac <_printf_i+0x23c>
 8003e84:	68e0      	ldr	r0, [r4, #12]
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	4298      	cmp	r0, r3
 8003e8a:	bfb8      	it	lt
 8003e8c:	4618      	movlt	r0, r3
 8003e8e:	e7a4      	b.n	8003dda <_printf_i+0x16a>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4632      	mov	r2, r6
 8003e94:	4649      	mov	r1, r9
 8003e96:	4640      	mov	r0, r8
 8003e98:	47d0      	blx	sl
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d09b      	beq.n	8003dd6 <_printf_i+0x166>
 8003e9e:	3501      	adds	r5, #1
 8003ea0:	68e3      	ldr	r3, [r4, #12]
 8003ea2:	9903      	ldr	r1, [sp, #12]
 8003ea4:	1a5b      	subs	r3, r3, r1
 8003ea6:	42ab      	cmp	r3, r5
 8003ea8:	dcf2      	bgt.n	8003e90 <_printf_i+0x220>
 8003eaa:	e7eb      	b.n	8003e84 <_printf_i+0x214>
 8003eac:	2500      	movs	r5, #0
 8003eae:	f104 0619 	add.w	r6, r4, #25
 8003eb2:	e7f5      	b.n	8003ea0 <_printf_i+0x230>
 8003eb4:	08004287 	.word	0x08004287
 8003eb8:	08004298 	.word	0x08004298

08003ebc <memchr>:
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	b2c9      	uxtb	r1, r1
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	d101      	bne.n	8003ece <memchr+0x12>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e003      	b.n	8003ed6 <memchr+0x1a>
 8003ece:	7804      	ldrb	r4, [r0, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	428c      	cmp	r4, r1
 8003ed4:	d1f6      	bne.n	8003ec4 <memchr+0x8>
 8003ed6:	bd10      	pop	{r4, pc}

08003ed8 <memcpy>:
 8003ed8:	440a      	add	r2, r1
 8003eda:	4291      	cmp	r1, r2
 8003edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ee0:	d100      	bne.n	8003ee4 <memcpy+0xc>
 8003ee2:	4770      	bx	lr
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eea:	4291      	cmp	r1, r2
 8003eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ef0:	d1f9      	bne.n	8003ee6 <memcpy+0xe>
 8003ef2:	bd10      	pop	{r4, pc}

08003ef4 <memmove>:
 8003ef4:	4288      	cmp	r0, r1
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	eb01 0402 	add.w	r4, r1, r2
 8003efc:	d902      	bls.n	8003f04 <memmove+0x10>
 8003efe:	4284      	cmp	r4, r0
 8003f00:	4623      	mov	r3, r4
 8003f02:	d807      	bhi.n	8003f14 <memmove+0x20>
 8003f04:	1e43      	subs	r3, r0, #1
 8003f06:	42a1      	cmp	r1, r4
 8003f08:	d008      	beq.n	8003f1c <memmove+0x28>
 8003f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f12:	e7f8      	b.n	8003f06 <memmove+0x12>
 8003f14:	4601      	mov	r1, r0
 8003f16:	4402      	add	r2, r0
 8003f18:	428a      	cmp	r2, r1
 8003f1a:	d100      	bne.n	8003f1e <memmove+0x2a>
 8003f1c:	bd10      	pop	{r4, pc}
 8003f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f26:	e7f7      	b.n	8003f18 <memmove+0x24>

08003f28 <_free_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	d043      	beq.n	8003fb8 <_free_r+0x90>
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f0c      	subs	r4, r1, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfb8      	it	lt
 8003f3a:	18e4      	addlt	r4, r4, r3
 8003f3c:	f000 f8d0 	bl	80040e0 <__malloc_lock>
 8003f40:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <_free_r+0x94>)
 8003f42:	6813      	ldr	r3, [r2, #0]
 8003f44:	4610      	mov	r0, r2
 8003f46:	b933      	cbnz	r3, 8003f56 <_free_r+0x2e>
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6014      	str	r4, [r2, #0]
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f52:	f000 b8cb 	b.w	80040ec <__malloc_unlock>
 8003f56:	42a3      	cmp	r3, r4
 8003f58:	d90a      	bls.n	8003f70 <_free_r+0x48>
 8003f5a:	6821      	ldr	r1, [r4, #0]
 8003f5c:	1862      	adds	r2, r4, r1
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf01      	itttt	eq
 8003f62:	681a      	ldreq	r2, [r3, #0]
 8003f64:	685b      	ldreq	r3, [r3, #4]
 8003f66:	1852      	addeq	r2, r2, r1
 8003f68:	6022      	streq	r2, [r4, #0]
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	6004      	str	r4, [r0, #0]
 8003f6e:	e7ed      	b.n	8003f4c <_free_r+0x24>
 8003f70:	461a      	mov	r2, r3
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	b10b      	cbz	r3, 8003f7a <_free_r+0x52>
 8003f76:	42a3      	cmp	r3, r4
 8003f78:	d9fa      	bls.n	8003f70 <_free_r+0x48>
 8003f7a:	6811      	ldr	r1, [r2, #0]
 8003f7c:	1850      	adds	r0, r2, r1
 8003f7e:	42a0      	cmp	r0, r4
 8003f80:	d10b      	bne.n	8003f9a <_free_r+0x72>
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	4401      	add	r1, r0
 8003f86:	1850      	adds	r0, r2, r1
 8003f88:	4283      	cmp	r3, r0
 8003f8a:	6011      	str	r1, [r2, #0]
 8003f8c:	d1de      	bne.n	8003f4c <_free_r+0x24>
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4401      	add	r1, r0
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	6053      	str	r3, [r2, #4]
 8003f98:	e7d8      	b.n	8003f4c <_free_r+0x24>
 8003f9a:	d902      	bls.n	8003fa2 <_free_r+0x7a>
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	602b      	str	r3, [r5, #0]
 8003fa0:	e7d4      	b.n	8003f4c <_free_r+0x24>
 8003fa2:	6820      	ldr	r0, [r4, #0]
 8003fa4:	1821      	adds	r1, r4, r0
 8003fa6:	428b      	cmp	r3, r1
 8003fa8:	bf01      	itttt	eq
 8003faa:	6819      	ldreq	r1, [r3, #0]
 8003fac:	685b      	ldreq	r3, [r3, #4]
 8003fae:	1809      	addeq	r1, r1, r0
 8003fb0:	6021      	streq	r1, [r4, #0]
 8003fb2:	6063      	str	r3, [r4, #4]
 8003fb4:	6054      	str	r4, [r2, #4]
 8003fb6:	e7c9      	b.n	8003f4c <_free_r+0x24>
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000150 	.word	0x20000150

08003fc0 <_malloc_r>:
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	1ccd      	adds	r5, r1, #3
 8003fc4:	f025 0503 	bic.w	r5, r5, #3
 8003fc8:	3508      	adds	r5, #8
 8003fca:	2d0c      	cmp	r5, #12
 8003fcc:	bf38      	it	cc
 8003fce:	250c      	movcc	r5, #12
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	db01      	blt.n	8003fda <_malloc_r+0x1a>
 8003fd6:	42a9      	cmp	r1, r5
 8003fd8:	d903      	bls.n	8003fe2 <_malloc_r+0x22>
 8003fda:	230c      	movs	r3, #12
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	2000      	movs	r0, #0
 8003fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fe2:	f000 f87d 	bl	80040e0 <__malloc_lock>
 8003fe6:	4921      	ldr	r1, [pc, #132]	; (800406c <_malloc_r+0xac>)
 8003fe8:	680a      	ldr	r2, [r1, #0]
 8003fea:	4614      	mov	r4, r2
 8003fec:	b99c      	cbnz	r4, 8004016 <_malloc_r+0x56>
 8003fee:	4f20      	ldr	r7, [pc, #128]	; (8004070 <_malloc_r+0xb0>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	b923      	cbnz	r3, 8003ffe <_malloc_r+0x3e>
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f000 f862 	bl	80040c0 <_sbrk_r>
 8003ffc:	6038      	str	r0, [r7, #0]
 8003ffe:	4629      	mov	r1, r5
 8004000:	4630      	mov	r0, r6
 8004002:	f000 f85d 	bl	80040c0 <_sbrk_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	d123      	bne.n	8004052 <_malloc_r+0x92>
 800400a:	230c      	movs	r3, #12
 800400c:	4630      	mov	r0, r6
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	f000 f86c 	bl	80040ec <__malloc_unlock>
 8004014:	e7e3      	b.n	8003fde <_malloc_r+0x1e>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	1b5b      	subs	r3, r3, r5
 800401a:	d417      	bmi.n	800404c <_malloc_r+0x8c>
 800401c:	2b0b      	cmp	r3, #11
 800401e:	d903      	bls.n	8004028 <_malloc_r+0x68>
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	441c      	add	r4, r3
 8004024:	6025      	str	r5, [r4, #0]
 8004026:	e004      	b.n	8004032 <_malloc_r+0x72>
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	42a2      	cmp	r2, r4
 800402c:	bf0c      	ite	eq
 800402e:	600b      	streq	r3, [r1, #0]
 8004030:	6053      	strne	r3, [r2, #4]
 8004032:	4630      	mov	r0, r6
 8004034:	f000 f85a 	bl	80040ec <__malloc_unlock>
 8004038:	f104 000b 	add.w	r0, r4, #11
 800403c:	1d23      	adds	r3, r4, #4
 800403e:	f020 0007 	bic.w	r0, r0, #7
 8004042:	1ac2      	subs	r2, r0, r3
 8004044:	d0cc      	beq.n	8003fe0 <_malloc_r+0x20>
 8004046:	1a1b      	subs	r3, r3, r0
 8004048:	50a3      	str	r3, [r4, r2]
 800404a:	e7c9      	b.n	8003fe0 <_malloc_r+0x20>
 800404c:	4622      	mov	r2, r4
 800404e:	6864      	ldr	r4, [r4, #4]
 8004050:	e7cc      	b.n	8003fec <_malloc_r+0x2c>
 8004052:	1cc4      	adds	r4, r0, #3
 8004054:	f024 0403 	bic.w	r4, r4, #3
 8004058:	42a0      	cmp	r0, r4
 800405a:	d0e3      	beq.n	8004024 <_malloc_r+0x64>
 800405c:	1a21      	subs	r1, r4, r0
 800405e:	4630      	mov	r0, r6
 8004060:	f000 f82e 	bl	80040c0 <_sbrk_r>
 8004064:	3001      	adds	r0, #1
 8004066:	d1dd      	bne.n	8004024 <_malloc_r+0x64>
 8004068:	e7cf      	b.n	800400a <_malloc_r+0x4a>
 800406a:	bf00      	nop
 800406c:	20000150 	.word	0x20000150
 8004070:	20000154 	.word	0x20000154

08004074 <_realloc_r>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	4607      	mov	r7, r0
 8004078:	4614      	mov	r4, r2
 800407a:	460e      	mov	r6, r1
 800407c:	b921      	cbnz	r1, 8004088 <_realloc_r+0x14>
 800407e:	4611      	mov	r1, r2
 8004080:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004084:	f7ff bf9c 	b.w	8003fc0 <_malloc_r>
 8004088:	b922      	cbnz	r2, 8004094 <_realloc_r+0x20>
 800408a:	f7ff ff4d 	bl	8003f28 <_free_r>
 800408e:	4625      	mov	r5, r4
 8004090:	4628      	mov	r0, r5
 8004092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004094:	f000 f830 	bl	80040f8 <_malloc_usable_size_r>
 8004098:	42a0      	cmp	r0, r4
 800409a:	d20f      	bcs.n	80040bc <_realloc_r+0x48>
 800409c:	4621      	mov	r1, r4
 800409e:	4638      	mov	r0, r7
 80040a0:	f7ff ff8e 	bl	8003fc0 <_malloc_r>
 80040a4:	4605      	mov	r5, r0
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d0f2      	beq.n	8004090 <_realloc_r+0x1c>
 80040aa:	4631      	mov	r1, r6
 80040ac:	4622      	mov	r2, r4
 80040ae:	f7ff ff13 	bl	8003ed8 <memcpy>
 80040b2:	4631      	mov	r1, r6
 80040b4:	4638      	mov	r0, r7
 80040b6:	f7ff ff37 	bl	8003f28 <_free_r>
 80040ba:	e7e9      	b.n	8004090 <_realloc_r+0x1c>
 80040bc:	4635      	mov	r5, r6
 80040be:	e7e7      	b.n	8004090 <_realloc_r+0x1c>

080040c0 <_sbrk_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	2300      	movs	r3, #0
 80040c4:	4d05      	ldr	r5, [pc, #20]	; (80040dc <_sbrk_r+0x1c>)
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fd f928 	bl	8001320 <_sbrk>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_sbrk_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_sbrk_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	2000024c 	.word	0x2000024c

080040e0 <__malloc_lock>:
 80040e0:	4801      	ldr	r0, [pc, #4]	; (80040e8 <__malloc_lock+0x8>)
 80040e2:	f000 b811 	b.w	8004108 <__retarget_lock_acquire_recursive>
 80040e6:	bf00      	nop
 80040e8:	20000254 	.word	0x20000254

080040ec <__malloc_unlock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_unlock+0x8>)
 80040ee:	f000 b80c 	b.w	800410a <__retarget_lock_release_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000254 	.word	0x20000254

080040f8 <_malloc_usable_size_r>:
 80040f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040fc:	1f18      	subs	r0, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfbc      	itt	lt
 8004102:	580b      	ldrlt	r3, [r1, r0]
 8004104:	18c0      	addlt	r0, r0, r3
 8004106:	4770      	bx	lr

08004108 <__retarget_lock_acquire_recursive>:
 8004108:	4770      	bx	lr

0800410a <__retarget_lock_release_recursive>:
 800410a:	4770      	bx	lr

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr
