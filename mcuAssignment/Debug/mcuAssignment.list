
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005368  08005368  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005368  08005368  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005368  08005368  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005368  08005368  00015368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000094  08005404  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08005404  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001360b  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000281b  00000000  00000000  000336c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00036c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e7a  00000000  00000000  00037868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010426  00000000  00000000  000506e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5a1  00000000  00000000  00060b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec0a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a9c  00000000  00000000  000ec0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	080051c8 	.word	0x080051c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	080051c8 	.word	0x080051c8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e020      	b.n	80007aa <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <initStateForButton+0x60>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2101      	movs	r1, #1
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <initStateForButton+0x64>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2101      	movs	r1, #1
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <initStateForButton+0x68>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2101      	movs	r1, #1
 8000782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <initStateForButton+0x6c>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2101      	movs	r1, #1
 800078c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <initStateForButton+0x70>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	21c8      	movs	r1, #200	; 0xc8
 8000796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <initStateForButton+0x74>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2100      	movs	r1, #0
 80007a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dddb      	ble.n	8000768 <initStateForButton+0xc>
	 }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	2000017c 	.word	0x2000017c
 80007c0:	2000018c 	.word	0x2000018c
 80007c4:	200001bc 	.word	0x200001bc
 80007c8:	2000016c 	.word	0x2000016c
 80007cc:	200001ac 	.word	0x200001ac
 80007d0:	2000019c 	.word	0x2000019c

080007d4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <isButtonPressed+0x30>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d106      	bne.n	80007f6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <isButtonPressed+0x30>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2100      	movs	r1, #0
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e000      	b.n	80007f8 <isButtonPressed+0x24>
	}
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	2000019c 	.word	0x2000019c

08000808 <subKeyProcess>:

void subKeyProcess(int key_index) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <subKeyProcess+0x1c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2101      	movs	r1, #1
 8000816:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	2000019c 	.word	0x2000019c

08000828 <getKeyInput>:

void getKeyInput() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e076      	b.n	8000922 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000834:	4a3f      	ldr	r2, [pc, #252]	; (8000934 <getKeyInput+0x10c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	493e      	ldr	r1, [pc, #248]	; (8000938 <getKeyInput+0x110>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000844:	4a3d      	ldr	r2, [pc, #244]	; (800093c <getKeyInput+0x114>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	4939      	ldr	r1, [pc, #228]	; (8000934 <getKeyInput+0x10c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000854:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <getKeyInput+0x118>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085c:	4939      	ldr	r1, [pc, #228]	; (8000944 <getKeyInput+0x11c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f001 fe58 	bl	800251c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	4a32      	ldr	r2, [pc, #200]	; (800093c <getKeyInput+0x114>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <getKeyInput+0x110>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000880:	492c      	ldr	r1, [pc, #176]	; (8000934 <getKeyInput+0x10c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000888:	429a      	cmp	r2, r3
 800088a:	d147      	bne.n	800091c <getKeyInput+0xf4>
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <getKeyInput+0x10c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000894:	4929      	ldr	r1, [pc, #164]	; (800093c <getKeyInput+0x114>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	d13d      	bne.n	800091c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <getKeyInput+0x120>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a8:	4924      	ldr	r1, [pc, #144]	; (800093c <getKeyInput+0x114>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d016      	beq.n	80008e2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <getKeyInput+0x114>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008bc:	4922      	ldr	r1, [pc, #136]	; (8000948 <getKeyInput+0x120>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <getKeyInput+0x114>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d125      	bne.n	800091c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff99 	bl	8000808 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <getKeyInput+0x124>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	21c8      	movs	r1, #200	; 0xc8
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008e0:	e01c      	b.n	800091c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <getKeyInput+0x124>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4917      	ldr	r1, [pc, #92]	; (800094c <getKeyInput+0x124>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <getKeyInput+0x124>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dc0d      	bgt.n	800091c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <getKeyInput+0x114>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <getKeyInput+0xea>
						subKeyProcess(i);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff7b 	bl	8000808 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <getKeyInput+0x124>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	21c8      	movs	r1, #200	; 0xc8
 8000918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b03      	cmp	r3, #3
 8000926:	dd85      	ble.n	8000834 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000018c 	.word	0x2000018c
 8000938:	2000017c 	.word	0x2000017c
 800093c:	200001bc 	.word	0x200001bc
 8000940:	20000008 	.word	0x20000008
 8000944:	20000000 	.word	0x20000000
 8000948:	2000016c 	.word	0x2000016c
 800094c:	200001ac 	.word	0x200001ac

08000950 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b0a      	subs	r3, #10
 800095c:	2b0d      	cmp	r3, #13
 800095e:	f200 80fa 	bhi.w	8000b56 <displayLed+0x206>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <displayLed+0x18>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009cd 	.word	0x080009cd
 8000970:	080009f9 	.word	0x080009f9
 8000974:	08000b57 	.word	0x08000b57
 8000978:	08000b57 	.word	0x08000b57
 800097c:	08000b57 	.word	0x08000b57
 8000980:	08000b57 	.word	0x08000b57
 8000984:	08000b57 	.word	0x08000b57
 8000988:	08000b57 	.word	0x08000b57
 800098c:	08000b57 	.word	0x08000b57
 8000990:	08000a25 	.word	0x08000a25
 8000994:	08000a73 	.word	0x08000a73
 8000998:	08000abf 	.word	0x08000abf
 800099c:	08000b0b 	.word	0x08000b0b
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a6:	4872      	ldr	r0, [pc, #456]	; (8000b70 <displayLed+0x220>)
 80009a8:	f001 fdcf 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <displayLed+0x224>)
 80009b2:	f001 fdca 	bl	800254a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2120      	movs	r1, #32
 80009ba:	486e      	ldr	r0, [pc, #440]	; (8000b74 <displayLed+0x224>)
 80009bc:	f001 fdc5 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	486b      	ldr	r0, [pc, #428]	; (8000b74 <displayLed+0x224>)
 80009c6:	f001 fdc0 	bl	800254a <HAL_GPIO_WritePin>
		break;
 80009ca:	e0cd      	b.n	8000b68 <displayLed+0x218>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	4867      	ldr	r0, [pc, #412]	; (8000b70 <displayLed+0x220>)
 80009d4:	f001 fdb9 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2108      	movs	r1, #8
 80009dc:	4865      	ldr	r0, [pc, #404]	; (8000b74 <displayLed+0x224>)
 80009de:	f001 fdb4 	bl	800254a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4863      	ldr	r0, [pc, #396]	; (8000b74 <displayLed+0x224>)
 80009e8:	f001 fdaf 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	4860      	ldr	r0, [pc, #384]	; (8000b74 <displayLed+0x224>)
 80009f2:	f001 fdaa 	bl	800254a <HAL_GPIO_WritePin>
		break;
 80009f6:	e0b7      	b.n	8000b68 <displayLed+0x218>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <displayLed+0x220>)
 8000a00:	f001 fda3 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	485a      	ldr	r0, [pc, #360]	; (8000b74 <displayLed+0x224>)
 8000a0a:	f001 fd9e 	bl	800254a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4858      	ldr	r0, [pc, #352]	; (8000b74 <displayLed+0x224>)
 8000a14:	f001 fd99 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4855      	ldr	r0, [pc, #340]	; (8000b74 <displayLed+0x224>)
 8000a1e:	f001 fd94 	bl	800254a <HAL_GPIO_WritePin>
		break;
 8000a22:	e0a1      	b.n	8000b68 <displayLed+0x218>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4851      	ldr	r0, [pc, #324]	; (8000b70 <displayLed+0x220>)
 8000a2c:	f001 fd8d 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	484f      	ldr	r0, [pc, #316]	; (8000b74 <displayLed+0x224>)
 8000a36:	f001 fd88 	bl	800254a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <displayLed+0x224>)
 8000a40:	f001 fd83 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	484a      	ldr	r0, [pc, #296]	; (8000b74 <displayLed+0x224>)
 8000a4a:	f001 fd7e 	bl	800254a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <displayLed+0x228>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	f040 8081 	bne.w	8000b5a <displayLed+0x20a>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <displayLed+0x224>)
 8000a60:	f001 fd73 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4841      	ldr	r0, [pc, #260]	; (8000b70 <displayLed+0x220>)
 8000a6c:	f001 fd6d 	bl	800254a <HAL_GPIO_WritePin>
		}
		break;
 8000a70:	e073      	b.n	8000b5a <displayLed+0x20a>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	483d      	ldr	r0, [pc, #244]	; (8000b70 <displayLed+0x220>)
 8000a7a:	f001 fd66 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	483c      	ldr	r0, [pc, #240]	; (8000b74 <displayLed+0x224>)
 8000a84:	f001 fd61 	bl	800254a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <displayLed+0x224>)
 8000a8e:	f001 fd5c 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2110      	movs	r1, #16
 8000a96:	4837      	ldr	r0, [pc, #220]	; (8000b74 <displayLed+0x224>)
 8000a98:	f001 fd57 	bl	800254a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <displayLed+0x228>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d15c      	bne.n	8000b5e <displayLed+0x20e>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4832      	ldr	r0, [pc, #200]	; (8000b74 <displayLed+0x224>)
 8000aac:	f001 fd4d 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	482e      	ldr	r0, [pc, #184]	; (8000b70 <displayLed+0x220>)
 8000ab8:	f001 fd47 	bl	800254a <HAL_GPIO_WritePin>
		}
		break;
 8000abc:	e04f      	b.n	8000b5e <displayLed+0x20e>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	482a      	ldr	r0, [pc, #168]	; (8000b70 <displayLed+0x220>)
 8000ac6:	f001 fd40 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	4829      	ldr	r0, [pc, #164]	; (8000b74 <displayLed+0x224>)
 8000ad0:	f001 fd3b 	bl	800254a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4826      	ldr	r0, [pc, #152]	; (8000b74 <displayLed+0x224>)
 8000ada:	f001 fd36 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4824      	ldr	r0, [pc, #144]	; (8000b74 <displayLed+0x224>)
 8000ae4:	f001 fd31 	bl	800254a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <displayLed+0x228>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d138      	bne.n	8000b62 <displayLed+0x212>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	481f      	ldr	r0, [pc, #124]	; (8000b74 <displayLed+0x224>)
 8000af8:	f001 fd27 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <displayLed+0x220>)
 8000b04:	f001 fd21 	bl	800254a <HAL_GPIO_WritePin>
		}
		break;
 8000b08:	e02b      	b.n	8000b62 <displayLed+0x212>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4817      	ldr	r0, [pc, #92]	; (8000b70 <displayLed+0x220>)
 8000b12:	f001 fd1a 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4816      	ldr	r0, [pc, #88]	; (8000b74 <displayLed+0x224>)
 8000b1c:	f001 fd15 	bl	800254a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2120      	movs	r1, #32
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <displayLed+0x224>)
 8000b26:	f001 fd10 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <displayLed+0x224>)
 8000b30:	f001 fd0b 	bl	800254a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <displayLed+0x228>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d114      	bne.n	8000b66 <displayLed+0x216>
		// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <displayLed+0x224>)
 8000b44:	f001 fd01 	bl	800254a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <displayLed+0x220>)
 8000b50:	f001 fcfb 	bl	800254a <HAL_GPIO_WritePin>
		}
		break;
 8000b54:	e007      	b.n	8000b66 <displayLed+0x216>

	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e006      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e004      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e002      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b66:	bf00      	nop
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	200000bc 	.word	0x200000bc

08000b7c <switchMode2>:
 */

#include "fsm_automatic.h"


void switchMode2() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <switchMode2+0x4c>)
 8000b84:	4911      	ldr	r1, [pc, #68]	; (8000bcc <switchMode2+0x50>)
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <switchMode2+0x54>)
 8000b88:	f003 fee4 	bl	8004954 <siprintf>
 8000b8c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <switchMode2+0x54>)
 8000b98:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <switchMode2+0x58>)
 8000b9a:	f003 f8d5 	bl	8003d48 <HAL_UART_Transmit>
	status = RED_MAN;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <switchMode2+0x5c>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <switchMode2+0x60>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <switchMode2+0x64>)
 8000baa:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f000 feb9 	bl	8001924 <setTimer2>
	setTimer4(25);
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 feca 	bl	800194c <setTimer4>
	statusPedestrian = PES_OFF;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <switchMode2+0x68>)
 8000bba:	221f      	movs	r2, #31
 8000bbc:	601a      	str	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	080051e0 	.word	0x080051e0
 8000bcc:	080051f8 	.word	0x080051f8
 8000bd0:	200000c8 	.word	0x200000c8
 8000bd4:	2000025c 	.word	0x2000025c
 8000bd8:	200000b8 	.word	0x200000b8
 8000bdc:	20000018 	.word	0x20000018
 8000be0:	200000b0 	.word	0x200000b0
 8000be4:	200000c0 	.word	0x200000c0

08000be8 <fsm_pedestrian>:

void fsm_pedestrian(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <fsm_pedestrian+0x4c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b1e      	cmp	r3, #30
 8000bf2:	d002      	beq.n	8000bfa <fsm_pedestrian+0x12>
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d004      	beq.n	8000c02 <fsm_pedestrian+0x1a>
		turnPedestrian_flag = 0;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	default:
		break;
 8000bf8:	e013      	b.n	8000c22 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 1;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <fsm_pedestrian+0x50>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
		break;
 8000c00:	e00f      	b.n	8000c22 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 0;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <fsm_pedestrian+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <fsm_pedestrian+0x54>)
 8000c10:	f001 fc9b 	bl	800254a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <fsm_pedestrian+0x58>)
 8000c1c:	f001 fc95 	bl	800254a <HAL_GPIO_WritePin>
		break;
 8000c20:	bf00      	nop
	}

	if(timer6_flag == 1) {
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <fsm_pedestrian+0x5c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <fsm_pedestrian+0x48>
		statusPedestrian = PES_OFF;
 8000c2a:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <fsm_pedestrian+0x4c>)
 8000c2c:	221f      	movs	r2, #31
 8000c2e:	601a      	str	r2, [r3, #0]
	}
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	200000bc 	.word	0x200000bc
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40010800 	.word	0x40010800
 8000c44:	20000158 	.word	0x20000158

08000c48 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
	switch(status) {
 8000c4e:	4b9c      	ldr	r3, [pc, #624]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	f200 8229 	bhi.w	80010ac <fsm_automatic_run+0x464>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <fsm_automatic_run+0x18>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000caf 	.word	0x08000caf
 8000c68:	08000db9 	.word	0x08000db9
 8000c6c:	08000f01 	.word	0x08000f01
 8000c70:	08000ff3 	.word	0x08000ff3
	case INIT:
		statusPedestrian = PES_OFF;
 8000c74:	4b93      	ldr	r3, [pc, #588]	; (8000ec4 <fsm_automatic_run+0x27c>)
 8000c76:	221f      	movs	r2, #31
 8000c78:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN2_AUTO;
 8000c7a:	4b91      	ldr	r3, [pc, #580]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 8000c80:	4b91      	ldr	r3, [pc, #580]	; (8000ec8 <fsm_automatic_run+0x280>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a91      	ldr	r2, [pc, #580]	; (8000ecc <fsm_automatic_run+0x284>)
 8000c86:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000c88:	4b91      	ldr	r3, [pc, #580]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a91      	ldr	r2, [pc, #580]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000c8e:	6013      	str	r3, [r2, #0]

		setTimer1(greenTimer*100);
 8000c90:	4b8f      	ldr	r3, [pc, #572]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2264      	movs	r2, #100	; 0x64
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fe2e 	bl	80018fc <setTimer1>
		setTimer2(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f000 fe3f 	bl	8001924 <setTimer2>
		setTimer5(25);
 8000ca6:	2019      	movs	r0, #25
 8000ca8:	f000 fe64 	bl	8001974 <setTimer5>
		break;
 8000cac:	e207      	b.n	80010be <fsm_automatic_run+0x476>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 8000cae:	2014      	movs	r0, #20
 8000cb0:	f7ff fe4e 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000cb4:	4b88      	ldr	r3, [pc, #544]	; (8000ed8 <fsm_automatic_run+0x290>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d156      	bne.n	8000d6a <fsm_automatic_run+0x122>
			int len= sprintf(str,"LED RED      = %d    LED GREEN    = %d\r\n",counter1,counter2);
 8000cbc:	4b83      	ldr	r3, [pc, #524]	; (8000ecc <fsm_automatic_run+0x284>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b84      	ldr	r3, [pc, #528]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4985      	ldr	r1, [pc, #532]	; (8000edc <fsm_automatic_run+0x294>)
 8000cc6:	4886      	ldr	r0, [pc, #536]	; (8000ee0 <fsm_automatic_run+0x298>)
 8000cc8:	f003 fe44 	bl	8004954 <siprintf>
 8000ccc:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	4982      	ldr	r1, [pc, #520]	; (8000ee0 <fsm_automatic_run+0x298>)
 8000cd8:	4882      	ldr	r0, [pc, #520]	; (8000ee4 <fsm_automatic_run+0x29c>)
 8000cda:	f003 f835 	bl	8003d48 <HAL_UART_Transmit>
			setTimer2(100);
 8000cde:	2064      	movs	r0, #100	; 0x64
 8000ce0:	f000 fe20 	bl	8001924 <setTimer2>
			counter1--;
 8000ce4:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <fsm_automatic_run+0x284>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a78      	ldr	r2, [pc, #480]	; (8000ecc <fsm_automatic_run+0x284>)
 8000cec:	6013      	str	r3, [r2, #0]
			counter2--;
 8000cee:	4b79      	ldr	r3, [pc, #484]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	4a77      	ldr	r2, [pc, #476]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000cf6:	6013      	str	r3, [r2, #0]
			if(turnPedestrian_flag == 1) {
 8000cf8:	4b7b      	ldr	r3, [pc, #492]	; (8000ee8 <fsm_automatic_run+0x2a0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d134      	bne.n	8000d6a <fsm_automatic_run+0x122>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
 8000d00:	4b7a      	ldr	r3, [pc, #488]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	441a      	add	r2, r3
 8000d0a:	4b79      	ldr	r3, [pc, #484]	; (8000ef0 <fsm_automatic_run+0x2a8>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d10:	4b76      	ldr	r3, [pc, #472]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b74      	ldr	r3, [pc, #464]	; (8000ef0 <fsm_automatic_run+0x2a8>)
 8000d1e:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*value_buzzer));
 8000d20:	4b72      	ldr	r3, [pc, #456]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fc8c 	bl	8000648 <__aeabi_i2d>
 8000d30:	a361      	add	r3, pc, #388	; (adr r3, 8000eb8 <fsm_automatic_run+0x270>)
 8000d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d36:	f7ff fa0b 	bl	8000150 <__aeabi_dmul>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	496c      	ldr	r1, [pc, #432]	; (8000ef0 <fsm_automatic_run+0x2a8>)
 8000d40:	680c      	ldr	r4, [r1, #0]
 8000d42:	4610      	mov	r0, r2
 8000d44:	4619      	mov	r1, r3
 8000d46:	f7ff fce9 	bl	800071c <__aeabi_d2uiz>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6363      	str	r3, [r4, #52]	; 0x34
				value_buzzer = value_buzzer - value_buzzer/(greenTimer+yellowTimer);
 8000d4e:	4b67      	ldr	r3, [pc, #412]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	4b66      	ldr	r3, [pc, #408]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	4b5e      	ldr	r3, [pc, #376]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	4b66      	ldr	r3, [pc, #408]	; (8000ef4 <fsm_automatic_run+0x2ac>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4403      	add	r3, r0
 8000d60:	fb91 f3f3 	sdiv	r3, r1, r3
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	4a61      	ldr	r2, [pc, #388]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000d68:	6013      	str	r3, [r2, #0]
			}
		}

		if(timer1_flag == 1) {
 8000d6a:	4b63      	ldr	r3, [pc, #396]	; (8000ef8 <fsm_automatic_run+0x2b0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d118      	bne.n	8000da4 <fsm_automatic_run+0x15c>
			status = RED1_YELLOW2_AUTO;
 8000d72:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000d74:	2203      	movs	r2, #3
 8000d76:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000d78:	4b53      	ldr	r3, [pc, #332]	; (8000ec8 <fsm_automatic_run+0x280>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b54      	ldr	r3, [pc, #336]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2264      	movs	r2, #100	; 0x64
 8000d84:	fb02 f303 	mul.w	r3, r2, r3
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fdb7 	bl	80018fc <setTimer1>
			counter1 = redTimer-greenTimer;
 8000d8e:	4b4e      	ldr	r3, [pc, #312]	; (8000ec8 <fsm_automatic_run+0x280>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	4a4c      	ldr	r2, [pc, #304]	; (8000ecc <fsm_automatic_run+0x284>)
 8000d9a:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 8000d9c:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <fsm_automatic_run+0x2ac>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000da2:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fd15 	bl	80007d4 <isButtonPressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 817f 	beq.w	80010b0 <fsm_automatic_run+0x468>
			switchMode2();
 8000db2:	f7ff fee3 	bl	8000b7c <switchMode2>
		}

		break;
 8000db6:	e17b      	b.n	80010b0 <fsm_automatic_run+0x468>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 8000db8:	2015      	movs	r0, #21
 8000dba:	f7ff fdc9 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000dbe:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <fsm_automatic_run+0x290>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d156      	bne.n	8000e74 <fsm_automatic_run+0x22c>
			int len= sprintf(str,"LED RED      = %d    LED YELLOW   = %d\r\n",counter1,counter2);
 8000dc6:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <fsm_automatic_run+0x284>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b42      	ldr	r3, [pc, #264]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	494b      	ldr	r1, [pc, #300]	; (8000efc <fsm_automatic_run+0x2b4>)
 8000dd0:	4843      	ldr	r0, [pc, #268]	; (8000ee0 <fsm_automatic_run+0x298>)
 8000dd2:	f003 fdbf 	bl	8004954 <siprintf>
 8000dd6:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de0:	493f      	ldr	r1, [pc, #252]	; (8000ee0 <fsm_automatic_run+0x298>)
 8000de2:	4840      	ldr	r0, [pc, #256]	; (8000ee4 <fsm_automatic_run+0x29c>)
 8000de4:	f002 ffb0 	bl	8003d48 <HAL_UART_Transmit>
			setTimer2(100);
 8000de8:	2064      	movs	r0, #100	; 0x64
 8000dea:	f000 fd9b 	bl	8001924 <setTimer2>
			counter1--;
 8000dee:	4b37      	ldr	r3, [pc, #220]	; (8000ecc <fsm_automatic_run+0x284>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a35      	ldr	r2, [pc, #212]	; (8000ecc <fsm_automatic_run+0x284>)
 8000df6:	6013      	str	r3, [r2, #0]
			counter2--;
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	4a35      	ldr	r2, [pc, #212]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000e00:	6013      	str	r3, [r2, #0]
			if(turnPedestrian_flag == 1) {
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <fsm_automatic_run+0x2a0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d134      	bne.n	8000e74 <fsm_automatic_run+0x22c>
				__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
 8000e0a:	4b38      	ldr	r3, [pc, #224]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	441a      	add	r2, r3
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <fsm_automatic_run+0x2a8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e1a:	4b34      	ldr	r3, [pc, #208]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <fsm_automatic_run+0x2a8>)
 8000e28:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*value_buzzer));
 8000e2a:	4b30      	ldr	r3, [pc, #192]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fc07 	bl	8000648 <__aeabi_i2d>
 8000e3a:	a31f      	add	r3, pc, #124	; (adr r3, 8000eb8 <fsm_automatic_run+0x270>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f7ff f986 	bl	8000150 <__aeabi_dmul>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4929      	ldr	r1, [pc, #164]	; (8000ef0 <fsm_automatic_run+0x2a8>)
 8000e4a:	680c      	ldr	r4, [r1, #0]
 8000e4c:	4610      	mov	r0, r2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f7ff fc64 	bl	800071c <__aeabi_d2uiz>
 8000e54:	4603      	mov	r3, r0
 8000e56:	6363      	str	r3, [r4, #52]	; 0x34
				value_buzzer = value_buzzer - value_buzzer/(greenTimer+yellowTimer);
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b23      	ldr	r3, [pc, #140]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000e5e:	6819      	ldr	r1, [r3, #0]
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <fsm_automatic_run+0x2ac>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4403      	add	r3, r0
 8000e6a:	fb91 f3f3 	sdiv	r3, r1, r3
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4a1e      	ldr	r2, [pc, #120]	; (8000eec <fsm_automatic_run+0x2a4>)
 8000e72:	6013      	str	r3, [r2, #0]
			}
		}

		if(timer1_flag == 1) {
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <fsm_automatic_run+0x2b0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d112      	bne.n	8000ea2 <fsm_automatic_run+0x25a>
			status = GREEN1_RED2_AUTO;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000e7e:	2204      	movs	r2, #4
 8000e80:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2264      	movs	r2, #100	; 0x64
 8000e88:	fb02 f303 	mul.w	r3, r2, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fd35 	bl	80018fc <setTimer1>
			counter1 = greenTimer;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <fsm_automatic_run+0x284>)
 8000e98:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <fsm_automatic_run+0x280>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000ea0:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fc96 	bl	80007d4 <isButtonPressed>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8102 	beq.w	80010b4 <fsm_automatic_run+0x46c>
			switchMode2();
 8000eb0:	f7ff fe64 	bl	8000b7c <switchMode2>
		}
		break;
 8000eb4:	e0fe      	b.n	80010b4 <fsm_automatic_run+0x46c>
 8000eb6:	bf00      	nop
 8000eb8:	33333333 	.word	0x33333333
 8000ebc:	3fe33333 	.word	0x3fe33333
 8000ec0:	200000b8 	.word	0x200000b8
 8000ec4:	200000c0 	.word	0x200000c0
 8000ec8:	20000018 	.word	0x20000018
 8000ecc:	200000b0 	.word	0x200000b0
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	200000b4 	.word	0x200000b4
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	08005200 	.word	0x08005200
 8000ee0:	200000c8 	.word	0x200000c8
 8000ee4:	2000025c 	.word	0x2000025c
 8000ee8:	200000bc 	.word	0x200000bc
 8000eec:	200000c4 	.word	0x200000c4
 8000ef0:	200001cc 	.word	0x200001cc
 8000ef4:	2000001c 	.word	0x2000001c
 8000ef8:	20000130 	.word	0x20000130
 8000efc:	0800522c 	.word	0x0800522c
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000f00:	2016      	movs	r0, #22
 8000f02:	f7ff fd25 	bl	8000950 <displayLed>
		if (isButtonPressed(3)) {
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff fc64 	bl	80007d4 <isButtonPressed>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00f      	beq.n	8000f32 <fsm_automatic_run+0x2ea>
			statusPedestrian = PES_ON;
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <fsm_automatic_run+0x480>)
 8000f14:	221e      	movs	r2, #30
 8000f16:	601a      	str	r2, [r3, #0]
//			setTimer3((redTimer+greenTimer+yellowTimer)*100 - 400);
			setTimer6((3*redTimer)*100);
 8000f18:	4b6c      	ldr	r3, [pc, #432]	; (80010cc <fsm_automatic_run+0x484>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fd39 	bl	800199c <setTimer6>
			value_buzzer = 2000;
 8000f2a:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <fsm_automatic_run+0x488>)
 8000f2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f30:	601a      	str	r2, [r3, #0]
		}

		if(turnPedestrian_flag == 1) {
 8000f32:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <fsm_automatic_run+0x48c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d113      	bne.n	8000f62 <fsm_automatic_run+0x31a>
			__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
 8000f3a:	4b65      	ldr	r3, [pc, #404]	; (80010d0 <fsm_automatic_run+0x488>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	441a      	add	r2, r3
 8000f44:	4b64      	ldr	r3, [pc, #400]	; (80010d8 <fsm_automatic_run+0x490>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4a:	4b61      	ldr	r3, [pc, #388]	; (80010d0 <fsm_automatic_run+0x488>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <fsm_automatic_run+0x490>)
 8000f58:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <fsm_automatic_run+0x490>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34
		}

		if(timer2_flag == 1) {
 8000f62:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <fsm_automatic_run+0x494>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d11d      	bne.n	8000fa6 <fsm_automatic_run+0x35e>
			int len= sprintf(str,"LED GREEN    = %d    LED RED      = %d\r\n",counter1,counter2);
 8000f6a:	4b5d      	ldr	r3, [pc, #372]	; (80010e0 <fsm_automatic_run+0x498>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <fsm_automatic_run+0x49c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	495d      	ldr	r1, [pc, #372]	; (80010e8 <fsm_automatic_run+0x4a0>)
 8000f74:	485d      	ldr	r0, [pc, #372]	; (80010ec <fsm_automatic_run+0x4a4>)
 8000f76:	f003 fced 	bl	8004954 <siprintf>
 8000f7a:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	4959      	ldr	r1, [pc, #356]	; (80010ec <fsm_automatic_run+0x4a4>)
 8000f86:	485a      	ldr	r0, [pc, #360]	; (80010f0 <fsm_automatic_run+0x4a8>)
 8000f88:	f002 fede 	bl	8003d48 <HAL_UART_Transmit>
			setTimer2(100);
 8000f8c:	2064      	movs	r0, #100	; 0x64
 8000f8e:	f000 fcc9 	bl	8001924 <setTimer2>
			counter1--;
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <fsm_automatic_run+0x498>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	4a51      	ldr	r2, [pc, #324]	; (80010e0 <fsm_automatic_run+0x498>)
 8000f9a:	6013      	str	r3, [r2, #0]
			counter2--;
 8000f9c:	4b51      	ldr	r3, [pc, #324]	; (80010e4 <fsm_automatic_run+0x49c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <fsm_automatic_run+0x49c>)
 8000fa4:	6013      	str	r3, [r2, #0]
//						__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
//						__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
//					}
		}

		if(timer1_flag == 1) {
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <fsm_automatic_run+0x4ac>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d118      	bne.n	8000fe0 <fsm_automatic_run+0x398>
			status = YELLOW1_RED2_AUTO;
 8000fae:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <fsm_automatic_run+0x4b0>)
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000fb4:	4b45      	ldr	r3, [pc, #276]	; (80010cc <fsm_automatic_run+0x484>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b50      	ldr	r3, [pc, #320]	; (80010fc <fsm_automatic_run+0x4b4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2264      	movs	r2, #100	; 0x64
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fc99 	bl	80018fc <setTimer1>
			counter1 = yellowTimer;
 8000fca:	4b4d      	ldr	r3, [pc, #308]	; (8001100 <fsm_automatic_run+0x4b8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a44      	ldr	r2, [pc, #272]	; (80010e0 <fsm_automatic_run+0x498>)
 8000fd0:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <fsm_automatic_run+0x484>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <fsm_automatic_run+0x4b4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4a41      	ldr	r2, [pc, #260]	; (80010e4 <fsm_automatic_run+0x49c>)
 8000fde:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f7ff fbf7 	bl	80007d4 <isButtonPressed>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d065      	beq.n	80010b8 <fsm_automatic_run+0x470>
			switchMode2();
 8000fec:	f7ff fdc6 	bl	8000b7c <switchMode2>
		}
		break;
 8000ff0:	e062      	b.n	80010b8 <fsm_automatic_run+0x470>
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 8000ff2:	2017      	movs	r0, #23
 8000ff4:	f7ff fcac 	bl	8000950 <displayLed>

		if(turnPedestrian_flag == 1) {
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <fsm_automatic_run+0x48c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d113      	bne.n	8001028 <fsm_automatic_run+0x3e0>
			__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
 8001000:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <fsm_automatic_run+0x488>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	441a      	add	r2, r3
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <fsm_automatic_run+0x490>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001010:	4b2f      	ldr	r3, [pc, #188]	; (80010d0 <fsm_automatic_run+0x488>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	461a      	mov	r2, r3
 800101c:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <fsm_automatic_run+0x490>)
 800101e:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <fsm_automatic_run+0x490>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2200      	movs	r2, #0
 8001026:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(timer2_flag == 1) {
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <fsm_automatic_run+0x494>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d11d      	bne.n	800106c <fsm_automatic_run+0x424>
			int len= sprintf(str,"LED YELLOW   = %d    LED RED      = %d\r\n",counter1,counter2);
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <fsm_automatic_run+0x498>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <fsm_automatic_run+0x49c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4932      	ldr	r1, [pc, #200]	; (8001104 <fsm_automatic_run+0x4bc>)
 800103a:	482c      	ldr	r0, [pc, #176]	; (80010ec <fsm_automatic_run+0x4a4>)
 800103c:	f003 fc8a 	bl	8004954 <siprintf>
 8001040:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b29a      	uxth	r2, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104a:	4928      	ldr	r1, [pc, #160]	; (80010ec <fsm_automatic_run+0x4a4>)
 800104c:	4828      	ldr	r0, [pc, #160]	; (80010f0 <fsm_automatic_run+0x4a8>)
 800104e:	f002 fe7b 	bl	8003d48 <HAL_UART_Transmit>
			setTimer2(100);
 8001052:	2064      	movs	r0, #100	; 0x64
 8001054:	f000 fc66 	bl	8001924 <setTimer2>
			counter1--;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <fsm_automatic_run+0x498>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3b01      	subs	r3, #1
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <fsm_automatic_run+0x498>)
 8001060:	6013      	str	r3, [r2, #0]
			counter2--;
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <fsm_automatic_run+0x49c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3b01      	subs	r3, #1
 8001068:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <fsm_automatic_run+0x49c>)
 800106a:	6013      	str	r3, [r2, #0]
//						__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
//						__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0);
//					}
		}

		if(timer1_flag == 1) {
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <fsm_automatic_run+0x4ac>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d112      	bne.n	800109a <fsm_automatic_run+0x452>
			status = RED1_GREEN2_AUTO;
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <fsm_automatic_run+0x4b0>)
 8001076:	2202      	movs	r2, #2
 8001078:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <fsm_automatic_run+0x4b4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	fb02 f303 	mul.w	r3, r2, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fc39 	bl	80018fc <setTimer1>
			counter1 = redTimer;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <fsm_automatic_run+0x484>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <fsm_automatic_run+0x498>)
 8001090:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <fsm_automatic_run+0x4b4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <fsm_automatic_run+0x49c>)
 8001098:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 800109a:	2000      	movs	r0, #0
 800109c:	f7ff fb9a 	bl	80007d4 <isButtonPressed>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00a      	beq.n	80010bc <fsm_automatic_run+0x474>
			switchMode2();
 80010a6:	f7ff fd69 	bl	8000b7c <switchMode2>
		}
		break;
 80010aa:	e007      	b.n	80010bc <fsm_automatic_run+0x474>
	default:
		break;
 80010ac:	bf00      	nop
 80010ae:	e006      	b.n	80010be <fsm_automatic_run+0x476>
		break;
 80010b0:	bf00      	nop
 80010b2:	e004      	b.n	80010be <fsm_automatic_run+0x476>
		break;
 80010b4:	bf00      	nop
 80010b6:	e002      	b.n	80010be <fsm_automatic_run+0x476>
		break;
 80010b8:	bf00      	nop
 80010ba:	e000      	b.n	80010be <fsm_automatic_run+0x476>
		break;
 80010bc:	bf00      	nop
	}
};
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000c0 	.word	0x200000c0
 80010cc:	20000018 	.word	0x20000018
 80010d0:	200000c4 	.word	0x200000c4
 80010d4:	200000bc 	.word	0x200000bc
 80010d8:	200001cc 	.word	0x200001cc
 80010dc:	20000138 	.word	0x20000138
 80010e0:	200000b0 	.word	0x200000b0
 80010e4:	200000b4 	.word	0x200000b4
 80010e8:	08005258 	.word	0x08005258
 80010ec:	200000c8 	.word	0x200000c8
 80010f0:	2000025c 	.word	0x2000025c
 80010f4:	20000130 	.word	0x20000130
 80010f8:	200000b8 	.word	0x200000b8
 80010fc:	20000020 	.word	0x20000020
 8001100:	2000001c 	.word	0x2000001c
 8001104:	08005284 	.word	0x08005284

08001108 <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <switchMode3+0x24>)
 800110e:	220b      	movs	r2, #11
 8001110:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <switchMode3+0x28>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <switchMode3+0x2c>)
 8001118:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 800111a:	2064      	movs	r0, #100	; 0x64
 800111c:	f000 fc02 	bl	8001924 <setTimer2>
	setTimer4(25);
 8001120:	2019      	movs	r0, #25
 8001122:	f000 fc13 	bl	800194c <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000b8 	.word	0x200000b8
 8001130:	2000001c 	.word	0x2000001c
 8001134:	200000b0 	.word	0x200000b0

08001138 <switchMode4>:

void switchMode4() {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <switchMode4+0x24>)
 800113e:	220c      	movs	r2, #12
 8001140:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <switchMode4+0x28>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a07      	ldr	r2, [pc, #28]	; (8001164 <switchMode4+0x2c>)
 8001148:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 800114a:	2064      	movs	r0, #100	; 0x64
 800114c:	f000 fbea 	bl	8001924 <setTimer2>
	setTimer4(25);
 8001150:	2019      	movs	r0, #25
 8001152:	f000 fbfb 	bl	800194c <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000b8 	.word	0x200000b8
 8001160:	20000020 	.word	0x20000020
 8001164:	200000b0 	.word	0x200000b0

08001168 <fsm_manual_run>:

void fsm_manual_run() {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
	switch(status) {
 800116e:	4b8f      	ldr	r3, [pc, #572]	; (80013ac <fsm_manual_run+0x244>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3b0a      	subs	r3, #10
 8001174:	2b05      	cmp	r3, #5
 8001176:	f200 8184 	bhi.w	8001482 <fsm_manual_run+0x31a>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <fsm_manual_run+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001199 	.word	0x08001199
 8001184:	0800127f 	.word	0x0800127f
 8001188:	08001369 	.word	0x08001369
 800118c:	080011db 	.word	0x080011db
 8001190:	080012c1 	.word	0x080012c1
 8001194:	080013dd 	.word	0x080013dd

	case RED_MAN:
		displayLed(RED_MAN);
 8001198:	200a      	movs	r0, #10
 800119a:	f7ff fbd9 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 800119e:	4b84      	ldr	r3, [pc, #528]	; (80013b0 <fsm_manual_run+0x248>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d102      	bne.n	80011ac <fsm_manual_run+0x44>
			setTimer2(100);
 80011a6:	2064      	movs	r0, #100	; 0x64
 80011a8:	f000 fbbc 	bl	8001924 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fb11 	bl	80007d4 <isButtonPressed>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <fsm_manual_run+0x54>
			switchMode3();
 80011b8:	f7ff ffa6 	bl	8001108 <switchMode3>
		}

		if(isButtonPressed(1)) {
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fb09 	bl	80007d4 <isButtonPressed>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 815e 	beq.w	8001486 <fsm_manual_run+0x31e>
			status = RED_MAN_MODIFY;
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <fsm_manual_run+0x244>)
 80011cc:	220d      	movs	r2, #13
 80011ce:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 80011d0:	4b78      	ldr	r3, [pc, #480]	; (80013b4 <fsm_manual_run+0x24c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a78      	ldr	r2, [pc, #480]	; (80013b8 <fsm_manual_run+0x250>)
 80011d6:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 80011d8:	e155      	b.n	8001486 <fsm_manual_run+0x31e>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 80011da:	200a      	movs	r0, #10
 80011dc:	f7ff fbb8 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff faf7 	bl	80007d4 <isButtonPressed>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <fsm_manual_run+0x8a>
			status = RED_MAN;
 80011ec:	4b6f      	ldr	r3, [pc, #444]	; (80013ac <fsm_manual_run+0x244>)
 80011ee:	220a      	movs	r2, #10
 80011f0:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 80011f2:	2001      	movs	r0, #1
 80011f4:	f7ff faee 	bl	80007d4 <isButtonPressed>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d01b      	beq.n	8001236 <fsm_manual_run+0xce>
			timerMan++;
 80011fe:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <fsm_manual_run+0x250>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a6c      	ldr	r2, [pc, #432]	; (80013b8 <fsm_manual_run+0x250>)
 8001206:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 8001208:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <fsm_manual_run+0x250>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	496b      	ldr	r1, [pc, #428]	; (80013bc <fsm_manual_run+0x254>)
 8001210:	486b      	ldr	r0, [pc, #428]	; (80013c0 <fsm_manual_run+0x258>)
 8001212:	f003 fb9f 	bl	8004954 <siprintf>
 8001216:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	b29a      	uxth	r2, r3
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	4967      	ldr	r1, [pc, #412]	; (80013c0 <fsm_manual_run+0x258>)
 8001222:	4868      	ldr	r0, [pc, #416]	; (80013c4 <fsm_manual_run+0x25c>)
 8001224:	f002 fd90 	bl	8003d48 <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 8001228:	4b63      	ldr	r3, [pc, #396]	; (80013b8 <fsm_manual_run+0x250>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b63      	cmp	r3, #99	; 0x63
 800122e:	dd02      	ble.n	8001236 <fsm_manual_run+0xce>
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <fsm_manual_run+0x250>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff facc 	bl	80007d4 <isButtonPressed>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 8123 	beq.w	800148a <fsm_manual_run+0x322>
			status = INIT;
 8001244:	4b59      	ldr	r3, [pc, #356]	; (80013ac <fsm_manual_run+0x244>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 800124a:	4a5f      	ldr	r2, [pc, #380]	; (80013c8 <fsm_manual_run+0x260>)
 800124c:	495f      	ldr	r1, [pc, #380]	; (80013cc <fsm_manual_run+0x264>)
 800124e:	485c      	ldr	r0, [pc, #368]	; (80013c0 <fsm_manual_run+0x258>)
 8001250:	f003 fb80 	bl	8004954 <siprintf>
 8001254:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b29a      	uxth	r2, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	4958      	ldr	r1, [pc, #352]	; (80013c0 <fsm_manual_run+0x258>)
 8001260:	4858      	ldr	r0, [pc, #352]	; (80013c4 <fsm_manual_run+0x25c>)
 8001262:	f002 fd71 	bl	8003d48 <HAL_UART_Transmit>
			redTimer = timerMan;
 8001266:	4b54      	ldr	r3, [pc, #336]	; (80013b8 <fsm_manual_run+0x250>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <fsm_manual_run+0x24c>)
 800126c:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 800126e:	4b51      	ldr	r3, [pc, #324]	; (80013b4 <fsm_manual_run+0x24c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <fsm_manual_run+0x268>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	4a56      	ldr	r2, [pc, #344]	; (80013d4 <fsm_manual_run+0x26c>)
 800127a:	6013      	str	r3, [r2, #0]
		}

		break;
 800127c:	e105      	b.n	800148a <fsm_manual_run+0x322>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 800127e:	200b      	movs	r0, #11
 8001280:	f7ff fb66 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <fsm_manual_run+0x248>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <fsm_manual_run+0x12a>
			setTimer2(100);
 800128c:	2064      	movs	r0, #100	; 0x64
 800128e:	f000 fb49 	bl	8001924 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fa9e 	bl	80007d4 <isButtonPressed>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <fsm_manual_run+0x13a>
			switchMode4();
 800129e:	f7ff ff4b 	bl	8001138 <switchMode4>
		}

		if(isButtonPressed(1)) {
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fa96 	bl	80007d4 <isButtonPressed>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80ef 	beq.w	800148e <fsm_manual_run+0x326>
			status = YELLOW_MAN_MODIFY;
 80012b0:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <fsm_manual_run+0x244>)
 80012b2:	220e      	movs	r2, #14
 80012b4:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <fsm_manual_run+0x268>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a3f      	ldr	r2, [pc, #252]	; (80013b8 <fsm_manual_run+0x250>)
 80012bc:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 80012be:	e0e6      	b.n	800148e <fsm_manual_run+0x326>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 80012c0:	200b      	movs	r0, #11
 80012c2:	f7ff fb45 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fa84 	bl	80007d4 <isButtonPressed>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <fsm_manual_run+0x170>
			status = YELLOW_MAN;
 80012d2:	4b36      	ldr	r3, [pc, #216]	; (80013ac <fsm_manual_run+0x244>)
 80012d4:	220b      	movs	r2, #11
 80012d6:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fa7b 	bl	80007d4 <isButtonPressed>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01d      	beq.n	8001320 <fsm_manual_run+0x1b8>
			timerMan++;
 80012e4:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <fsm_manual_run+0x250>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <fsm_manual_run+0x250>)
 80012ec:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 80012ee:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <fsm_manual_run+0x250>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4938      	ldr	r1, [pc, #224]	; (80013d8 <fsm_manual_run+0x270>)
 80012f6:	4832      	ldr	r0, [pc, #200]	; (80013c0 <fsm_manual_run+0x258>)
 80012f8:	f003 fb2c 	bl	8004954 <siprintf>
 80012fc:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	b29a      	uxth	r2, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	492e      	ldr	r1, [pc, #184]	; (80013c0 <fsm_manual_run+0x258>)
 8001308:	482e      	ldr	r0, [pc, #184]	; (80013c4 <fsm_manual_run+0x25c>)
 800130a:	f002 fd1d 	bl	8003d48 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <fsm_manual_run+0x250>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <fsm_manual_run+0x24c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	db02      	blt.n	8001320 <fsm_manual_run+0x1b8>
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <fsm_manual_run+0x250>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 8001320:	2002      	movs	r0, #2
 8001322:	f7ff fa57 	bl	80007d4 <isButtonPressed>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80b2 	beq.w	8001492 <fsm_manual_run+0x32a>
			status = INIT;
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <fsm_manual_run+0x244>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 8001334:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <fsm_manual_run+0x260>)
 8001336:	4925      	ldr	r1, [pc, #148]	; (80013cc <fsm_manual_run+0x264>)
 8001338:	4821      	ldr	r0, [pc, #132]	; (80013c0 <fsm_manual_run+0x258>)
 800133a:	f003 fb0b 	bl	8004954 <siprintf>
 800133e:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	b29a      	uxth	r2, r3
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	491d      	ldr	r1, [pc, #116]	; (80013c0 <fsm_manual_run+0x258>)
 800134a:	481e      	ldr	r0, [pc, #120]	; (80013c4 <fsm_manual_run+0x25c>)
 800134c:	f002 fcfc 	bl	8003d48 <HAL_UART_Transmit>
			yellowTimer = timerMan;
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <fsm_manual_run+0x250>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <fsm_manual_run+0x268>)
 8001356:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <fsm_manual_run+0x24c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <fsm_manual_run+0x268>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <fsm_manual_run+0x26c>)
 8001364:	6013      	str	r3, [r2, #0]
		}
		break;
 8001366:	e094      	b.n	8001492 <fsm_manual_run+0x32a>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8001368:	200c      	movs	r0, #12
 800136a:	f7ff faf1 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <fsm_manual_run+0x248>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d102      	bne.n	800137c <fsm_manual_run+0x214>
			setTimer2(100);
 8001376:	2064      	movs	r0, #100	; 0x64
 8001378:	f000 fad4 	bl	8001924 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fa29 	bl	80007d4 <isButtonPressed>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <fsm_manual_run+0x226>
			status = INIT;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <fsm_manual_run+0x244>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fa20 	bl	80007d4 <isButtonPressed>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d07d      	beq.n	8001496 <fsm_manual_run+0x32e>
			status = GREEN_MAN_MODIFY;
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <fsm_manual_run+0x244>)
 800139c:	220f      	movs	r2, #15
 800139e:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <fsm_manual_run+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <fsm_manual_run+0x250>)
 80013a6:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 80013a8:	e075      	b.n	8001496 <fsm_manual_run+0x32e>
 80013aa:	bf00      	nop
 80013ac:	200000b8 	.word	0x200000b8
 80013b0:	20000138 	.word	0x20000138
 80013b4:	20000018 	.word	0x20000018
 80013b8:	2000015c 	.word	0x2000015c
 80013bc:	080052b0 	.word	0x080052b0
 80013c0:	200000c8 	.word	0x200000c8
 80013c4:	2000025c 	.word	0x2000025c
 80013c8:	080052c4 	.word	0x080052c4
 80013cc:	080052d8 	.word	0x080052d8
 80013d0:	2000001c 	.word	0x2000001c
 80013d4:	20000020 	.word	0x20000020
 80013d8:	080052e0 	.word	0x080052e0
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 80013dc:	200c      	movs	r0, #12
 80013de:	f7ff fab7 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff f9f6 	bl	80007d4 <isButtonPressed>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <fsm_manual_run+0x28c>
			status = GREEN_MAN;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <fsm_manual_run+0x33c>)
 80013f0:	220c      	movs	r2, #12
 80013f2:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff f9ed 	bl	80007d4 <isButtonPressed>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d01d      	beq.n	800143c <fsm_manual_run+0x2d4>
			timerMan++;
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <fsm_manual_run+0x340>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <fsm_manual_run+0x340>)
 8001408:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <fsm_manual_run+0x340>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	461a      	mov	r2, r3
 8001410:	4926      	ldr	r1, [pc, #152]	; (80014ac <fsm_manual_run+0x344>)
 8001412:	4827      	ldr	r0, [pc, #156]	; (80014b0 <fsm_manual_run+0x348>)
 8001414:	f003 fa9e 	bl	8004954 <siprintf>
 8001418:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	b29a      	uxth	r2, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	4923      	ldr	r1, [pc, #140]	; (80014b0 <fsm_manual_run+0x348>)
 8001424:	4823      	ldr	r0, [pc, #140]	; (80014b4 <fsm_manual_run+0x34c>)
 8001426:	f002 fc8f 	bl	8003d48 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <fsm_manual_run+0x340>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <fsm_manual_run+0x350>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	db02      	blt.n	800143c <fsm_manual_run+0x2d4>
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <fsm_manual_run+0x340>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 800143c:	2002      	movs	r0, #2
 800143e:	f7ff f9c9 	bl	80007d4 <isButtonPressed>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d028      	beq.n	800149a <fsm_manual_run+0x332>
			status = INIT;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <fsm_manual_run+0x33c>)
 800144a:	2201      	movs	r2, #1
 800144c:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <fsm_manual_run+0x354>)
 8001450:	491b      	ldr	r1, [pc, #108]	; (80014c0 <fsm_manual_run+0x358>)
 8001452:	4817      	ldr	r0, [pc, #92]	; (80014b0 <fsm_manual_run+0x348>)
 8001454:	f003 fa7e 	bl	8004954 <siprintf>
 8001458:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	b29a      	uxth	r2, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	4913      	ldr	r1, [pc, #76]	; (80014b0 <fsm_manual_run+0x348>)
 8001464:	4813      	ldr	r0, [pc, #76]	; (80014b4 <fsm_manual_run+0x34c>)
 8001466:	f002 fc6f 	bl	8003d48 <HAL_UART_Transmit>
			greenTimer = timerMan;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <fsm_manual_run+0x340>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a15      	ldr	r2, [pc, #84]	; (80014c4 <fsm_manual_run+0x35c>)
 8001470:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <fsm_manual_run+0x350>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <fsm_manual_run+0x35c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <fsm_manual_run+0x360>)
 800147e:	6013      	str	r3, [r2, #0]
		}
		break;
 8001480:	e00b      	b.n	800149a <fsm_manual_run+0x332>
	default:
		break;
 8001482:	bf00      	nop
 8001484:	e00a      	b.n	800149c <fsm_manual_run+0x334>
		break;
 8001486:	bf00      	nop
 8001488:	e008      	b.n	800149c <fsm_manual_run+0x334>
		break;
 800148a:	bf00      	nop
 800148c:	e006      	b.n	800149c <fsm_manual_run+0x334>
		break;
 800148e:	bf00      	nop
 8001490:	e004      	b.n	800149c <fsm_manual_run+0x334>
		break;
 8001492:	bf00      	nop
 8001494:	e002      	b.n	800149c <fsm_manual_run+0x334>
		break;
 8001496:	bf00      	nop
 8001498:	e000      	b.n	800149c <fsm_manual_run+0x334>
		break;
 800149a:	bf00      	nop
	}
};
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200000b8 	.word	0x200000b8
 80014a8:	2000015c 	.word	0x2000015c
 80014ac:	080052f4 	.word	0x080052f4
 80014b0:	200000c8 	.word	0x200000c8
 80014b4:	2000025c 	.word	0x2000025c
 80014b8:	20000018 	.word	0x20000018
 80014bc:	080052c4 	.word	0x080052c4
 80014c0:	080052d8 	.word	0x080052d8
 80014c4:	20000020 	.word	0x20000020
 80014c8:	2000001c 	.word	0x2000001c

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d0:	f000 fc7e 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d4:	f000 f822 	bl	800151c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d8:	f000 f952 	bl	8001780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014dc:	f000 f926 	bl	800172c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80014e0:	f000 f85e 	bl	80015a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014e4:	f000 f8aa 	bl	800163c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <main+0x44>)
 80014ea:	f001 fcc7 	bl	8002e7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014ee:	2100      	movs	r1, #0
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <main+0x48>)
 80014f2:	f001 fd6d 	bl	8002fd0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 80014f6:	f7ff f931 	bl	800075c <initStateForButton>
  status = INIT;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <main+0x4c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8001500:	f7ff fba2 	bl	8000c48 <fsm_automatic_run>
	  fsm_manual_run();
 8001504:	f7ff fe30 	bl	8001168 <fsm_manual_run>
	  fsm_pedestrian();
 8001508:	f7ff fb6e 	bl	8000be8 <fsm_pedestrian>
  {
 800150c:	e7f8      	b.n	8001500 <main+0x34>
 800150e:	bf00      	nop
 8001510:	20000214 	.word	0x20000214
 8001514:	200001cc 	.word	0x200001cc
 8001518:	200000b8 	.word	0x200000b8

0800151c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	; 0x40
 8001520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	2228      	movs	r2, #40	; 0x28
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fa0a 	bl	8004944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]
 800153c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001542:	2301      	movs	r3, #1
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001546:	2310      	movs	r3, #16
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	2302      	movs	r3, #2
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800154e:	2300      	movs	r3, #0
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001552:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4618      	mov	r0, r3
 800155e:	f001 f82f 	bl	80025c0 <HAL_RCC_OscConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001568:	f000 f9c2 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156c:	230f      	movs	r3, #15
 800156e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001570:	2302      	movs	r3, #2
 8001572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fa9a 	bl	8002ac0 <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001592:	f000 f9ad 	bl	80018f0 <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3740      	adds	r7, #64	; 0x40
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM2_Init+0x98>)
 80015be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_TIM2_Init+0x98>)
 80015c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_TIM2_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_TIM2_Init+0x98>)
 80015d4:	f44f 721c 	mov.w	r2, #624	; 0x270
 80015d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_TIM2_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <MX_TIM2_Init+0x98>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <MX_TIM2_Init+0x98>)
 80015e8:	f001 fbf8 	bl	8002ddc <HAL_TIM_Base_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015f2:	f000 f97d 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_TIM2_Init+0x98>)
 8001604:	f001 ff50 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800160e:	f000 f96f 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800161a:	463b      	mov	r3, r7
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_TIM2_Init+0x98>)
 8001620:	f002 fad2 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 f961 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000214 	.word	0x20000214

0800163c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	f107 0320 	add.w	r3, r7, #32
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	615a      	str	r2, [r3, #20]
 800166a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <MX_TIM3_Init+0xe8>)
 800166e:	4a2e      	ldr	r2, [pc, #184]	; (8001728 <MX_TIM3_Init+0xec>)
 8001670:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <MX_TIM3_Init+0xe8>)
 8001674:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001678:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_TIM3_Init+0xe8>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 624;
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_TIM3_Init+0xe8>)
 8001682:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001686:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b26      	ldr	r3, [pc, #152]	; (8001724 <MX_TIM3_Init+0xe8>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_TIM3_Init+0xe8>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001694:	4823      	ldr	r0, [pc, #140]	; (8001724 <MX_TIM3_Init+0xe8>)
 8001696:	f001 fba1 	bl	8002ddc <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016a0:	f000 f926 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	4619      	mov	r1, r3
 80016b0:	481c      	ldr	r0, [pc, #112]	; (8001724 <MX_TIM3_Init+0xe8>)
 80016b2:	f001 fef9 	bl	80034a8 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016bc:	f000 f918 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016c0:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_TIM3_Init+0xe8>)
 80016c2:	f001 fc2d 	bl	8002f20 <HAL_TIM_PWM_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016cc:	f000 f910 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d8:	f107 0320 	add.w	r3, r7, #32
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	; (8001724 <MX_TIM3_Init+0xe8>)
 80016e0:	f002 fa72 	bl	8003bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016ea:	f000 f901 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM3_Init+0xe8>)
 8001706:	f001 fe0d 	bl	8003324 <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001710:	f000 f8ee 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM3_Init+0xe8>)
 8001716:	f000 fa3d 	bl	8001b94 <HAL_TIM_MspPostInit>

}
 800171a:	bf00      	nop
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200001cc 	.word	0x200001cc
 8001728:	40000400 	.word	0x40000400

0800172c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART2_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800173c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART2_UART_Init+0x4c>)
 8001764:	f002 faa0 	bl	8003ca8 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f000 f8bf 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000025c 	.word	0x2000025c
 800177c:	40004400 	.word	0x40004400

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <MX_GPIO_Init+0x144>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <MX_GPIO_Init+0x144>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	6193      	str	r3, [r2, #24]
 80017a0:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0310 	and.w	r3, r3, #16
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a44      	ldr	r2, [pc, #272]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c4:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a3e      	ldr	r2, [pc, #248]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a38      	ldr	r2, [pc, #224]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b36      	ldr	r3, [pc, #216]	; (80018c4 <MX_GPIO_Init+0x144>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80017fa:	4833      	ldr	r0, [pc, #204]	; (80018c8 <MX_GPIO_Init+0x148>)
 80017fc:	f000 fea5 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001806:	4831      	ldr	r0, [pc, #196]	; (80018cc <MX_GPIO_Init+0x14c>)
 8001808:	f000 fe9f 	bl	800254a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <MX_GPIO_Init+0x150>)
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	4619      	mov	r1, r3
 8001820:	482c      	ldr	r0, [pc, #176]	; (80018d4 <MX_GPIO_Init+0x154>)
 8001822:	f000 fcf7 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	4823      	ldr	r0, [pc, #140]	; (80018c8 <MX_GPIO_Init+0x148>)
 800183a:	f000 fceb 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 800183e:	2312      	movs	r3, #18
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001846:	2301      	movs	r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	481d      	ldr	r0, [pc, #116]	; (80018c8 <MX_GPIO_Init+0x148>)
 8001852:	f000 fcdf 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8001856:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800185a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185c:	2301      	movs	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2302      	movs	r3, #2
 8001866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4619      	mov	r1, r3
 800186e:	4816      	ldr	r0, [pc, #88]	; (80018c8 <MX_GPIO_Init+0x148>)
 8001870:	f000 fcd0 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8001874:	2301      	movs	r3, #1
 8001876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4619      	mov	r1, r3
 8001886:	4811      	ldr	r0, [pc, #68]	; (80018cc <MX_GPIO_Init+0x14c>)
 8001888:	f000 fcc4 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800188c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2302      	movs	r3, #2
 800189c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	4619      	mov	r1, r3
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <MX_GPIO_Init+0x14c>)
 80018a6:	f000 fcb5 	bl	8002214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2028      	movs	r0, #40	; 0x28
 80018b0:	f000 fbc7 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018b4:	2028      	movs	r0, #40	; 0x28
 80018b6:	f000 fbe0 	bl	800207a <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3720      	adds	r7, #32
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	10110000 	.word	0x10110000
 80018d4:	40011000 	.word	0x40011000

080018d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	 timerRun();
 80018e0:	f000 f870 	bl	80019c4 <timerRun>
	 getKeyInput();
 80018e4:	f7fe ffa0 	bl	8000828 <getKeyInput>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <setTimer1>:
int timer6_counter = 0;
int timer6_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001904:	4a05      	ldr	r2, [pc, #20]	; (800191c <setTimer1+0x20>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <setTimer1+0x24>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000012c 	.word	0x2000012c
 8001920:	20000130 	.word	0x20000130

08001924 <setTimer2>:

void setTimer2(int duration) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 800192c:	4a05      	ldr	r2, [pc, #20]	; (8001944 <setTimer2+0x20>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <setTimer2+0x24>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000134 	.word	0x20000134
 8001948:	20000138 	.word	0x20000138

0800194c <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <setTimer4+0x20>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <setTimer4+0x24>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000144 	.word	0x20000144
 8001970:	20000148 	.word	0x20000148

08001974 <setTimer5>:

void setTimer5(int duration) {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800197c:	4a05      	ldr	r2, [pc, #20]	; (8001994 <setTimer5+0x20>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <setTimer5+0x24>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	2000014c 	.word	0x2000014c
 8001998:	20000150 	.word	0x20000150

0800199c <setTimer6>:
void setTimer6(int duration) {
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <setTimer6+0x20>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <setTimer6+0x24>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000154 	.word	0x20000154
 80019c0:	20000158 	.word	0x20000158

080019c4 <timerRun>:
void timerRun() {
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <timerRun+0xcc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd0b      	ble.n	80019e8 <timerRun+0x24>
		timer1_counter--;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <timerRun+0xcc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <timerRun+0xcc>)
 80019d8:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <timerRun+0xcc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dc02      	bgt.n	80019e8 <timerRun+0x24>
			timer1_flag = 1;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <timerRun+0xd0>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <timerRun+0xd4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dd0b      	ble.n	8001a08 <timerRun+0x44>
		timer2_counter--;
 80019f0:	4b29      	ldr	r3, [pc, #164]	; (8001a98 <timerRun+0xd4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <timerRun+0xd4>)
 80019f8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 80019fa:	4b27      	ldr	r3, [pc, #156]	; (8001a98 <timerRun+0xd4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	dc02      	bgt.n	8001a08 <timerRun+0x44>
			timer2_flag = 1;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <timerRun+0xd8>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <timerRun+0xdc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd0b      	ble.n	8001a28 <timerRun+0x64>
		timer3_counter--;
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <timerRun+0xdc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a22      	ldr	r2, [pc, #136]	; (8001aa0 <timerRun+0xdc>)
 8001a18:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <timerRun+0xdc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dc02      	bgt.n	8001a28 <timerRun+0x64>
			timer3_flag = 1;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <timerRun+0xe0>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8001a28:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <timerRun+0xe4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dd0b      	ble.n	8001a48 <timerRun+0x84>
		timer4_counter--;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <timerRun+0xe4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <timerRun+0xe4>)
 8001a38:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <timerRun+0xe4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	dc02      	bgt.n	8001a48 <timerRun+0x84>
			timer4_flag = 1;
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <timerRun+0xe8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <timerRun+0xec>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	dd0b      	ble.n	8001a68 <timerRun+0xa4>
		timer5_counter--;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <timerRun+0xec>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <timerRun+0xec>)
 8001a58:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <timerRun+0xec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dc02      	bgt.n	8001a68 <timerRun+0xa4>
			timer5_flag = 1;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <timerRun+0xf0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0) {
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <timerRun+0xf4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd0b      	ble.n	8001a88 <timerRun+0xc4>
			timer6_counter--;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <timerRun+0xf4>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <timerRun+0xf4>)
 8001a78:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0) {
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <timerRun+0xf4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dc02      	bgt.n	8001a88 <timerRun+0xc4>
				timer6_flag = 1;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <timerRun+0xf8>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
			}
	}
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	2000012c 	.word	0x2000012c
 8001a94:	20000130 	.word	0x20000130
 8001a98:	20000134 	.word	0x20000134
 8001a9c:	20000138 	.word	0x20000138
 8001aa0:	2000013c 	.word	0x2000013c
 8001aa4:	20000140 	.word	0x20000140
 8001aa8:	20000144 	.word	0x20000144
 8001aac:	20000148 	.word	0x20000148
 8001ab0:	2000014c 	.word	0x2000014c
 8001ab4:	20000150 	.word	0x20000150
 8001ab8:	20000154 	.word	0x20000154
 8001abc:	20000158 	.word	0x20000158

08001ac0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_MspInit+0x5c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6193      	str	r3, [r2, #24]
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_MspInit+0x5c>)
 8001ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_MspInit+0x5c>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_MspInit+0x60>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_MspInit+0x60>)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000

08001b24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b34:	d114      	bne.n	8001b60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	61d3      	str	r3, [r2, #28]
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201c      	movs	r0, #28
 8001b54:	f000 fa75 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b58:	201c      	movs	r0, #28
 8001b5a:	f000 fa8e 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b5e:	e010      	b.n	8001b82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <HAL_TIM_Base_MspInit+0x6c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	61d3      	str	r3, [r2, #28]
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_TIM_Base_MspInit+0x68>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40000400 	.word	0x40000400

08001b94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <HAL_TIM_MspPostInit+0x58>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d117      	bne.n	8001be4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_TIM_MspPostInit+0x5c>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_TIM_MspPostInit+0x5c>)
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_TIM_MspPostInit+0x5c>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 8001bcc:	2340      	movs	r3, #64	; 0x40
 8001bce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <HAL_TIM_MspPostInit+0x60>)
 8001be0:	f000 fb18 	bl	8002214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010800 	.word	0x40010800

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0310 	add.w	r3, r7, #16
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_UART_MspInit+0x80>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d12b      	bne.n	8001c70 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c22:	61d3      	str	r3, [r2, #28]
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <HAL_UART_MspInit+0x84>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c48:	230c      	movs	r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_UART_MspInit+0x88>)
 8001c5c:	f000 fada 	bl	8002214 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2026      	movs	r0, #38	; 0x26
 8001c66:	f000 f9ec 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6a:	2026      	movs	r0, #38	; 0x26
 8001c6c:	f000 fa05 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40004400 	.word	0x40004400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010800 	.word	0x40010800

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <NMI_Handler+0x4>

08001c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8e:	e7fe      	b.n	8001c8e <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <MemManage_Handler+0x4>

08001c96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr

08001cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cca:	f000 f8c7 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <TIM2_IRQHandler+0x10>)
 8001cda:	f001 fa1b 	bl	8003114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000214 	.word	0x20000214

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <USART2_IRQHandler+0x10>)
 8001cee:	f002 f8af 	bl	8003e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000025c 	.word	0x2000025c

08001cfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d04:	f000 fc3a 	bl	800257c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	; (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f002 fdd8 	bl	80048f0 <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20005000 	.word	0x20005000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	20000160 	.word	0x20000160
 8001d74:	200002b8 	.word	0x200002b8

08001d78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d84:	f7ff fff8 	bl	8001d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001da0:	4c09      	ldr	r4, [pc, #36]	; (8001dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f002 fda5 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001db2:	f7ff fb8b 	bl	80014cc <main>
  bx lr
 8001db6:	4770      	bx	lr
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001dc0:	08005370 	.word	0x08005370
  ldr r2, =_sbss
 8001dc4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001dc8:	200002b8 	.word	0x200002b8

08001dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC1_2_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_Init+0x28>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_Init+0x28>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f923 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 f808 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fe68 	bl	8001ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x54>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x58>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f93b 	bl	8002096 <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00e      	b.n	8001e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d80a      	bhi.n	8001e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295
 8001e38:	f000 f903 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <HAL_InitTick+0x5c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000024 	.word	0x20000024
 8001e54:	2000002c 	.word	0x2000002c
 8001e58:	20000028 	.word	0x20000028

08001e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_IncTick+0x1c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_IncTick+0x20>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_IncTick+0x20>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	2000002c 	.word	0x2000002c
 8001e7c:	200002a4 	.word	0x200002a4

08001e80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b02      	ldr	r3, [pc, #8]	; (8001e90 <HAL_GetTick+0x10>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	200002a4 	.word	0x200002a4

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4906      	ldr	r1, [pc, #24]	; (8001f2c <__NVIC_EnableIRQ+0x34>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db0a      	blt.n	8001f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	490c      	ldr	r1, [pc, #48]	; (8001f7c <__NVIC_SetPriority+0x4c>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	0112      	lsls	r2, r2, #4
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	440b      	add	r3, r1
 8001f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f58:	e00a      	b.n	8001f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4908      	ldr	r1, [pc, #32]	; (8001f80 <__NVIC_SetPriority+0x50>)
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	3b04      	subs	r3, #4
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	761a      	strb	r2, [r3, #24]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000e100 	.word	0xe000e100
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f1c3 0307 	rsb	r3, r3, #7
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	bf28      	it	cs
 8001fa2:	2304      	movcs	r3, #4
 8001fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	2b06      	cmp	r3, #6
 8001fac:	d902      	bls.n	8001fb4 <NVIC_EncodePriority+0x30>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	e000      	b.n	8001fb6 <NVIC_EncodePriority+0x32>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	4313      	orrs	r3, r2
         );
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff90 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff2d 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff42 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff90 	bl	8001f84 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5f 	bl	8001f30 <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff35 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d008      	beq.n	80020d8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2204      	movs	r2, #4
 80020ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e020      	b.n	800211a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020e 	bic.w	r2, r2, #14
 80020e6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	2101      	movs	r1, #1
 8002102:	fa01 f202 	lsl.w	r2, r1, r2
 8002106:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002118:	7bfb      	ldrb	r3, [r7, #15]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d005      	beq.n	8002148 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2204      	movs	r2, #4
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	e051      	b.n	80021ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 020e 	bic.w	r2, r2, #14
 8002156:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <HAL_DMA_Abort_IT+0xd4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d029      	beq.n	80021c6 <HAL_DMA_Abort_IT+0xa2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_DMA_Abort_IT+0xd8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d022      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x9e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <HAL_DMA_Abort_IT+0xdc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d01a      	beq.n	80021bc <HAL_DMA_Abort_IT+0x98>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_DMA_Abort_IT+0xe0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d012      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x92>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <HAL_DMA_Abort_IT+0xe4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00a      	beq.n	80021b0 <HAL_DMA_Abort_IT+0x8c>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_DMA_Abort_IT+0xe8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <HAL_DMA_Abort_IT+0x86>
 80021a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021a8:	e00e      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ae:	e00b      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021b4:	e008      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021ba:	e005      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c0:	e002      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021c2:	2310      	movs	r3, #16
 80021c4:	e000      	b.n	80021c8 <HAL_DMA_Abort_IT+0xa4>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_DMA_Abort_IT+0xec>)
 80021ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
    } 
  }
  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40020008 	.word	0x40020008
 80021fc:	4002001c 	.word	0x4002001c
 8002200:	40020030 	.word	0x40020030
 8002204:	40020044 	.word	0x40020044
 8002208:	40020058 	.word	0x40020058
 800220c:	4002006c 	.word	0x4002006c
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b08b      	sub	sp, #44	; 0x2c
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	e169      	b.n	80024fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002228:	2201      	movs	r2, #1
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	f040 8158 	bne.w	80024f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	4a9a      	ldr	r2, [pc, #616]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d05e      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002250:	4a98      	ldr	r2, [pc, #608]	; (80024b4 <HAL_GPIO_Init+0x2a0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d875      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002256:	4a98      	ldr	r2, [pc, #608]	; (80024b8 <HAL_GPIO_Init+0x2a4>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d058      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 800225c:	4a96      	ldr	r2, [pc, #600]	; (80024b8 <HAL_GPIO_Init+0x2a4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d86f      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002262:	4a96      	ldr	r2, [pc, #600]	; (80024bc <HAL_GPIO_Init+0x2a8>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d052      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002268:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_GPIO_Init+0x2a8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d869      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800226e:	4a94      	ldr	r2, [pc, #592]	; (80024c0 <HAL_GPIO_Init+0x2ac>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d04c      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002274:	4a92      	ldr	r2, [pc, #584]	; (80024c0 <HAL_GPIO_Init+0x2ac>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d863      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800227a:	4a92      	ldr	r2, [pc, #584]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d046      	beq.n	800230e <HAL_GPIO_Init+0xfa>
 8002280:	4a90      	ldr	r2, [pc, #576]	; (80024c4 <HAL_GPIO_Init+0x2b0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d85d      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 8002286:	2b12      	cmp	r3, #18
 8002288:	d82a      	bhi.n	80022e0 <HAL_GPIO_Init+0xcc>
 800228a:	2b12      	cmp	r3, #18
 800228c:	d859      	bhi.n	8002342 <HAL_GPIO_Init+0x12e>
 800228e:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <HAL_GPIO_Init+0x80>)
 8002290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002294:	0800230f 	.word	0x0800230f
 8002298:	080022e9 	.word	0x080022e9
 800229c:	080022fb 	.word	0x080022fb
 80022a0:	0800233d 	.word	0x0800233d
 80022a4:	08002343 	.word	0x08002343
 80022a8:	08002343 	.word	0x08002343
 80022ac:	08002343 	.word	0x08002343
 80022b0:	08002343 	.word	0x08002343
 80022b4:	08002343 	.word	0x08002343
 80022b8:	08002343 	.word	0x08002343
 80022bc:	08002343 	.word	0x08002343
 80022c0:	08002343 	.word	0x08002343
 80022c4:	08002343 	.word	0x08002343
 80022c8:	08002343 	.word	0x08002343
 80022cc:	08002343 	.word	0x08002343
 80022d0:	08002343 	.word	0x08002343
 80022d4:	08002343 	.word	0x08002343
 80022d8:	080022f1 	.word	0x080022f1
 80022dc:	08002305 	.word	0x08002305
 80022e0:	4a79      	ldr	r2, [pc, #484]	; (80024c8 <HAL_GPIO_Init+0x2b4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d013      	beq.n	800230e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022e6:	e02c      	b.n	8002342 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e029      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	3304      	adds	r3, #4
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e024      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	3308      	adds	r3, #8
 8002300:	623b      	str	r3, [r7, #32]
          break;
 8002302:	e01f      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	330c      	adds	r3, #12
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e01a      	b.n	8002344 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002316:	2304      	movs	r3, #4
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e013      	b.n	8002344 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002324:	2308      	movs	r3, #8
 8002326:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	611a      	str	r2, [r3, #16]
          break;
 800232e:	e009      	b.n	8002344 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002330:	2308      	movs	r3, #8
 8002332:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	615a      	str	r2, [r3, #20]
          break;
 800233a:	e003      	b.n	8002344 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e000      	b.n	8002344 <HAL_GPIO_Init+0x130>
          break;
 8002342:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d801      	bhi.n	800234e <HAL_GPIO_Init+0x13a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	e001      	b.n	8002352 <HAL_GPIO_Init+0x13e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2bff      	cmp	r3, #255	; 0xff
 8002358:	d802      	bhi.n	8002360 <HAL_GPIO_Init+0x14c>
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	e002      	b.n	8002366 <HAL_GPIO_Init+0x152>
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3b08      	subs	r3, #8
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	210f      	movs	r1, #15
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	401a      	ands	r2, r3
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	431a      	orrs	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80b1 	beq.w	80024f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002394:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x2b8>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a40      	ldr	r2, [pc, #256]	; (80024d4 <HAL_GPIO_Init+0x2c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1ec>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3f      	ldr	r2, [pc, #252]	; (80024d8 <HAL_GPIO_Init+0x2c4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1e8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <HAL_GPIO_Init+0x2c8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1e4>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3d      	ldr	r2, [pc, #244]	; (80024e0 <HAL_GPIO_Init+0x2cc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1e0>
 80023f0:	2303      	movs	r3, #3
 80023f2:	e006      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e004      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_GPIO_Init+0x1ee>
 8002400:	2300      	movs	r3, #0
 8002402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002404:	f002 0203 	and.w	r2, r2, #3
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4093      	lsls	r3, r2
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002412:	492f      	ldr	r1, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x2bc>)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	492c      	ldr	r1, [pc, #176]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800243a:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	4928      	ldr	r1, [pc, #160]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002444:	4013      	ands	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	60cb      	str	r3, [r1, #12]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	491e      	ldr	r1, [pc, #120]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4918      	ldr	r1, [pc, #96]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	4914      	ldr	r1, [pc, #80]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d021      	beq.n	80024e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	490e      	ldr	r1, [pc, #56]	; (80024e4 <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e021      	b.n	80024f6 <HAL_GPIO_Init+0x2e2>
 80024b2:	bf00      	nop
 80024b4:	10320000 	.word	0x10320000
 80024b8:	10310000 	.word	0x10310000
 80024bc:	10220000 	.word	0x10220000
 80024c0:	10210000 	.word	0x10210000
 80024c4:	10120000 	.word	0x10120000
 80024c8:	10110000 	.word	0x10110000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40011400 	.word	0x40011400
 80024e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <HAL_GPIO_Init+0x304>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	f47f ae8e 	bne.w	8002228 <HAL_GPIO_Init+0x14>
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	372c      	adds	r7, #44	; 0x2c
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	887b      	ldrh	r3, [r7, #2]
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e001      	b.n	800253e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	807b      	strh	r3, [r7, #2]
 8002556:	4613      	mov	r3, r2
 8002558:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800255a:	787b      	ldrb	r3, [r7, #1]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002560:	887a      	ldrh	r2, [r7, #2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002566:	e003      	b.n	8002570 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	611a      	str	r2, [r3, #16]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
	...

0800257c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002586:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	88fb      	ldrh	r3, [r7, #6]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d006      	beq.n	80025a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002598:	88fb      	ldrh	r3, [r7, #6]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f806 	bl	80025ac <HAL_GPIO_EXTI_Callback>
  }
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40010400 	.word	0x40010400

080025ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e26c      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00c      	beq.n	8002606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d112      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b89      	ldr	r3, [pc, #548]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d06c      	beq.n	80026ec <HAL_RCC_OscConfig+0x12c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d168      	bne.n	80026ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e246      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x76>
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7f      	ldr	r2, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x98>
 800263e:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b78      	ldr	r3, [pc, #480]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a77      	ldr	r2, [pc, #476]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0xbc>
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a71      	ldr	r2, [pc, #452]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff fbf0 	bl	8001e80 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff fbec 	bl	8001e80 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1fa      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe4>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff fbdc 	bl	8001e80 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff fbd8 	bl	8001e80 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1e6      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x10c>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d063      	beq.n	80027c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1ba      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff fb91 	bl	8001e80 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff fb8d 	bl	8001e80 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e19b      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4927      	ldr	r1, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff fb70 	bl	8001e80 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7ff fb6c 	bl	8001e80 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e17a      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03a      	beq.n	8002844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7ff fb50 	bl	8001e80 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7ff fb4c 	bl	8001e80 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e15a      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f000 facc 	bl	8002da0 <RCC_Delay>
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7ff fb36 	bl	8001e80 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002816:	e00f      	b.n	8002838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7ff fb32 	bl	8001e80 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d908      	bls.n	8002838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e140      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	42420000 	.word	0x42420000
 8002834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b9e      	ldr	r3, [pc, #632]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e9      	bne.n	8002818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a6 	beq.w	800299e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b97      	ldr	r3, [pc, #604]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b94      	ldr	r3, [pc, #592]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a93      	ldr	r2, [pc, #588]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b91      	ldr	r3, [pc, #580]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b8e      	ldr	r3, [pc, #568]	; (8002ab8 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x4f8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a8a      	ldr	r2, [pc, #552]	; (8002ab8 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7ff faf3 	bl	8001e80 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7ff faef 	bl	8001e80 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0fd      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x4f8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x312>
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a7a      	ldr	r2, [pc, #488]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e02d      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x334>
 80028da:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a75      	ldr	r2, [pc, #468]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	e01c      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0x356>
 80028fc:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a6c      	ldr	r2, [pc, #432]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a69      	ldr	r2, [pc, #420]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 8002916:	4b67      	ldr	r3, [pc, #412]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a66      	ldr	r2, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a63      	ldr	r2, [pc, #396]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d015      	beq.n	8002962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff faa3 	bl	8001e80 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7ff fa9f 	bl	8001e80 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0ab      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ee      	beq.n	800293e <HAL_RCC_OscConfig+0x37e>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7ff fa8d 	bl	8001e80 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7ff fa89 	bl	8001e80 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e095      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a47      	ldr	r2, [pc, #284]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8081 	beq.w	8002aaa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d061      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d146      	bne.n	8002a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_RCC_OscConfig+0x4fc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7ff fa5d 	bl	8001e80 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7ff fa59 	bl	8001e80 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e067      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	492d      	ldr	r1, [pc, #180]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a19      	ldr	r1, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	430b      	orrs	r3, r1
 8002a16:	4927      	ldr	r1, [pc, #156]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_OscConfig+0x4fc>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7ff fa2d 	bl	8001e80 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7ff fa29 	bl	8001e80 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e037      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46a>
 8002a48:	e02f      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b1c      	ldr	r3, [pc, #112]	; (8002abc <HAL_RCC_OscConfig+0x4fc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff fa16 	bl	8001e80 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7ff fa12 	bl	8001e80 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e020      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x498>
 8002a76:	e018      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e013      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	42420060 	.word	0x42420060

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0d0      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d910      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b67      	ldr	r3, [pc, #412]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f023 0207 	bic.w	r2, r3, #7
 8002aea:	4965      	ldr	r1, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d040      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d115      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e073      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06b      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4936      	ldr	r1, [pc, #216]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7ff f966 	bl	8001e80 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7ff f962 	bl	8001e80 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e053      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b2d      	ldr	r3, [pc, #180]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d210      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1cc>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1d0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f8c4 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08005308 	.word	0x08005308
 8002c8c:	20000024 	.word	0x20000024
 8002c90:	20000028 	.word	0x20000028

08002c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d002      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x30>
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d003      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x36>
 8002cc2:	e027      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cc6:	613b      	str	r3, [r7, #16]
      break;
 8002cc8:	e027      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	0c9b      	lsrs	r3, r3, #18
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a17      	ldr	r2, [pc, #92]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0c5b      	lsrs	r3, r3, #17
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	4a11      	ldr	r2, [pc, #68]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cf6:	fb02 f203 	mul.w	r2, r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e004      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a0c      	ldr	r2, [pc, #48]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	613b      	str	r3, [r7, #16]
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d16:	613b      	str	r3, [r7, #16]
      break;
 8002d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1a:	693b      	ldr	r3, [r7, #16]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	007a1200 	.word	0x007a1200
 8002d30:	08005320 	.word	0x08005320
 8002d34:	08005330 	.word	0x08005330
 8002d38:	003d0900 	.word	0x003d0900

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	20000024 	.word	0x20000024

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff2 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08005318 	.word	0x08005318

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffde 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	0adb      	lsrs	r3, r3, #11
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08005318 	.word	0x08005318

08002da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <RCC_Delay+0x34>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <RCC_Delay+0x38>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0a5b      	lsrs	r3, r3, #9
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dbc:	bf00      	nop
  }
  while (Delay --);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	60fa      	str	r2, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <RCC_Delay+0x1c>
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000024 	.word	0x20000024
 8002dd8:	10624dd3 	.word	0x10624dd3

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e041      	b.n	8002e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fe8e 	bl	8001b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fc30 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e03a      	b.n	8002f0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_TIM_Base_Start_IT+0x98>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d009      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d111      	bne.n	8002ef8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d010      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	e007      	b.n	8002f08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800

08002f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e041      	b.n	8002fb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f839 	bl	8002fbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 fb8e 	bl	8003680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_TIM_PWM_Start+0x24>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	e022      	b.n	800303a <HAL_TIM_PWM_Start+0x6a>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d109      	bne.n	800300e <HAL_TIM_PWM_Start+0x3e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	e015      	b.n	800303a <HAL_TIM_PWM_Start+0x6a>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d109      	bne.n	8003028 <HAL_TIM_PWM_Start+0x58>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e008      	b.n	800303a <HAL_TIM_PWM_Start+0x6a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e05e      	b.n	8003100 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d104      	bne.n	8003052 <HAL_TIM_PWM_Start+0x82>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003050:	e013      	b.n	800307a <HAL_TIM_PWM_Start+0xaa>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b04      	cmp	r3, #4
 8003056:	d104      	bne.n	8003062 <HAL_TIM_PWM_Start+0x92>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003060:	e00b      	b.n	800307a <HAL_TIM_PWM_Start+0xaa>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b08      	cmp	r3, #8
 8003066:	d104      	bne.n	8003072 <HAL_TIM_PWM_Start+0xa2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003070:	e003      	b.n	800307a <HAL_TIM_PWM_Start+0xaa>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2201      	movs	r2, #1
 8003080:	6839      	ldr	r1, [r7, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fd7c 	bl	8003b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_TIM_PWM_Start+0x138>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d107      	bne.n	80030a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_TIM_PWM_Start+0x138>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_TIM_PWM_Start+0xfa>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d009      	beq.n	80030ca <HAL_TIM_PWM_Start+0xfa>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a14      	ldr	r2, [pc, #80]	; (800310c <HAL_TIM_PWM_Start+0x13c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIM_PWM_Start+0xfa>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a12      	ldr	r2, [pc, #72]	; (8003110 <HAL_TIM_PWM_Start+0x140>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d111      	bne.n	80030ee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d010      	beq.n	80030fe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ec:	e007      	b.n	80030fe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40000400 	.word	0x40000400
 8003110:	40000800 	.word	0x40000800

08003114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d122      	bne.n	8003170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b02      	cmp	r3, #2
 8003136:	d11b      	bne.n	8003170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0202 	mvn.w	r2, #2
 8003140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fa76 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa69 	bl	8003636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fa78 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d122      	bne.n	80031c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0204 	mvn.w	r2, #4
 8003194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fa4c 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 80031b0:	e005      	b.n	80031be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fa3f 	bl	8003636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fa4e 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d122      	bne.n	8003218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d11b      	bne.n	8003218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0208 	mvn.w	r2, #8
 80031e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2204      	movs	r2, #4
 80031ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fa22 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa15 	bl	8003636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 fa24 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b10      	cmp	r3, #16
 8003224:	d122      	bne.n	800326c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b10      	cmp	r3, #16
 8003232:	d11b      	bne.n	800326c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0210 	mvn.w	r2, #16
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2208      	movs	r2, #8
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f9f8 	bl	8003648 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9eb 	bl	8003636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f9fa 	bl	800365a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0201 	mvn.w	r2, #1
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7fe fb20 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b80      	cmp	r3, #128	; 0x80
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fce9 	bl	8003c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b40      	cmp	r3, #64	; 0x40
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9be 	bl	800366c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b20      	cmp	r3, #32
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0220 	mvn.w	r2, #32
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fcb4 	bl	8003c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800333e:	2302      	movs	r3, #2
 8003340:	e0ae      	b.n	80034a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b0c      	cmp	r3, #12
 800334e:	f200 809f 	bhi.w	8003490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003352:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	0800338d 	.word	0x0800338d
 800335c:	08003491 	.word	0x08003491
 8003360:	08003491 	.word	0x08003491
 8003364:	08003491 	.word	0x08003491
 8003368:	080033cd 	.word	0x080033cd
 800336c:	08003491 	.word	0x08003491
 8003370:	08003491 	.word	0x08003491
 8003374:	08003491 	.word	0x08003491
 8003378:	0800340f 	.word	0x0800340f
 800337c:	08003491 	.word	0x08003491
 8003380:	08003491 	.word	0x08003491
 8003384:	08003491 	.word	0x08003491
 8003388:	0800344f 	.word	0x0800344f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	4618      	mov	r0, r3
 8003394:	f000 f9d6 	bl	8003744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0208 	orr.w	r2, r2, #8
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	619a      	str	r2, [r3, #24]
      break;
 80033ca:	e064      	b.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fa1c 	bl	8003810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	619a      	str	r2, [r3, #24]
      break;
 800340c:	e043      	b.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	4618      	mov	r0, r3
 8003416:	f000 fa65 	bl	80038e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0208 	orr.w	r2, r2, #8
 8003428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0204 	bic.w	r2, r2, #4
 8003438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	69d9      	ldr	r1, [r3, #28]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	61da      	str	r2, [r3, #28]
      break;
 800344c:	e023      	b.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 faaf 	bl	80039b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69d9      	ldr	r1, [r3, #28]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	61da      	str	r2, [r3, #28]
      break;
 800348e:	e002      	b.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
      break;
 8003494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800349e:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_ConfigClockSource+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0b4      	b.n	800362e <HAL_TIM_ConfigClockSource+0x186>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fc:	d03e      	beq.n	800357c <HAL_TIM_ConfigClockSource+0xd4>
 80034fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003502:	f200 8087 	bhi.w	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 8003506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350a:	f000 8086 	beq.w	800361a <HAL_TIM_ConfigClockSource+0x172>
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003512:	d87f      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b70      	cmp	r3, #112	; 0x70
 8003516:	d01a      	beq.n	800354e <HAL_TIM_ConfigClockSource+0xa6>
 8003518:	2b70      	cmp	r3, #112	; 0x70
 800351a:	d87b      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b60      	cmp	r3, #96	; 0x60
 800351e:	d050      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003520:	2b60      	cmp	r3, #96	; 0x60
 8003522:	d877      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 8003524:	2b50      	cmp	r3, #80	; 0x50
 8003526:	d03c      	beq.n	80035a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003528:	2b50      	cmp	r3, #80	; 0x50
 800352a:	d873      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d058      	beq.n	80035e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d86f      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 8003534:	2b30      	cmp	r3, #48	; 0x30
 8003536:	d064      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 8003538:	2b30      	cmp	r3, #48	; 0x30
 800353a:	d86b      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 800353c:	2b20      	cmp	r3, #32
 800353e:	d060      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 8003540:	2b20      	cmp	r3, #32
 8003542:	d867      	bhi.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05c      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 8003548:	2b10      	cmp	r3, #16
 800354a:	d05a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	e062      	b.n	8003614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6899      	ldr	r1, [r3, #8]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f000 faf0 	bl	8003b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	609a      	str	r2, [r3, #8]
      break;
 800357a:	e04f      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f000 fad9 	bl	8003b42 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800359e:	609a      	str	r2, [r3, #8]
      break;
 80035a0:	e03c      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6859      	ldr	r1, [r3, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f000 fa50 	bl	8003a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2150      	movs	r1, #80	; 0x50
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 faa7 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80035c0:	e02c      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f000 fa6e 	bl	8003ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2160      	movs	r1, #96	; 0x60
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fa97 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80035e0:	e01c      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f000 fa30 	bl	8003a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2140      	movs	r1, #64	; 0x40
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fa87 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003600:	e00c      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4619      	mov	r1, r3
 800360c:	4610      	mov	r0, r2
 800360e:	f000 fa7e 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003612:	e003      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e000      	b.n	800361c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800361a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
	...

08003680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a29      	ldr	r2, [pc, #164]	; (8003738 <TIM_Base_SetConfig+0xb8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <TIM_Base_SetConfig+0x30>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369e:	d007      	beq.n	80036b0 <TIM_Base_SetConfig+0x30>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a26      	ldr	r2, [pc, #152]	; (800373c <TIM_Base_SetConfig+0xbc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_Base_SetConfig+0x30>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <TIM_Base_SetConfig+0xc0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d108      	bne.n	80036c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <TIM_Base_SetConfig+0xb8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <TIM_Base_SetConfig+0x62>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d0:	d007      	beq.n	80036e2 <TIM_Base_SetConfig+0x62>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <TIM_Base_SetConfig+0xbc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <TIM_Base_SetConfig+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <TIM_Base_SetConfig+0xc0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d108      	bne.n	80036f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <TIM_Base_SetConfig+0xb8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d103      	bne.n	8003728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	615a      	str	r2, [r3, #20]
}
 800372e:	bf00      	nop
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800

08003744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	f023 0201 	bic.w	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f023 0302 	bic.w	r3, r3, #2
 800378c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <TIM_OC1_SetConfig+0xc8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10c      	bne.n	80037ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0308 	bic.w	r3, r3, #8
 80037a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <TIM_OC1_SetConfig+0xc8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d111      	bne.n	80037e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	621a      	str	r2, [r3, #32]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00

08003810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 0210 	bic.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800383e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0320 	bic.w	r3, r3, #32
 800385a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <TIM_OC2_SetConfig+0xd0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d10d      	bne.n	800388c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800388a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a14      	ldr	r2, [pc, #80]	; (80038e0 <TIM_OC2_SetConfig+0xd0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d113      	bne.n	80038bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800389a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	621a      	str	r2, [r3, #32]
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00

080038e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800392c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <TIM_OC3_SetConfig+0xd0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10d      	bne.n	800395e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800395c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <TIM_OC3_SetConfig+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d113      	bne.n	800398e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800396c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40012c00 	.word	0x40012c00

080039b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <TIM_OC4_SetConfig+0x98>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d109      	bne.n	8003a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	621a      	str	r2, [r3, #32]
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00

08003a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f023 0201 	bic.w	r2, r3, #1
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f023 030a 	bic.w	r3, r3, #10
 8003a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	621a      	str	r2, [r3, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	371c      	adds	r7, #28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	f023 0210 	bic.w	r2, r3, #16
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	031b      	lsls	r3, r3, #12
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f043 0307 	orr.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	609a      	str	r2, [r3, #8]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2201      	movs	r2, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a1a      	ldr	r2, [r3, #32]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a1a      	ldr	r2, [r3, #32]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e046      	b.n	8003c6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d00e      	beq.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2c:	d009      	beq.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d004      	beq.n	8003c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a10      	ldr	r2, [pc, #64]	; (8003c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10c      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40000400 	.word	0x40000400
 8003c80:	40000800 	.word	0x40000800

08003c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e042      	b.n	8003d40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd ff92 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fd71 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d16d      	bne.n	8003e44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_UART_Transmit+0x2c>
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e066      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2221      	movs	r2, #33	; 0x21
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d86:	f7fe f87b 	bl	8001e80 <HAL_GetTick>
 8003d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	88fa      	ldrh	r2, [r7, #6]
 8003d90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d108      	bne.n	8003db4 <HAL_UART_Transmit+0x6c>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dbc:	e02a      	b.n	8003e14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 faf9 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e036      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	3302      	adds	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	e007      	b.n	8003e06 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	781a      	ldrb	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	3301      	adds	r3, #1
 8003e04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1cf      	bne.n	8003dbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	2140      	movs	r1, #64	; 0x40
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 fac9 	bl	80043c0 <UART_WaitOnFlagUntilTimeout>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e006      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e44:	2302      	movs	r3, #2
  }
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ba      	sub	sp, #232	; 0xe8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10f      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fbd1 	bl	8004656 <UART_Receive_IT>
      return;
 8003eb4:	e25b      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80de 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
 8003ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80d1 	beq.w	800407c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	f043 0201 	orr.w	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3e:	f043 0204 	orr.w	r2, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d011      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d105      	bne.n	8003f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f043 0208 	orr.w	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 81f2 	beq.w	8004364 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
 8003f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fb5c 	bl	8004656 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <HAL_UART_IRQHandler+0x17a>
 8003fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04f      	beq.n	800406a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa66 	bl	800449c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d041      	beq.n	8004062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3314      	adds	r3, #20
 8004006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1d9      	bne.n	8003fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	4a7e      	ldr	r2, [pc, #504]	; (8004230 <HAL_UART_IRQHandler+0x3e0>)
 8004038:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe f870 	bl	8002124 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00e      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f99c 	bl	8004398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00a      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f998 	bl	8004398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e006      	b.n	8004078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f994 	bl	8004398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004076:	e175      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	bf00      	nop
    return;
 800407a:	e173      	b.n	8004364 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 814f 	bne.w	8004324 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8148 	beq.w	8004324 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8141 	beq.w	8004324 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a2:	2300      	movs	r3, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 80b6 	beq.w	8004234 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8145 	beq.w	8004368 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	429a      	cmp	r2, r3
 80040e8:	f080 813e 	bcs.w	8004368 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	f000 8088 	beq.w	8004210 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	330c      	adds	r3, #12
 8004106:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800411e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800412c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004130:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004138:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1d9      	bne.n	8004100 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800415c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004170:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004174:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004178:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e1      	bne.n	800414c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	3314      	adds	r3, #20
 80041a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b4:	e841 2300 	strex	r3, r2, [r1]
 80041b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e3      	bne.n	8004188 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	f023 0310 	bic.w	r3, r3, #16
 80041e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80041f4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd ff4f 	bl	80020ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	4619      	mov	r1, r3
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8bf 	bl	80043aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800422c:	e09c      	b.n	8004368 <HAL_UART_IRQHandler+0x518>
 800422e:	bf00      	nop
 8004230:	08004561 	.word	0x08004561
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800423c:	b29b      	uxth	r3, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 808e 	beq.w	800436c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8089 	beq.w	800436c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800427e:	647a      	str	r2, [r7, #68]	; 0x44
 8004280:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004284:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800428c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e3      	bne.n	800425a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	623b      	str	r3, [r7, #32]
   return(result);
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3314      	adds	r3, #20
 80042b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b6:	633a      	str	r2, [r7, #48]	; 0x30
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e3      	bne.n	8004292 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0310 	bic.w	r3, r3, #16
 80042ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042fc:	61fa      	str	r2, [r7, #28]
 80042fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	69b9      	ldr	r1, [r7, #24]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	617b      	str	r3, [r7, #20]
   return(result);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e3      	bne.n	80042d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004316:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f844 	bl	80043aa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004322:	e023      	b.n	800436c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <HAL_UART_IRQHandler+0x4f4>
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f923 	bl	8004588 <UART_Transmit_IT>
    return;
 8004342:	e014      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00e      	beq.n	800436e <HAL_UART_IRQHandler+0x51e>
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f962 	bl	8004626 <UART_EndTransmit_IT>
    return;
 8004362:	e004      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
    return;
 8004364:	bf00      	nop
 8004366:	e002      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
      return;
 8004368:	bf00      	nop
 800436a:	e000      	b.n	800436e <HAL_UART_IRQHandler+0x51e>
      return;
 800436c:	bf00      	nop
  }
}
 800436e:	37e8      	adds	r7, #232	; 0xe8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b090      	sub	sp, #64	; 0x40
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	e050      	b.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d04c      	beq.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d007      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e0:	f7fd fd4e 	bl	8001e80 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d241      	bcs.n	8004474 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004410:	637a      	str	r2, [r7, #52]	; 0x34
 8004412:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e5      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3314      	adds	r3, #20
 800442a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	613b      	str	r3, [r7, #16]
   return(result);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004444:	623a      	str	r2, [r7, #32]
 8004446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	61bb      	str	r3, [r7, #24]
   return(result);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e00f      	b.n	8004494 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4013      	ands	r3, r2
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	bf0c      	ite	eq
 8004484:	2301      	moveq	r3, #1
 8004486:	2300      	movne	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	461a      	mov	r2, r3
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	429a      	cmp	r2, r3
 8004490:	d09f      	beq.n	80043d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3740      	adds	r7, #64	; 0x40
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800449c:	b480      	push	{r7}
 800449e:	b095      	sub	sp, #84	; 0x54
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044c4:	643a      	str	r2, [r7, #64]	; 0x40
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3314      	adds	r3, #20
 80044de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3314      	adds	r3, #20
 80044f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	2b01      	cmp	r3, #1
 8004512:	d119      	bne.n	8004548 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	60bb      	str	r3, [r7, #8]
   return(result);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	647b      	str	r3, [r7, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	330c      	adds	r3, #12
 8004532:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004534:	61ba      	str	r2, [r7, #24]
 8004536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6979      	ldr	r1, [r7, #20]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	e841 2300 	strex	r3, r2, [r1]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1e5      	bne.n	8004514 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004556:	bf00      	nop
 8004558:	3754      	adds	r7, #84	; 0x54
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff ff0c 	bl	8004398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b21      	cmp	r3, #33	; 0x21
 800459a:	d13e      	bne.n	800461a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a4:	d114      	bne.n	80045d0 <UART_Transmit_IT+0x48>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d110      	bne.n	80045d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]
 80045ce:	e008      	b.n	80045e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6211      	str	r1, [r2, #32]
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800463c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fe94 	bl	8004374 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b08c      	sub	sp, #48	; 0x30
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b22      	cmp	r3, #34	; 0x22
 8004668:	f040 80ae 	bne.w	80047c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004674:	d117      	bne.n	80046a6 <UART_Receive_IT+0x50>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d113      	bne.n	80046a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b29b      	uxth	r3, r3
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	b29a      	uxth	r2, r3
 8004696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004698:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	; 0x28
 80046a4:	e026      	b.n	80046f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d007      	beq.n	80046ca <UART_Receive_IT+0x74>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <UART_Receive_IT+0x82>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	701a      	strb	r2, [r3, #0]
 80046d6:	e008      	b.n	80046ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4619      	mov	r1, r3
 8004702:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004704:	2b00      	cmp	r3, #0
 8004706:	d15d      	bne.n	80047c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0220 	bic.w	r2, r2, #32
 8004716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0201 	bic.w	r2, r2, #1
 8004736:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	2b01      	cmp	r3, #1
 800474c:	d135      	bne.n	80047ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	613b      	str	r3, [r7, #16]
   return(result);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 0310 	bic.w	r3, r3, #16
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	330c      	adds	r3, #12
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	623a      	str	r2, [r7, #32]
 8004776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	69f9      	ldr	r1, [r7, #28]
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	61bb      	str	r3, [r7, #24]
   return(result);
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e5      	bne.n	8004754 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b10      	cmp	r3, #16
 8004794:	d10a      	bne.n	80047ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fdf9 	bl	80043aa <HAL_UARTEx_RxEventCallback>
 80047b8:	e002      	b.n	80047c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff fde3 	bl	8004386 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e002      	b.n	80047ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3730      	adds	r7, #48	; 0x30
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800480e:	f023 030c 	bic.w	r3, r3, #12
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6812      	ldr	r2, [r2, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	430b      	orrs	r3, r1
 800481a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <UART_SetConfig+0x114>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800483c:	f7fe fa9c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	e002      	b.n	800484a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004844:	f7fe fa84 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004848:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	4a22      	ldr	r2, [pc, #136]	; (80048ec <UART_SetConfig+0x118>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	0119      	lsls	r1, r3, #4
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009a      	lsls	r2, r3, #2
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <UART_SetConfig+0x118>)
 8004882:	fba3 0302 	umull	r0, r3, r3, r2
 8004886:	095b      	lsrs	r3, r3, #5
 8004888:	2064      	movs	r0, #100	; 0x64
 800488a:	fb00 f303 	mul.w	r3, r0, r3
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	3332      	adds	r3, #50	; 0x32
 8004894:	4a15      	ldr	r2, [pc, #84]	; (80048ec <UART_SetConfig+0x118>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a0:	4419      	add	r1, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009a      	lsls	r2, r3, #2
 80048ac:	441a      	add	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <UART_SetConfig+0x118>)
 80048ba:	fba3 0302 	umull	r0, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2064      	movs	r0, #100	; 0x64
 80048c2:	fb00 f303 	mul.w	r3, r0, r3
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	3332      	adds	r3, #50	; 0x32
 80048cc:	4a07      	ldr	r2, [pc, #28]	; (80048ec <UART_SetConfig+0x118>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	095b      	lsrs	r3, r3, #5
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	440a      	add	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40013800 	.word	0x40013800
 80048ec:	51eb851f 	.word	0x51eb851f

080048f0 <__errno>:
 80048f0:	4b01      	ldr	r3, [pc, #4]	; (80048f8 <__errno+0x8>)
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000030 	.word	0x20000030

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	2600      	movs	r6, #0
 8004900:	4d0c      	ldr	r5, [pc, #48]	; (8004934 <__libc_init_array+0x38>)
 8004902:	4c0d      	ldr	r4, [pc, #52]	; (8004938 <__libc_init_array+0x3c>)
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	42a6      	cmp	r6, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	f000 fc5c 	bl	80051c8 <_init>
 8004910:	2600      	movs	r6, #0
 8004912:	4d0a      	ldr	r5, [pc, #40]	; (800493c <__libc_init_array+0x40>)
 8004914:	4c0a      	ldr	r4, [pc, #40]	; (8004940 <__libc_init_array+0x44>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	42a6      	cmp	r6, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f855 3b04 	ldr.w	r3, [r5], #4
 8004924:	4798      	blx	r3
 8004926:	3601      	adds	r6, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f855 3b04 	ldr.w	r3, [r5], #4
 800492e:	4798      	blx	r3
 8004930:	3601      	adds	r6, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	08005368 	.word	0x08005368
 8004938:	08005368 	.word	0x08005368
 800493c:	08005368 	.word	0x08005368
 8004940:	0800536c 	.word	0x0800536c

08004944 <memset>:
 8004944:	4603      	mov	r3, r0
 8004946:	4402      	add	r2, r0
 8004948:	4293      	cmp	r3, r2
 800494a:	d100      	bne.n	800494e <memset+0xa>
 800494c:	4770      	bx	lr
 800494e:	f803 1b01 	strb.w	r1, [r3], #1
 8004952:	e7f9      	b.n	8004948 <memset+0x4>

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800495a:	b500      	push	{lr}
 800495c:	b09c      	sub	sp, #112	; 0x70
 800495e:	ab1d      	add	r3, sp, #116	; 0x74
 8004960:	9002      	str	r0, [sp, #8]
 8004962:	9006      	str	r0, [sp, #24]
 8004964:	9107      	str	r1, [sp, #28]
 8004966:	9104      	str	r1, [sp, #16]
 8004968:	4808      	ldr	r0, [pc, #32]	; (800498c <siprintf+0x38>)
 800496a:	4909      	ldr	r1, [pc, #36]	; (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	a902      	add	r1, sp, #8
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f000 f868 	bl	8004a4c <_svfiprintf_r>
 800497c:	2200      	movs	r2, #0
 800497e:	9b02      	ldr	r3, [sp, #8]
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	; 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	20000030 	.word	0x20000030
 8004990:	ffff0208 	.word	0xffff0208

08004994 <__ssputs_r>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	688e      	ldr	r6, [r1, #8]
 800499a:	4682      	mov	sl, r0
 800499c:	429e      	cmp	r6, r3
 800499e:	460c      	mov	r4, r1
 80049a0:	4690      	mov	r8, r2
 80049a2:	461f      	mov	r7, r3
 80049a4:	d838      	bhi.n	8004a18 <__ssputs_r+0x84>
 80049a6:	898a      	ldrh	r2, [r1, #12]
 80049a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049ac:	d032      	beq.n	8004a14 <__ssputs_r+0x80>
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	6909      	ldr	r1, [r1, #16]
 80049b2:	3301      	adds	r3, #1
 80049b4:	eba5 0901 	sub.w	r9, r5, r1
 80049b8:	6965      	ldr	r5, [r4, #20]
 80049ba:	444b      	add	r3, r9
 80049bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049c4:	106d      	asrs	r5, r5, #1
 80049c6:	429d      	cmp	r5, r3
 80049c8:	bf38      	it	cc
 80049ca:	461d      	movcc	r5, r3
 80049cc:	0553      	lsls	r3, r2, #21
 80049ce:	d531      	bpl.n	8004a34 <__ssputs_r+0xa0>
 80049d0:	4629      	mov	r1, r5
 80049d2:	f000 fb53 	bl	800507c <_malloc_r>
 80049d6:	4606      	mov	r6, r0
 80049d8:	b950      	cbnz	r0, 80049f0 <__ssputs_r+0x5c>
 80049da:	230c      	movs	r3, #12
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	f8ca 3000 	str.w	r3, [sl]
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f0:	464a      	mov	r2, r9
 80049f2:	6921      	ldr	r1, [r4, #16]
 80049f4:	f000 face 	bl	8004f94 <memcpy>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	6126      	str	r6, [r4, #16]
 8004a06:	444e      	add	r6, r9
 8004a08:	6026      	str	r6, [r4, #0]
 8004a0a:	463e      	mov	r6, r7
 8004a0c:	6165      	str	r5, [r4, #20]
 8004a0e:	eba5 0509 	sub.w	r5, r5, r9
 8004a12:	60a5      	str	r5, [r4, #8]
 8004a14:	42be      	cmp	r6, r7
 8004a16:	d900      	bls.n	8004a1a <__ssputs_r+0x86>
 8004a18:	463e      	mov	r6, r7
 8004a1a:	4632      	mov	r2, r6
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	f000 fac6 	bl	8004fb0 <memmove>
 8004a24:	68a3      	ldr	r3, [r4, #8]
 8004a26:	6822      	ldr	r2, [r4, #0]
 8004a28:	1b9b      	subs	r3, r3, r6
 8004a2a:	4432      	add	r2, r6
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	60a3      	str	r3, [r4, #8]
 8004a30:	6022      	str	r2, [r4, #0]
 8004a32:	e7db      	b.n	80049ec <__ssputs_r+0x58>
 8004a34:	462a      	mov	r2, r5
 8004a36:	f000 fb7b 	bl	8005130 <_realloc_r>
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1e1      	bne.n	8004a04 <__ssputs_r+0x70>
 8004a40:	4650      	mov	r0, sl
 8004a42:	6921      	ldr	r1, [r4, #16]
 8004a44:	f000 face 	bl	8004fe4 <_free_r>
 8004a48:	e7c7      	b.n	80049da <__ssputs_r+0x46>
	...

08004a4c <_svfiprintf_r>:
 8004a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	4698      	mov	r8, r3
 8004a52:	898b      	ldrh	r3, [r1, #12]
 8004a54:	4607      	mov	r7, r0
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	460d      	mov	r5, r1
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	b09d      	sub	sp, #116	; 0x74
 8004a5e:	d50e      	bpl.n	8004a7e <_svfiprintf_r+0x32>
 8004a60:	690b      	ldr	r3, [r1, #16]
 8004a62:	b963      	cbnz	r3, 8004a7e <_svfiprintf_r+0x32>
 8004a64:	2140      	movs	r1, #64	; 0x40
 8004a66:	f000 fb09 	bl	800507c <_malloc_r>
 8004a6a:	6028      	str	r0, [r5, #0]
 8004a6c:	6128      	str	r0, [r5, #16]
 8004a6e:	b920      	cbnz	r0, 8004a7a <_svfiprintf_r+0x2e>
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	e0d1      	b.n	8004c1e <_svfiprintf_r+0x1d2>
 8004a7a:	2340      	movs	r3, #64	; 0x40
 8004a7c:	616b      	str	r3, [r5, #20]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9309      	str	r3, [sp, #36]	; 0x24
 8004a82:	2320      	movs	r3, #32
 8004a84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a88:	2330      	movs	r3, #48	; 0x30
 8004a8a:	f04f 0901 	mov.w	r9, #1
 8004a8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a92:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c38 <_svfiprintf_r+0x1ec>
 8004a96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aa2:	b10a      	cbz	r2, 8004aa8 <_svfiprintf_r+0x5c>
 8004aa4:	2a25      	cmp	r2, #37	; 0x25
 8004aa6:	d1f9      	bne.n	8004a9c <_svfiprintf_r+0x50>
 8004aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8004aac:	d00b      	beq.n	8004ac6 <_svfiprintf_r+0x7a>
 8004aae:	465b      	mov	r3, fp
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ff6d 	bl	8004994 <__ssputs_r>
 8004aba:	3001      	adds	r0, #1
 8004abc:	f000 80aa 	beq.w	8004c14 <_svfiprintf_r+0x1c8>
 8004ac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ac2:	445a      	add	r2, fp
 8004ac4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80a2 	beq.w	8004c14 <_svfiprintf_r+0x1c8>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ada:	f10a 0a01 	add.w	sl, sl, #1
 8004ade:	9304      	str	r3, [sp, #16]
 8004ae0:	9307      	str	r3, [sp, #28]
 8004ae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ae6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ae8:	4654      	mov	r4, sl
 8004aea:	2205      	movs	r2, #5
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	4851      	ldr	r0, [pc, #324]	; (8004c38 <_svfiprintf_r+0x1ec>)
 8004af2:	f000 fa41 	bl	8004f78 <memchr>
 8004af6:	9a04      	ldr	r2, [sp, #16]
 8004af8:	b9d8      	cbnz	r0, 8004b32 <_svfiprintf_r+0xe6>
 8004afa:	06d0      	lsls	r0, r2, #27
 8004afc:	bf44      	itt	mi
 8004afe:	2320      	movmi	r3, #32
 8004b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b04:	0711      	lsls	r1, r2, #28
 8004b06:	bf44      	itt	mi
 8004b08:	232b      	movmi	r3, #43	; 0x2b
 8004b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b12:	2b2a      	cmp	r3, #42	; 0x2a
 8004b14:	d015      	beq.n	8004b42 <_svfiprintf_r+0xf6>
 8004b16:	4654      	mov	r4, sl
 8004b18:	2000      	movs	r0, #0
 8004b1a:	f04f 0c0a 	mov.w	ip, #10
 8004b1e:	9a07      	ldr	r2, [sp, #28]
 8004b20:	4621      	mov	r1, r4
 8004b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b26:	3b30      	subs	r3, #48	; 0x30
 8004b28:	2b09      	cmp	r3, #9
 8004b2a:	d94e      	bls.n	8004bca <_svfiprintf_r+0x17e>
 8004b2c:	b1b0      	cbz	r0, 8004b5c <_svfiprintf_r+0x110>
 8004b2e:	9207      	str	r2, [sp, #28]
 8004b30:	e014      	b.n	8004b5c <_svfiprintf_r+0x110>
 8004b32:	eba0 0308 	sub.w	r3, r0, r8
 8004b36:	fa09 f303 	lsl.w	r3, r9, r3
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	46a2      	mov	sl, r4
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	e7d2      	b.n	8004ae8 <_svfiprintf_r+0x9c>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	1d19      	adds	r1, r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	9103      	str	r1, [sp, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfbb      	ittet	lt
 8004b4e:	425b      	neglt	r3, r3
 8004b50:	f042 0202 	orrlt.w	r2, r2, #2
 8004b54:	9307      	strge	r3, [sp, #28]
 8004b56:	9307      	strlt	r3, [sp, #28]
 8004b58:	bfb8      	it	lt
 8004b5a:	9204      	strlt	r2, [sp, #16]
 8004b5c:	7823      	ldrb	r3, [r4, #0]
 8004b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b60:	d10c      	bne.n	8004b7c <_svfiprintf_r+0x130>
 8004b62:	7863      	ldrb	r3, [r4, #1]
 8004b64:	2b2a      	cmp	r3, #42	; 0x2a
 8004b66:	d135      	bne.n	8004bd4 <_svfiprintf_r+0x188>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	3402      	adds	r4, #2
 8004b6c:	1d1a      	adds	r2, r3, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	9203      	str	r2, [sp, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bfb8      	it	lt
 8004b76:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c48 <_svfiprintf_r+0x1fc>
 8004b80:	2203      	movs	r2, #3
 8004b82:	4650      	mov	r0, sl
 8004b84:	7821      	ldrb	r1, [r4, #0]
 8004b86:	f000 f9f7 	bl	8004f78 <memchr>
 8004b8a:	b140      	cbz	r0, 8004b9e <_svfiprintf_r+0x152>
 8004b8c:	2340      	movs	r3, #64	; 0x40
 8004b8e:	eba0 000a 	sub.w	r0, r0, sl
 8004b92:	fa03 f000 	lsl.w	r0, r3, r0
 8004b96:	9b04      	ldr	r3, [sp, #16]
 8004b98:	3401      	adds	r4, #1
 8004b9a:	4303      	orrs	r3, r0
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba2:	2206      	movs	r2, #6
 8004ba4:	4825      	ldr	r0, [pc, #148]	; (8004c3c <_svfiprintf_r+0x1f0>)
 8004ba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004baa:	f000 f9e5 	bl	8004f78 <memchr>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d038      	beq.n	8004c24 <_svfiprintf_r+0x1d8>
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <_svfiprintf_r+0x1f4>)
 8004bb4:	bb1b      	cbnz	r3, 8004bfe <_svfiprintf_r+0x1b2>
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	3307      	adds	r3, #7
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	9303      	str	r3, [sp, #12]
 8004bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc4:	4433      	add	r3, r6
 8004bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bc8:	e767      	b.n	8004a9a <_svfiprintf_r+0x4e>
 8004bca:	460c      	mov	r4, r1
 8004bcc:	2001      	movs	r0, #1
 8004bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bd2:	e7a5      	b.n	8004b20 <_svfiprintf_r+0xd4>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f04f 0c0a 	mov.w	ip, #10
 8004bda:	4619      	mov	r1, r3
 8004bdc:	3401      	adds	r4, #1
 8004bde:	9305      	str	r3, [sp, #20]
 8004be0:	4620      	mov	r0, r4
 8004be2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be6:	3a30      	subs	r2, #48	; 0x30
 8004be8:	2a09      	cmp	r2, #9
 8004bea:	d903      	bls.n	8004bf4 <_svfiprintf_r+0x1a8>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0c5      	beq.n	8004b7c <_svfiprintf_r+0x130>
 8004bf0:	9105      	str	r1, [sp, #20]
 8004bf2:	e7c3      	b.n	8004b7c <_svfiprintf_r+0x130>
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bfc:	e7f0      	b.n	8004be0 <_svfiprintf_r+0x194>
 8004bfe:	ab03      	add	r3, sp, #12
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	462a      	mov	r2, r5
 8004c04:	4638      	mov	r0, r7
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <_svfiprintf_r+0x1f8>)
 8004c08:	a904      	add	r1, sp, #16
 8004c0a:	f3af 8000 	nop.w
 8004c0e:	1c42      	adds	r2, r0, #1
 8004c10:	4606      	mov	r6, r0
 8004c12:	d1d6      	bne.n	8004bc2 <_svfiprintf_r+0x176>
 8004c14:	89ab      	ldrh	r3, [r5, #12]
 8004c16:	065b      	lsls	r3, r3, #25
 8004c18:	f53f af2c 	bmi.w	8004a74 <_svfiprintf_r+0x28>
 8004c1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c1e:	b01d      	add	sp, #116	; 0x74
 8004c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c24:	ab03      	add	r3, sp, #12
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	462a      	mov	r2, r5
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <_svfiprintf_r+0x1f8>)
 8004c2e:	a904      	add	r1, sp, #16
 8004c30:	f000 f87c 	bl	8004d2c <_printf_i>
 8004c34:	e7eb      	b.n	8004c0e <_svfiprintf_r+0x1c2>
 8004c36:	bf00      	nop
 8004c38:	08005332 	.word	0x08005332
 8004c3c:	0800533c 	.word	0x0800533c
 8004c40:	00000000 	.word	0x00000000
 8004c44:	08004995 	.word	0x08004995
 8004c48:	08005338 	.word	0x08005338

08004c4c <_printf_common>:
 8004c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c50:	4616      	mov	r6, r2
 8004c52:	4699      	mov	r9, r3
 8004c54:	688a      	ldr	r2, [r1, #8]
 8004c56:	690b      	ldr	r3, [r1, #16]
 8004c58:	4607      	mov	r7, r0
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bfb8      	it	lt
 8004c5e:	4613      	movlt	r3, r2
 8004c60:	6033      	str	r3, [r6, #0]
 8004c62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c66:	460c      	mov	r4, r1
 8004c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c6c:	b10a      	cbz	r2, 8004c72 <_printf_common+0x26>
 8004c6e:	3301      	adds	r3, #1
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	0699      	lsls	r1, r3, #26
 8004c76:	bf42      	ittt	mi
 8004c78:	6833      	ldrmi	r3, [r6, #0]
 8004c7a:	3302      	addmi	r3, #2
 8004c7c:	6033      	strmi	r3, [r6, #0]
 8004c7e:	6825      	ldr	r5, [r4, #0]
 8004c80:	f015 0506 	ands.w	r5, r5, #6
 8004c84:	d106      	bne.n	8004c94 <_printf_common+0x48>
 8004c86:	f104 0a19 	add.w	sl, r4, #25
 8004c8a:	68e3      	ldr	r3, [r4, #12]
 8004c8c:	6832      	ldr	r2, [r6, #0]
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	dc28      	bgt.n	8004ce6 <_printf_common+0x9a>
 8004c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c98:	1e13      	subs	r3, r2, #0
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	0692      	lsls	r2, r2, #26
 8004ca2:	d42d      	bmi.n	8004d00 <_printf_common+0xb4>
 8004ca4:	4649      	mov	r1, r9
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cac:	47c0      	blx	r8
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d020      	beq.n	8004cf4 <_printf_common+0xa8>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	68e5      	ldr	r5, [r4, #12]
 8004cb6:	f003 0306 	and.w	r3, r3, #6
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	bf18      	it	ne
 8004cbe:	2500      	movne	r5, #0
 8004cc0:	6832      	ldr	r2, [r6, #0]
 8004cc2:	f04f 0600 	mov.w	r6, #0
 8004cc6:	68a3      	ldr	r3, [r4, #8]
 8004cc8:	bf08      	it	eq
 8004cca:	1aad      	subeq	r5, r5, r2
 8004ccc:	6922      	ldr	r2, [r4, #16]
 8004cce:	bf08      	it	eq
 8004cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	bfc4      	itt	gt
 8004cd8:	1a9b      	subgt	r3, r3, r2
 8004cda:	18ed      	addgt	r5, r5, r3
 8004cdc:	341a      	adds	r4, #26
 8004cde:	42b5      	cmp	r5, r6
 8004ce0:	d11a      	bne.n	8004d18 <_printf_common+0xcc>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e008      	b.n	8004cf8 <_printf_common+0xac>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4652      	mov	r2, sl
 8004cea:	4649      	mov	r1, r9
 8004cec:	4638      	mov	r0, r7
 8004cee:	47c0      	blx	r8
 8004cf0:	3001      	adds	r0, #1
 8004cf2:	d103      	bne.n	8004cfc <_printf_common+0xb0>
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	e7c4      	b.n	8004c8a <_printf_common+0x3e>
 8004d00:	2030      	movs	r0, #48	; 0x30
 8004d02:	18e1      	adds	r1, r4, r3
 8004d04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d0e:	4422      	add	r2, r4
 8004d10:	3302      	adds	r3, #2
 8004d12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d16:	e7c5      	b.n	8004ca4 <_printf_common+0x58>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	4638      	mov	r0, r7
 8004d20:	47c0      	blx	r8
 8004d22:	3001      	adds	r0, #1
 8004d24:	d0e6      	beq.n	8004cf4 <_printf_common+0xa8>
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7d9      	b.n	8004cde <_printf_common+0x92>
	...

08004d2c <_printf_i>:
 8004d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	460c      	mov	r4, r1
 8004d32:	7e27      	ldrb	r7, [r4, #24]
 8004d34:	4691      	mov	r9, r2
 8004d36:	2f78      	cmp	r7, #120	; 0x78
 8004d38:	4680      	mov	r8, r0
 8004d3a:	469a      	mov	sl, r3
 8004d3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004d3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d42:	d807      	bhi.n	8004d54 <_printf_i+0x28>
 8004d44:	2f62      	cmp	r7, #98	; 0x62
 8004d46:	d80a      	bhi.n	8004d5e <_printf_i+0x32>
 8004d48:	2f00      	cmp	r7, #0
 8004d4a:	f000 80d9 	beq.w	8004f00 <_printf_i+0x1d4>
 8004d4e:	2f58      	cmp	r7, #88	; 0x58
 8004d50:	f000 80a4 	beq.w	8004e9c <_printf_i+0x170>
 8004d54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d5c:	e03a      	b.n	8004dd4 <_printf_i+0xa8>
 8004d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d62:	2b15      	cmp	r3, #21
 8004d64:	d8f6      	bhi.n	8004d54 <_printf_i+0x28>
 8004d66:	a001      	add	r0, pc, #4	; (adr r0, 8004d6c <_printf_i+0x40>)
 8004d68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004d6c:	08004dc5 	.word	0x08004dc5
 8004d70:	08004dd9 	.word	0x08004dd9
 8004d74:	08004d55 	.word	0x08004d55
 8004d78:	08004d55 	.word	0x08004d55
 8004d7c:	08004d55 	.word	0x08004d55
 8004d80:	08004d55 	.word	0x08004d55
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004d55 	.word	0x08004d55
 8004d8c:	08004d55 	.word	0x08004d55
 8004d90:	08004d55 	.word	0x08004d55
 8004d94:	08004d55 	.word	0x08004d55
 8004d98:	08004ee7 	.word	0x08004ee7
 8004d9c:	08004e09 	.word	0x08004e09
 8004da0:	08004ec9 	.word	0x08004ec9
 8004da4:	08004d55 	.word	0x08004d55
 8004da8:	08004d55 	.word	0x08004d55
 8004dac:	08004f09 	.word	0x08004f09
 8004db0:	08004d55 	.word	0x08004d55
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004d55 	.word	0x08004d55
 8004dbc:	08004d55 	.word	0x08004d55
 8004dc0:	08004ed1 	.word	0x08004ed1
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004dca:	1d1a      	adds	r2, r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	600a      	str	r2, [r1, #0]
 8004dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0a4      	b.n	8004f22 <_printf_i+0x1f6>
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	6808      	ldr	r0, [r1, #0]
 8004ddc:	062e      	lsls	r6, r5, #24
 8004dde:	f100 0304 	add.w	r3, r0, #4
 8004de2:	d50a      	bpl.n	8004dfa <_printf_i+0xce>
 8004de4:	6805      	ldr	r5, [r0, #0]
 8004de6:	600b      	str	r3, [r1, #0]
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	da03      	bge.n	8004df4 <_printf_i+0xc8>
 8004dec:	232d      	movs	r3, #45	; 0x2d
 8004dee:	426d      	negs	r5, r5
 8004df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df4:	230a      	movs	r3, #10
 8004df6:	485e      	ldr	r0, [pc, #376]	; (8004f70 <_printf_i+0x244>)
 8004df8:	e019      	b.n	8004e2e <_printf_i+0x102>
 8004dfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004dfe:	6805      	ldr	r5, [r0, #0]
 8004e00:	600b      	str	r3, [r1, #0]
 8004e02:	bf18      	it	ne
 8004e04:	b22d      	sxthne	r5, r5
 8004e06:	e7ef      	b.n	8004de8 <_printf_i+0xbc>
 8004e08:	680b      	ldr	r3, [r1, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	1d18      	adds	r0, r3, #4
 8004e0e:	6008      	str	r0, [r1, #0]
 8004e10:	0628      	lsls	r0, r5, #24
 8004e12:	d501      	bpl.n	8004e18 <_printf_i+0xec>
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <_printf_i+0xf2>
 8004e18:	0669      	lsls	r1, r5, #25
 8004e1a:	d5fb      	bpl.n	8004e14 <_printf_i+0xe8>
 8004e1c:	881d      	ldrh	r5, [r3, #0]
 8004e1e:	2f6f      	cmp	r7, #111	; 0x6f
 8004e20:	bf0c      	ite	eq
 8004e22:	2308      	moveq	r3, #8
 8004e24:	230a      	movne	r3, #10
 8004e26:	4852      	ldr	r0, [pc, #328]	; (8004f70 <_printf_i+0x244>)
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e2e:	6866      	ldr	r6, [r4, #4]
 8004e30:	2e00      	cmp	r6, #0
 8004e32:	bfa8      	it	ge
 8004e34:	6821      	ldrge	r1, [r4, #0]
 8004e36:	60a6      	str	r6, [r4, #8]
 8004e38:	bfa4      	itt	ge
 8004e3a:	f021 0104 	bicge.w	r1, r1, #4
 8004e3e:	6021      	strge	r1, [r4, #0]
 8004e40:	b90d      	cbnz	r5, 8004e46 <_printf_i+0x11a>
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	d04d      	beq.n	8004ee2 <_printf_i+0x1b6>
 8004e46:	4616      	mov	r6, r2
 8004e48:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e4c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e50:	5dc7      	ldrb	r7, [r0, r7]
 8004e52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e56:	462f      	mov	r7, r5
 8004e58:	42bb      	cmp	r3, r7
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	d9f4      	bls.n	8004e48 <_printf_i+0x11c>
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d10b      	bne.n	8004e7a <_printf_i+0x14e>
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	07df      	lsls	r7, r3, #31
 8004e66:	d508      	bpl.n	8004e7a <_printf_i+0x14e>
 8004e68:	6923      	ldr	r3, [r4, #16]
 8004e6a:	6861      	ldr	r1, [r4, #4]
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	bfde      	ittt	le
 8004e70:	2330      	movle	r3, #48	; 0x30
 8004e72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e7a:	1b92      	subs	r2, r2, r6
 8004e7c:	6122      	str	r2, [r4, #16]
 8004e7e:	464b      	mov	r3, r9
 8004e80:	4621      	mov	r1, r4
 8004e82:	4640      	mov	r0, r8
 8004e84:	f8cd a000 	str.w	sl, [sp]
 8004e88:	aa03      	add	r2, sp, #12
 8004e8a:	f7ff fedf 	bl	8004c4c <_printf_common>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d14c      	bne.n	8004f2c <_printf_i+0x200>
 8004e92:	f04f 30ff 	mov.w	r0, #4294967295
 8004e96:	b004      	add	sp, #16
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e9c:	4834      	ldr	r0, [pc, #208]	; (8004f70 <_printf_i+0x244>)
 8004e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ea2:	680e      	ldr	r6, [r1, #0]
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004eaa:	061f      	lsls	r7, r3, #24
 8004eac:	600e      	str	r6, [r1, #0]
 8004eae:	d514      	bpl.n	8004eda <_printf_i+0x1ae>
 8004eb0:	07d9      	lsls	r1, r3, #31
 8004eb2:	bf44      	itt	mi
 8004eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8004eb8:	6023      	strmi	r3, [r4, #0]
 8004eba:	b91d      	cbnz	r5, 8004ec4 <_printf_i+0x198>
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	f023 0320 	bic.w	r3, r3, #32
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	e7af      	b.n	8004e28 <_printf_i+0xfc>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	f043 0320 	orr.w	r3, r3, #32
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	2378      	movs	r3, #120	; 0x78
 8004ed2:	4828      	ldr	r0, [pc, #160]	; (8004f74 <_printf_i+0x248>)
 8004ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ed8:	e7e3      	b.n	8004ea2 <_printf_i+0x176>
 8004eda:	065e      	lsls	r6, r3, #25
 8004edc:	bf48      	it	mi
 8004ede:	b2ad      	uxthmi	r5, r5
 8004ee0:	e7e6      	b.n	8004eb0 <_printf_i+0x184>
 8004ee2:	4616      	mov	r6, r2
 8004ee4:	e7bb      	b.n	8004e5e <_printf_i+0x132>
 8004ee6:	680b      	ldr	r3, [r1, #0]
 8004ee8:	6826      	ldr	r6, [r4, #0]
 8004eea:	1d1d      	adds	r5, r3, #4
 8004eec:	6960      	ldr	r0, [r4, #20]
 8004eee:	600d      	str	r5, [r1, #0]
 8004ef0:	0635      	lsls	r5, r6, #24
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	d501      	bpl.n	8004efa <_printf_i+0x1ce>
 8004ef6:	6018      	str	r0, [r3, #0]
 8004ef8:	e002      	b.n	8004f00 <_printf_i+0x1d4>
 8004efa:	0671      	lsls	r1, r6, #25
 8004efc:	d5fb      	bpl.n	8004ef6 <_printf_i+0x1ca>
 8004efe:	8018      	strh	r0, [r3, #0]
 8004f00:	2300      	movs	r3, #0
 8004f02:	4616      	mov	r6, r2
 8004f04:	6123      	str	r3, [r4, #16]
 8004f06:	e7ba      	b.n	8004e7e <_printf_i+0x152>
 8004f08:	680b      	ldr	r3, [r1, #0]
 8004f0a:	1d1a      	adds	r2, r3, #4
 8004f0c:	600a      	str	r2, [r1, #0]
 8004f0e:	681e      	ldr	r6, [r3, #0]
 8004f10:	2100      	movs	r1, #0
 8004f12:	4630      	mov	r0, r6
 8004f14:	6862      	ldr	r2, [r4, #4]
 8004f16:	f000 f82f 	bl	8004f78 <memchr>
 8004f1a:	b108      	cbz	r0, 8004f20 <_printf_i+0x1f4>
 8004f1c:	1b80      	subs	r0, r0, r6
 8004f1e:	6060      	str	r0, [r4, #4]
 8004f20:	6863      	ldr	r3, [r4, #4]
 8004f22:	6123      	str	r3, [r4, #16]
 8004f24:	2300      	movs	r3, #0
 8004f26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f2a:	e7a8      	b.n	8004e7e <_printf_i+0x152>
 8004f2c:	4632      	mov	r2, r6
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	47d0      	blx	sl
 8004f36:	3001      	adds	r0, #1
 8004f38:	d0ab      	beq.n	8004e92 <_printf_i+0x166>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	079b      	lsls	r3, r3, #30
 8004f3e:	d413      	bmi.n	8004f68 <_printf_i+0x23c>
 8004f40:	68e0      	ldr	r0, [r4, #12]
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	4298      	cmp	r0, r3
 8004f46:	bfb8      	it	lt
 8004f48:	4618      	movlt	r0, r3
 8004f4a:	e7a4      	b.n	8004e96 <_printf_i+0x16a>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4632      	mov	r2, r6
 8004f50:	4649      	mov	r1, r9
 8004f52:	4640      	mov	r0, r8
 8004f54:	47d0      	blx	sl
 8004f56:	3001      	adds	r0, #1
 8004f58:	d09b      	beq.n	8004e92 <_printf_i+0x166>
 8004f5a:	3501      	adds	r5, #1
 8004f5c:	68e3      	ldr	r3, [r4, #12]
 8004f5e:	9903      	ldr	r1, [sp, #12]
 8004f60:	1a5b      	subs	r3, r3, r1
 8004f62:	42ab      	cmp	r3, r5
 8004f64:	dcf2      	bgt.n	8004f4c <_printf_i+0x220>
 8004f66:	e7eb      	b.n	8004f40 <_printf_i+0x214>
 8004f68:	2500      	movs	r5, #0
 8004f6a:	f104 0619 	add.w	r6, r4, #25
 8004f6e:	e7f5      	b.n	8004f5c <_printf_i+0x230>
 8004f70:	08005343 	.word	0x08005343
 8004f74:	08005354 	.word	0x08005354

08004f78 <memchr>:
 8004f78:	4603      	mov	r3, r0
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	b2c9      	uxtb	r1, r1
 8004f7e:	4402      	add	r2, r0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	d101      	bne.n	8004f8a <memchr+0x12>
 8004f86:	2000      	movs	r0, #0
 8004f88:	e003      	b.n	8004f92 <memchr+0x1a>
 8004f8a:	7804      	ldrb	r4, [r0, #0]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	428c      	cmp	r4, r1
 8004f90:	d1f6      	bne.n	8004f80 <memchr+0x8>
 8004f92:	bd10      	pop	{r4, pc}

08004f94 <memcpy>:
 8004f94:	440a      	add	r2, r1
 8004f96:	4291      	cmp	r1, r2
 8004f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f9c:	d100      	bne.n	8004fa0 <memcpy+0xc>
 8004f9e:	4770      	bx	lr
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa6:	4291      	cmp	r1, r2
 8004fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fac:	d1f9      	bne.n	8004fa2 <memcpy+0xe>
 8004fae:	bd10      	pop	{r4, pc}

08004fb0 <memmove>:
 8004fb0:	4288      	cmp	r0, r1
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	eb01 0402 	add.w	r4, r1, r2
 8004fb8:	d902      	bls.n	8004fc0 <memmove+0x10>
 8004fba:	4284      	cmp	r4, r0
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	d807      	bhi.n	8004fd0 <memmove+0x20>
 8004fc0:	1e43      	subs	r3, r0, #1
 8004fc2:	42a1      	cmp	r1, r4
 8004fc4:	d008      	beq.n	8004fd8 <memmove+0x28>
 8004fc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fce:	e7f8      	b.n	8004fc2 <memmove+0x12>
 8004fd0:	4601      	mov	r1, r0
 8004fd2:	4402      	add	r2, r0
 8004fd4:	428a      	cmp	r2, r1
 8004fd6:	d100      	bne.n	8004fda <memmove+0x2a>
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fe2:	e7f7      	b.n	8004fd4 <memmove+0x24>

08004fe4 <_free_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	2900      	cmp	r1, #0
 8004fea:	d043      	beq.n	8005074 <_free_r+0x90>
 8004fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ff0:	1f0c      	subs	r4, r1, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bfb8      	it	lt
 8004ff6:	18e4      	addlt	r4, r4, r3
 8004ff8:	f000 f8d0 	bl	800519c <__malloc_lock>
 8004ffc:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <_free_r+0x94>)
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	4610      	mov	r0, r2
 8005002:	b933      	cbnz	r3, 8005012 <_free_r+0x2e>
 8005004:	6063      	str	r3, [r4, #4]
 8005006:	6014      	str	r4, [r2, #0]
 8005008:	4628      	mov	r0, r5
 800500a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800500e:	f000 b8cb 	b.w	80051a8 <__malloc_unlock>
 8005012:	42a3      	cmp	r3, r4
 8005014:	d90a      	bls.n	800502c <_free_r+0x48>
 8005016:	6821      	ldr	r1, [r4, #0]
 8005018:	1862      	adds	r2, r4, r1
 800501a:	4293      	cmp	r3, r2
 800501c:	bf01      	itttt	eq
 800501e:	681a      	ldreq	r2, [r3, #0]
 8005020:	685b      	ldreq	r3, [r3, #4]
 8005022:	1852      	addeq	r2, r2, r1
 8005024:	6022      	streq	r2, [r4, #0]
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	6004      	str	r4, [r0, #0]
 800502a:	e7ed      	b.n	8005008 <_free_r+0x24>
 800502c:	461a      	mov	r2, r3
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	b10b      	cbz	r3, 8005036 <_free_r+0x52>
 8005032:	42a3      	cmp	r3, r4
 8005034:	d9fa      	bls.n	800502c <_free_r+0x48>
 8005036:	6811      	ldr	r1, [r2, #0]
 8005038:	1850      	adds	r0, r2, r1
 800503a:	42a0      	cmp	r0, r4
 800503c:	d10b      	bne.n	8005056 <_free_r+0x72>
 800503e:	6820      	ldr	r0, [r4, #0]
 8005040:	4401      	add	r1, r0
 8005042:	1850      	adds	r0, r2, r1
 8005044:	4283      	cmp	r3, r0
 8005046:	6011      	str	r1, [r2, #0]
 8005048:	d1de      	bne.n	8005008 <_free_r+0x24>
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4401      	add	r1, r0
 8005050:	6011      	str	r1, [r2, #0]
 8005052:	6053      	str	r3, [r2, #4]
 8005054:	e7d8      	b.n	8005008 <_free_r+0x24>
 8005056:	d902      	bls.n	800505e <_free_r+0x7a>
 8005058:	230c      	movs	r3, #12
 800505a:	602b      	str	r3, [r5, #0]
 800505c:	e7d4      	b.n	8005008 <_free_r+0x24>
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	1821      	adds	r1, r4, r0
 8005062:	428b      	cmp	r3, r1
 8005064:	bf01      	itttt	eq
 8005066:	6819      	ldreq	r1, [r3, #0]
 8005068:	685b      	ldreq	r3, [r3, #4]
 800506a:	1809      	addeq	r1, r1, r0
 800506c:	6021      	streq	r1, [r4, #0]
 800506e:	6063      	str	r3, [r4, #4]
 8005070:	6054      	str	r4, [r2, #4]
 8005072:	e7c9      	b.n	8005008 <_free_r+0x24>
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	bf00      	nop
 8005078:	20000164 	.word	0x20000164

0800507c <_malloc_r>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	1ccd      	adds	r5, r1, #3
 8005080:	f025 0503 	bic.w	r5, r5, #3
 8005084:	3508      	adds	r5, #8
 8005086:	2d0c      	cmp	r5, #12
 8005088:	bf38      	it	cc
 800508a:	250c      	movcc	r5, #12
 800508c:	2d00      	cmp	r5, #0
 800508e:	4606      	mov	r6, r0
 8005090:	db01      	blt.n	8005096 <_malloc_r+0x1a>
 8005092:	42a9      	cmp	r1, r5
 8005094:	d903      	bls.n	800509e <_malloc_r+0x22>
 8005096:	230c      	movs	r3, #12
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	2000      	movs	r0, #0
 800509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800509e:	f000 f87d 	bl	800519c <__malloc_lock>
 80050a2:	4921      	ldr	r1, [pc, #132]	; (8005128 <_malloc_r+0xac>)
 80050a4:	680a      	ldr	r2, [r1, #0]
 80050a6:	4614      	mov	r4, r2
 80050a8:	b99c      	cbnz	r4, 80050d2 <_malloc_r+0x56>
 80050aa:	4f20      	ldr	r7, [pc, #128]	; (800512c <_malloc_r+0xb0>)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	b923      	cbnz	r3, 80050ba <_malloc_r+0x3e>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4630      	mov	r0, r6
 80050b4:	f000 f862 	bl	800517c <_sbrk_r>
 80050b8:	6038      	str	r0, [r7, #0]
 80050ba:	4629      	mov	r1, r5
 80050bc:	4630      	mov	r0, r6
 80050be:	f000 f85d 	bl	800517c <_sbrk_r>
 80050c2:	1c43      	adds	r3, r0, #1
 80050c4:	d123      	bne.n	800510e <_malloc_r+0x92>
 80050c6:	230c      	movs	r3, #12
 80050c8:	4630      	mov	r0, r6
 80050ca:	6033      	str	r3, [r6, #0]
 80050cc:	f000 f86c 	bl	80051a8 <__malloc_unlock>
 80050d0:	e7e3      	b.n	800509a <_malloc_r+0x1e>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	1b5b      	subs	r3, r3, r5
 80050d6:	d417      	bmi.n	8005108 <_malloc_r+0x8c>
 80050d8:	2b0b      	cmp	r3, #11
 80050da:	d903      	bls.n	80050e4 <_malloc_r+0x68>
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	441c      	add	r4, r3
 80050e0:	6025      	str	r5, [r4, #0]
 80050e2:	e004      	b.n	80050ee <_malloc_r+0x72>
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	42a2      	cmp	r2, r4
 80050e8:	bf0c      	ite	eq
 80050ea:	600b      	streq	r3, [r1, #0]
 80050ec:	6053      	strne	r3, [r2, #4]
 80050ee:	4630      	mov	r0, r6
 80050f0:	f000 f85a 	bl	80051a8 <__malloc_unlock>
 80050f4:	f104 000b 	add.w	r0, r4, #11
 80050f8:	1d23      	adds	r3, r4, #4
 80050fa:	f020 0007 	bic.w	r0, r0, #7
 80050fe:	1ac2      	subs	r2, r0, r3
 8005100:	d0cc      	beq.n	800509c <_malloc_r+0x20>
 8005102:	1a1b      	subs	r3, r3, r0
 8005104:	50a3      	str	r3, [r4, r2]
 8005106:	e7c9      	b.n	800509c <_malloc_r+0x20>
 8005108:	4622      	mov	r2, r4
 800510a:	6864      	ldr	r4, [r4, #4]
 800510c:	e7cc      	b.n	80050a8 <_malloc_r+0x2c>
 800510e:	1cc4      	adds	r4, r0, #3
 8005110:	f024 0403 	bic.w	r4, r4, #3
 8005114:	42a0      	cmp	r0, r4
 8005116:	d0e3      	beq.n	80050e0 <_malloc_r+0x64>
 8005118:	1a21      	subs	r1, r4, r0
 800511a:	4630      	mov	r0, r6
 800511c:	f000 f82e 	bl	800517c <_sbrk_r>
 8005120:	3001      	adds	r0, #1
 8005122:	d1dd      	bne.n	80050e0 <_malloc_r+0x64>
 8005124:	e7cf      	b.n	80050c6 <_malloc_r+0x4a>
 8005126:	bf00      	nop
 8005128:	20000164 	.word	0x20000164
 800512c:	20000168 	.word	0x20000168

08005130 <_realloc_r>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	4607      	mov	r7, r0
 8005134:	4614      	mov	r4, r2
 8005136:	460e      	mov	r6, r1
 8005138:	b921      	cbnz	r1, 8005144 <_realloc_r+0x14>
 800513a:	4611      	mov	r1, r2
 800513c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005140:	f7ff bf9c 	b.w	800507c <_malloc_r>
 8005144:	b922      	cbnz	r2, 8005150 <_realloc_r+0x20>
 8005146:	f7ff ff4d 	bl	8004fe4 <_free_r>
 800514a:	4625      	mov	r5, r4
 800514c:	4628      	mov	r0, r5
 800514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005150:	f000 f830 	bl	80051b4 <_malloc_usable_size_r>
 8005154:	42a0      	cmp	r0, r4
 8005156:	d20f      	bcs.n	8005178 <_realloc_r+0x48>
 8005158:	4621      	mov	r1, r4
 800515a:	4638      	mov	r0, r7
 800515c:	f7ff ff8e 	bl	800507c <_malloc_r>
 8005160:	4605      	mov	r5, r0
 8005162:	2800      	cmp	r0, #0
 8005164:	d0f2      	beq.n	800514c <_realloc_r+0x1c>
 8005166:	4631      	mov	r1, r6
 8005168:	4622      	mov	r2, r4
 800516a:	f7ff ff13 	bl	8004f94 <memcpy>
 800516e:	4631      	mov	r1, r6
 8005170:	4638      	mov	r0, r7
 8005172:	f7ff ff37 	bl	8004fe4 <_free_r>
 8005176:	e7e9      	b.n	800514c <_realloc_r+0x1c>
 8005178:	4635      	mov	r5, r6
 800517a:	e7e7      	b.n	800514c <_realloc_r+0x1c>

0800517c <_sbrk_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	2300      	movs	r3, #0
 8005180:	4d05      	ldr	r5, [pc, #20]	; (8005198 <_sbrk_r+0x1c>)
 8005182:	4604      	mov	r4, r0
 8005184:	4608      	mov	r0, r1
 8005186:	602b      	str	r3, [r5, #0]
 8005188:	f7fc fdc0 	bl	8001d0c <_sbrk>
 800518c:	1c43      	adds	r3, r0, #1
 800518e:	d102      	bne.n	8005196 <_sbrk_r+0x1a>
 8005190:	682b      	ldr	r3, [r5, #0]
 8005192:	b103      	cbz	r3, 8005196 <_sbrk_r+0x1a>
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	bd38      	pop	{r3, r4, r5, pc}
 8005198:	200002a8 	.word	0x200002a8

0800519c <__malloc_lock>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__malloc_lock+0x8>)
 800519e:	f000 b811 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 80051a2:	bf00      	nop
 80051a4:	200002b0 	.word	0x200002b0

080051a8 <__malloc_unlock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_unlock+0x8>)
 80051aa:	f000 b80c 	b.w	80051c6 <__retarget_lock_release_recursive>
 80051ae:	bf00      	nop
 80051b0:	200002b0 	.word	0x200002b0

080051b4 <_malloc_usable_size_r>:
 80051b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b8:	1f18      	subs	r0, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bfbc      	itt	lt
 80051be:	580b      	ldrlt	r3, [r1, r0]
 80051c0:	18c0      	addlt	r0, r0, r3
 80051c2:	4770      	bx	lr

080051c4 <__retarget_lock_acquire_recursive>:
 80051c4:	4770      	bx	lr

080051c6 <__retarget_lock_release_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <_init>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr

080051d4 <_fini>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	bf00      	nop
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr
