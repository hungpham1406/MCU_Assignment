
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004020  08004020  00014020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004128  08004128  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004128  08004128  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004128  08004128  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004128  08004128  00014128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800412c  0800412c  0001412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000090  080041c0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  080041c0  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012510  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002788  00000000  00000000  000325c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00034d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00035a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e72  00000000  00000000  00036698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001024d  00000000  00000000  0004f50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b4f5  00000000  00000000  0005f757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eac4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  000eaca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004008 	.word	0x08004008

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004008 	.word	0x08004008

0800014c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port};

void initStateForButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initStateForButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initStateForButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initStateForButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initStateForButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initStateForButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initStateForButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2100      	movs	r1, #0
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b02      	cmp	r3, #2
 800019e:	dddb      	ble.n	8000158 <initStateForButton+0xc>
	 }
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000160 	.word	0x20000160
 80001b0:	2000016c 	.word	0x2000016c
 80001b4:	20000190 	.word	0x20000190
 80001b8:	20000154 	.word	0x20000154
 80001bc:	20000184 	.word	0x20000184
 80001c0:	20000178 	.word	0x20000178

080001c4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <isButtonPressed+0x30>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2100      	movs	r1, #0
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <isButtonPressed+0x24>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000178 	.word	0x20000178

080001f8 <subKeyProcess>:

void subKeyProcess(int key_index) {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <subKeyProcess+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2101      	movs	r1, #1
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000178 	.word	0x20000178

08000218 <getKeyInput>:

void getKeyInput() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e076      	b.n	8000312 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000224:	4a3f      	ldr	r2, [pc, #252]	; (8000324 <getKeyInput+0x10c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	493e      	ldr	r1, [pc, #248]	; (8000328 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000234:	4a3d      	ldr	r2, [pc, #244]	; (800032c <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4939      	ldr	r1, [pc, #228]	; (8000324 <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000244:	4a3a      	ldr	r2, [pc, #232]	; (8000330 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4939      	ldr	r1, [pc, #228]	; (8000334 <getKeyInput+0x11c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f001 fbe8 	bl	8001a2c <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	4619      	mov	r1, r3
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <getKeyInput+0x114>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <getKeyInput+0x110>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	492c      	ldr	r1, [pc, #176]	; (8000324 <getKeyInput+0x10c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d147      	bne.n	800030c <getKeyInput+0xf4>
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	4929      	ldr	r1, [pc, #164]	; (800032c <getKeyInput+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028c:	429a      	cmp	r2, r3
 800028e:	d13d      	bne.n	800030c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 8000290:	4a29      	ldr	r2, [pc, #164]	; (8000338 <getKeyInput+0x120>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <getKeyInput+0x114>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d016      	beq.n	80002d2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <getKeyInput+0x114>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4922      	ldr	r1, [pc, #136]	; (8000338 <getKeyInput+0x120>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <getKeyInput+0x114>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d125      	bne.n	800030c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ff99 	bl	80001f8 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <getKeyInput+0x124>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	21c8      	movs	r1, #200	; 0xc8
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d0:	e01c      	b.n	800030c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80002d2:	4a1a      	ldr	r2, [pc, #104]	; (800033c <getKeyInput+0x124>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4917      	ldr	r1, [pc, #92]	; (800033c <getKeyInput+0x124>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <getKeyInput+0x124>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dc0d      	bgt.n	800030c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <getKeyInput+0x114>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <getKeyInput+0xea>
						subKeyProcess(i);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff7b 	bl	80001f8 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <getKeyInput+0x124>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	21c8      	movs	r1, #200	; 0xc8
 8000308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b02      	cmp	r3, #2
 8000316:	dd85      	ble.n	8000224 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000016c 	.word	0x2000016c
 8000328:	20000160 	.word	0x20000160
 800032c:	20000190 	.word	0x20000190
 8000330:	20000008 	.word	0x20000008
 8000334:	20000000 	.word	0x20000000
 8000338:	20000154 	.word	0x20000154
 800033c:	20000184 	.word	0x20000184

08000340 <turnOffLed>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};

void turnOffLed() {
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	480a      	ldr	r0, [pc, #40]	; (8000374 <turnOffLed+0x34>)
 800034c:	f001 fb85 	bl	8001a5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <turnOffLed+0x38>)
 8000356:	f001 fb80 	bl	8001a5a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2120      	movs	r1, #32
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <turnOffLed+0x38>)
 8000360:	f001 fb7b 	bl	8001a5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	4803      	ldr	r0, [pc, #12]	; (8000378 <turnOffLed+0x38>)
 800036a:	f001 fb76 	bl	8001a5a <HAL_GPIO_WritePin>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <displayLed>:

void displayLed(int led_index) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b0a      	subs	r3, #10
 8000388:	2b0d      	cmp	r3, #13
 800038a:	f200 80b9 	bhi.w	8000500 <displayLed+0x184>
 800038e:	a201      	add	r2, pc, #4	; (adr r2, 8000394 <displayLed+0x18>)
 8000390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000394:	080003cd 	.word	0x080003cd
 8000398:	080003f9 	.word	0x080003f9
 800039c:	08000425 	.word	0x08000425
 80003a0:	08000501 	.word	0x08000501
 80003a4:	08000501 	.word	0x08000501
 80003a8:	08000501 	.word	0x08000501
 80003ac:	08000501 	.word	0x08000501
 80003b0:	08000501 	.word	0x08000501
 80003b4:	08000501 	.word	0x08000501
 80003b8:	08000501 	.word	0x08000501
 80003bc:	08000451 	.word	0x08000451
 80003c0:	0800047d 	.word	0x0800047d
 80003c4:	080004a9 	.word	0x080004a9
 80003c8:	080004d5 	.word	0x080004d5
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d2:	484e      	ldr	r0, [pc, #312]	; (800050c <displayLed+0x190>)
 80003d4:	f001 fb41 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	484c      	ldr	r0, [pc, #304]	; (8000510 <displayLed+0x194>)
 80003de:	f001 fb3c 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003e2:	2201      	movs	r2, #1
 80003e4:	2120      	movs	r1, #32
 80003e6:	484a      	ldr	r0, [pc, #296]	; (8000510 <displayLed+0x194>)
 80003e8:	f001 fb37 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2110      	movs	r1, #16
 80003f0:	4847      	ldr	r0, [pc, #284]	; (8000510 <displayLed+0x194>)
 80003f2:	f001 fb32 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 80003f6:	e084      	b.n	8000502 <displayLed+0x186>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003fe:	4843      	ldr	r0, [pc, #268]	; (800050c <displayLed+0x190>)
 8000400:	f001 fb2b 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000404:	2201      	movs	r2, #1
 8000406:	2108      	movs	r1, #8
 8000408:	4841      	ldr	r0, [pc, #260]	; (8000510 <displayLed+0x194>)
 800040a:	f001 fb26 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2120      	movs	r1, #32
 8000412:	483f      	ldr	r0, [pc, #252]	; (8000510 <displayLed+0x194>)
 8000414:	f001 fb21 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000418:	2201      	movs	r2, #1
 800041a:	2110      	movs	r1, #16
 800041c:	483c      	ldr	r0, [pc, #240]	; (8000510 <displayLed+0x194>)
 800041e:	f001 fb1c 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 8000422:	e06e      	b.n	8000502 <displayLed+0x186>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	4838      	ldr	r0, [pc, #224]	; (800050c <displayLed+0x190>)
 800042c:	f001 fb15 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2108      	movs	r1, #8
 8000434:	4836      	ldr	r0, [pc, #216]	; (8000510 <displayLed+0x194>)
 8000436:	f001 fb10 	bl	8001a5a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	4834      	ldr	r0, [pc, #208]	; (8000510 <displayLed+0x194>)
 8000440:	f001 fb0b 	bl	8001a5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2110      	movs	r1, #16
 8000448:	4831      	ldr	r0, [pc, #196]	; (8000510 <displayLed+0x194>)
 800044a:	f001 fb06 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 800044e:	e058      	b.n	8000502 <displayLed+0x186>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000456:	482d      	ldr	r0, [pc, #180]	; (800050c <displayLed+0x190>)
 8000458:	f001 faff 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2108      	movs	r1, #8
 8000460:	482b      	ldr	r0, [pc, #172]	; (8000510 <displayLed+0x194>)
 8000462:	f001 fafa 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2120      	movs	r1, #32
 800046a:	4829      	ldr	r0, [pc, #164]	; (8000510 <displayLed+0x194>)
 800046c:	f001 faf5 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2110      	movs	r1, #16
 8000474:	4826      	ldr	r0, [pc, #152]	; (8000510 <displayLed+0x194>)
 8000476:	f001 faf0 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 800047a:	e042      	b.n	8000502 <displayLed+0x186>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000482:	4822      	ldr	r0, [pc, #136]	; (800050c <displayLed+0x190>)
 8000484:	f001 fae9 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2108      	movs	r1, #8
 800048c:	4820      	ldr	r0, [pc, #128]	; (8000510 <displayLed+0x194>)
 800048e:	f001 fae4 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2120      	movs	r1, #32
 8000496:	481e      	ldr	r0, [pc, #120]	; (8000510 <displayLed+0x194>)
 8000498:	f001 fadf 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2110      	movs	r1, #16
 80004a0:	481b      	ldr	r0, [pc, #108]	; (8000510 <displayLed+0x194>)
 80004a2:	f001 fada 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 80004a6:	e02c      	b.n	8000502 <displayLed+0x186>
	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	4817      	ldr	r0, [pc, #92]	; (800050c <displayLed+0x190>)
 80004b0:	f001 fad3 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2108      	movs	r1, #8
 80004b8:	4815      	ldr	r0, [pc, #84]	; (8000510 <displayLed+0x194>)
 80004ba:	f001 face 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2120      	movs	r1, #32
 80004c2:	4813      	ldr	r0, [pc, #76]	; (8000510 <displayLed+0x194>)
 80004c4:	f001 fac9 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4810      	ldr	r0, [pc, #64]	; (8000510 <displayLed+0x194>)
 80004ce:	f001 fac4 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 80004d2:	e016      	b.n	8000502 <displayLed+0x186>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <displayLed+0x190>)
 80004dc:	f001 fabd 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <displayLed+0x194>)
 80004e6:	f001 fab8 	bl	8001a5a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2120      	movs	r1, #32
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <displayLed+0x194>)
 80004f0:	f001 fab3 	bl	8001a5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2110      	movs	r1, #16
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <displayLed+0x194>)
 80004fa:	f001 faae 	bl	8001a5a <HAL_GPIO_WritePin>
		break;
 80004fe:	e000      	b.n	8000502 <displayLed+0x186>
	default:
		break;
 8000500:	bf00      	nop
	}
}
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40010800 	.word	0x40010800
 8000510:	40010c00 	.word	0x40010c00

08000514 <switchMode2>:
 *      Author: Asus
 */

#include "fsm_automatic.h"
//hello
void switchMode2() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	status = RED_MAN;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <switchMode2+0x24>)
 800051a:	220a      	movs	r2, #10
 800051c:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <switchMode2+0x28>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <switchMode2+0x2c>)
 8000524:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000526:	2064      	movs	r0, #100	; 0x64
 8000528:	f000 fcf2 	bl	8000f10 <setTimer2>
	setTimer4(25);
 800052c:	2019      	movs	r0, #25
 800052e:	f000 fd03 	bl	8000f38 <setTimer4>

//	updateLedBufferVal(counter1/10, 2, counter1%10, 2);
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	200000b4 	.word	0x200000b4
 800053c:	20000014 	.word	0x20000014
 8000540:	200000ac 	.word	0x200000ac

08000544 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
	switch(status) {
 800054a:	4b86      	ldr	r3, [pc, #536]	; (8000764 <fsm_automatic_run+0x220>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	3b01      	subs	r3, #1
 8000550:	2b04      	cmp	r3, #4
 8000552:	f200 8166 	bhi.w	8000822 <fsm_automatic_run+0x2de>
 8000556:	a201      	add	r2, pc, #4	; (adr r2, 800055c <fsm_automatic_run+0x18>)
 8000558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800055c:	08000571 	.word	0x08000571
 8000560:	080005a9 	.word	0x080005a9
 8000564:	08000641 	.word	0x08000641
 8000568:	080006cd 	.word	0x080006cd
 800056c:	08000799 	.word	0x08000799
	case INIT:
		turnOffLed();
 8000570:	f7ff fee6 	bl	8000340 <turnOffLed>

		status = RED1_GREEN2_AUTO;
 8000574:	4b7b      	ldr	r3, [pc, #492]	; (8000764 <fsm_automatic_run+0x220>)
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 800057a:	4b7b      	ldr	r3, [pc, #492]	; (8000768 <fsm_automatic_run+0x224>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a7b      	ldr	r2, [pc, #492]	; (800076c <fsm_automatic_run+0x228>)
 8000580:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000582:	4b7b      	ldr	r3, [pc, #492]	; (8000770 <fsm_automatic_run+0x22c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a7b      	ldr	r2, [pc, #492]	; (8000774 <fsm_automatic_run+0x230>)
 8000588:	6013      	str	r3, [r2, #0]

//		updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		setTimer1(greenTimer*100);
 800058a:	4b79      	ldr	r3, [pc, #484]	; (8000770 <fsm_automatic_run+0x22c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2264      	movs	r2, #100	; 0x64
 8000590:	fb02 f303 	mul.w	r3, r2, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fca7 	bl	8000ee8 <setTimer1>
		setTimer2(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 fcb8 	bl	8000f10 <setTimer2>
		setTimer5(25);
 80005a0:	2019      	movs	r0, #25
 80005a2:	f000 fcdd 	bl	8000f60 <setTimer5>
		break;
 80005a6:	e145      	b.n	8000834 <fsm_automatic_run+0x2f0>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 80005a8:	2014      	movs	r0, #20
 80005aa:	f7ff fee7 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 80005ae:	4b72      	ldr	r3, [pc, #456]	; (8000778 <fsm_automatic_run+0x234>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d11d      	bne.n	80005f2 <fsm_automatic_run+0xae>
			int len= sprintf(str,"LED RED   = %d    LED GREEN  = %d\r\n",counter1,counter2);
 80005b6:	4b6d      	ldr	r3, [pc, #436]	; (800076c <fsm_automatic_run+0x228>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	4b6e      	ldr	r3, [pc, #440]	; (8000774 <fsm_automatic_run+0x230>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	496f      	ldr	r1, [pc, #444]	; (800077c <fsm_automatic_run+0x238>)
 80005c0:	486f      	ldr	r0, [pc, #444]	; (8000780 <fsm_automatic_run+0x23c>)
 80005c2:	f003 f8e7 	bl	8003794 <siprintf>
 80005c6:	6038      	str	r0, [r7, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d0:	496b      	ldr	r1, [pc, #428]	; (8000780 <fsm_automatic_run+0x23c>)
 80005d2:	486c      	ldr	r0, [pc, #432]	; (8000784 <fsm_automatic_run+0x240>)
 80005d4:	f002 fad8 	bl	8002b88 <HAL_UART_Transmit>
			setTimer2(100);
 80005d8:	2064      	movs	r0, #100	; 0x64
 80005da:	f000 fc99 	bl	8000f10 <setTimer2>
			counter1--;
 80005de:	4b63      	ldr	r3, [pc, #396]	; (800076c <fsm_automatic_run+0x228>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a61      	ldr	r2, [pc, #388]	; (800076c <fsm_automatic_run+0x228>)
 80005e6:	6013      	str	r3, [r2, #0]
			counter2--;
 80005e8:	4b62      	ldr	r3, [pc, #392]	; (8000774 <fsm_automatic_run+0x230>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	4a61      	ldr	r2, [pc, #388]	; (8000774 <fsm_automatic_run+0x230>)
 80005f0:	6013      	str	r3, [r2, #0]
//			str ="Hello world";
//			HAL_UART_Transmit(&huart2, str, strlen(str), 1000);

		}

		if(timer1_flag == 1) {
 80005f2:	4b65      	ldr	r3, [pc, #404]	; (8000788 <fsm_automatic_run+0x244>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d118      	bne.n	800062c <fsm_automatic_run+0xe8>
			status = RED1_YELLOW2_AUTO;
 80005fa:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <fsm_automatic_run+0x220>)
 80005fc:	2203      	movs	r2, #3
 80005fe:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000600:	4b59      	ldr	r3, [pc, #356]	; (8000768 <fsm_automatic_run+0x224>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b5a      	ldr	r3, [pc, #360]	; (8000770 <fsm_automatic_run+0x22c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	2264      	movs	r2, #100	; 0x64
 800060c:	fb02 f303 	mul.w	r3, r2, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fc69 	bl	8000ee8 <setTimer1>
			counter1 = redTimer-greenTimer;
 8000616:	4b54      	ldr	r3, [pc, #336]	; (8000768 <fsm_automatic_run+0x224>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4b55      	ldr	r3, [pc, #340]	; (8000770 <fsm_automatic_run+0x22c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a52      	ldr	r2, [pc, #328]	; (800076c <fsm_automatic_run+0x228>)
 8000622:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 8000624:	4b59      	ldr	r3, [pc, #356]	; (800078c <fsm_automatic_run+0x248>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a52      	ldr	r2, [pc, #328]	; (8000774 <fsm_automatic_run+0x230>)
 800062a:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fdc9 	bl	80001c4 <isButtonPressed>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	f000 80f6 	beq.w	8000826 <fsm_automatic_run+0x2e2>
			switchMode2();
 800063a:	f7ff ff6b 	bl	8000514 <switchMode2>
		}
		break;
 800063e:	e0f2      	b.n	8000826 <fsm_automatic_run+0x2e2>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 8000640:	2015      	movs	r0, #21
 8000642:	f7ff fe9b 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 8000646:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <fsm_automatic_run+0x234>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d11d      	bne.n	800068a <fsm_automatic_run+0x146>
			int len= sprintf(str,"LED RED   = %d    LED YELLOW = %d\r\n",counter1,counter2);
 800064e:	4b47      	ldr	r3, [pc, #284]	; (800076c <fsm_automatic_run+0x228>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	4b48      	ldr	r3, [pc, #288]	; (8000774 <fsm_automatic_run+0x230>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	494e      	ldr	r1, [pc, #312]	; (8000790 <fsm_automatic_run+0x24c>)
 8000658:	4849      	ldr	r0, [pc, #292]	; (8000780 <fsm_automatic_run+0x23c>)
 800065a:	f003 f89b 	bl	8003794 <siprintf>
 800065e:	6078      	str	r0, [r7, #4]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	b29a      	uxth	r2, r3
 8000664:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000668:	4945      	ldr	r1, [pc, #276]	; (8000780 <fsm_automatic_run+0x23c>)
 800066a:	4846      	ldr	r0, [pc, #280]	; (8000784 <fsm_automatic_run+0x240>)
 800066c:	f002 fa8c 	bl	8002b88 <HAL_UART_Transmit>
			setTimer2(100);
 8000670:	2064      	movs	r0, #100	; 0x64
 8000672:	f000 fc4d 	bl	8000f10 <setTimer2>
			counter1--;
 8000676:	4b3d      	ldr	r3, [pc, #244]	; (800076c <fsm_automatic_run+0x228>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3b01      	subs	r3, #1
 800067c:	4a3b      	ldr	r2, [pc, #236]	; (800076c <fsm_automatic_run+0x228>)
 800067e:	6013      	str	r3, [r2, #0]
			counter2--;
 8000680:	4b3c      	ldr	r3, [pc, #240]	; (8000774 <fsm_automatic_run+0x230>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	3b01      	subs	r3, #1
 8000686:	4a3b      	ldr	r2, [pc, #236]	; (8000774 <fsm_automatic_run+0x230>)
 8000688:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);

		}

		if(timer1_flag == 1) {
 800068a:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <fsm_automatic_run+0x244>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d112      	bne.n	80006b8 <fsm_automatic_run+0x174>
			status = GREEN1_RED2_AUTO;
 8000692:	4b34      	ldr	r3, [pc, #208]	; (8000764 <fsm_automatic_run+0x220>)
 8000694:	2204      	movs	r2, #4
 8000696:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000698:	4b35      	ldr	r3, [pc, #212]	; (8000770 <fsm_automatic_run+0x22c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2264      	movs	r2, #100	; 0x64
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fc20 	bl	8000ee8 <setTimer1>
			counter1 = greenTimer;
 80006a8:	4b31      	ldr	r3, [pc, #196]	; (8000770 <fsm_automatic_run+0x22c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <fsm_automatic_run+0x228>)
 80006ae:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <fsm_automatic_run+0x224>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <fsm_automatic_run+0x230>)
 80006b6:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 80006b8:	2000      	movs	r0, #0
 80006ba:	f7ff fd83 	bl	80001c4 <isButtonPressed>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	f000 80b2 	beq.w	800082a <fsm_automatic_run+0x2e6>
			switchMode2();
 80006c6:	f7ff ff25 	bl	8000514 <switchMode2>
		}
		break;
 80006ca:	e0ae      	b.n	800082a <fsm_automatic_run+0x2e6>
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 80006cc:	2016      	movs	r0, #22
 80006ce:	f7ff fe55 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 80006d2:	4b29      	ldr	r3, [pc, #164]	; (8000778 <fsm_automatic_run+0x234>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d11d      	bne.n	8000716 <fsm_automatic_run+0x1d2>
			int len= sprintf(str,"LED GREEN = %d    LED RED    = %d\r\n",counter1,counter2);
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <fsm_automatic_run+0x228>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <fsm_automatic_run+0x230>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	492c      	ldr	r1, [pc, #176]	; (8000794 <fsm_automatic_run+0x250>)
 80006e4:	4826      	ldr	r0, [pc, #152]	; (8000780 <fsm_automatic_run+0x23c>)
 80006e6:	f003 f855 	bl	8003794 <siprintf>
 80006ea:	60b8      	str	r0, [r7, #8]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f4:	4922      	ldr	r1, [pc, #136]	; (8000780 <fsm_automatic_run+0x23c>)
 80006f6:	4823      	ldr	r0, [pc, #140]	; (8000784 <fsm_automatic_run+0x240>)
 80006f8:	f002 fa46 	bl	8002b88 <HAL_UART_Transmit>
			setTimer2(100);
 80006fc:	2064      	movs	r0, #100	; 0x64
 80006fe:	f000 fc07 	bl	8000f10 <setTimer2>
			counter1--;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <fsm_automatic_run+0x228>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	4a18      	ldr	r2, [pc, #96]	; (800076c <fsm_automatic_run+0x228>)
 800070a:	6013      	str	r3, [r2, #0]
			counter2--;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <fsm_automatic_run+0x230>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3b01      	subs	r3, #1
 8000712:	4a18      	ldr	r2, [pc, #96]	; (8000774 <fsm_automatic_run+0x230>)
 8000714:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);

		}

		if(timer1_flag == 1) {
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <fsm_automatic_run+0x244>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d118      	bne.n	8000750 <fsm_automatic_run+0x20c>
			status = YELLOW1_RED2_AUTO;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <fsm_automatic_run+0x220>)
 8000720:	2205      	movs	r2, #5
 8000722:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <fsm_automatic_run+0x224>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <fsm_automatic_run+0x22c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	2264      	movs	r2, #100	; 0x64
 8000730:	fb02 f303 	mul.w	r3, r2, r3
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fbd7 	bl	8000ee8 <setTimer1>
			counter1 = yellowTimer;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <fsm_automatic_run+0x248>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <fsm_automatic_run+0x228>)
 8000740:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <fsm_automatic_run+0x224>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <fsm_automatic_run+0x22c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	4a09      	ldr	r2, [pc, #36]	; (8000774 <fsm_automatic_run+0x230>)
 800074e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fd37 	bl	80001c4 <isButtonPressed>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d068      	beq.n	800082e <fsm_automatic_run+0x2ea>
			switchMode2();
 800075c:	f7ff feda 	bl	8000514 <switchMode2>
		}
		break;
 8000760:	e065      	b.n	800082e <fsm_automatic_run+0x2ea>
 8000762:	bf00      	nop
 8000764:	200000b4 	.word	0x200000b4
 8000768:	20000014 	.word	0x20000014
 800076c:	200000ac 	.word	0x200000ac
 8000770:	2000001c 	.word	0x2000001c
 8000774:	200000b0 	.word	0x200000b0
 8000778:	20000128 	.word	0x20000128
 800077c:	08004020 	.word	0x08004020
 8000780:	200000b8 	.word	0x200000b8
 8000784:	200001e4 	.word	0x200001e4
 8000788:	20000120 	.word	0x20000120
 800078c:	20000018 	.word	0x20000018
 8000790:	08004044 	.word	0x08004044
 8000794:	08004068 	.word	0x08004068
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 8000798:	2017      	movs	r0, #23
 800079a:	f7ff fdef 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <fsm_automatic_run+0x2f8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d11d      	bne.n	80007e2 <fsm_automatic_run+0x29e>
			int len= sprintf(str,"LED RED   = %d    LED YELLOW = %d\r\n",counter1,counter2);
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <fsm_automatic_run+0x2fc>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <fsm_automatic_run+0x300>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4926      	ldr	r1, [pc, #152]	; (8000848 <fsm_automatic_run+0x304>)
 80007b0:	4826      	ldr	r0, [pc, #152]	; (800084c <fsm_automatic_run+0x308>)
 80007b2:	f002 ffef 	bl	8003794 <siprintf>
 80007b6:	60f8      	str	r0, [r7, #12]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c0:	4922      	ldr	r1, [pc, #136]	; (800084c <fsm_automatic_run+0x308>)
 80007c2:	4823      	ldr	r0, [pc, #140]	; (8000850 <fsm_automatic_run+0x30c>)
 80007c4:	f002 f9e0 	bl	8002b88 <HAL_UART_Transmit>
			setTimer2(100);
 80007c8:	2064      	movs	r0, #100	; 0x64
 80007ca:	f000 fba1 	bl	8000f10 <setTimer2>
			counter1--;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <fsm_automatic_run+0x2fc>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a1a      	ldr	r2, [pc, #104]	; (8000840 <fsm_automatic_run+0x2fc>)
 80007d6:	6013      	str	r3, [r2, #0]
			counter2--;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <fsm_automatic_run+0x300>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3b01      	subs	r3, #1
 80007de:	4a19      	ldr	r2, [pc, #100]	; (8000844 <fsm_automatic_run+0x300>)
 80007e0:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);

		}

		if(timer1_flag == 1) {
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <fsm_automatic_run+0x310>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d112      	bne.n	8000810 <fsm_automatic_run+0x2cc>
			status = RED1_GREEN2_AUTO;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <fsm_automatic_run+0x314>)
 80007ec:	2202      	movs	r2, #2
 80007ee:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <fsm_automatic_run+0x318>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2264      	movs	r2, #100	; 0x64
 80007f6:	fb02 f303 	mul.w	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fb74 	bl	8000ee8 <setTimer1>
			counter1 = redTimer;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <fsm_automatic_run+0x31c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <fsm_automatic_run+0x2fc>)
 8000806:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <fsm_automatic_run+0x318>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <fsm_automatic_run+0x300>)
 800080e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fcd7 	bl	80001c4 <isButtonPressed>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00a      	beq.n	8000832 <fsm_automatic_run+0x2ee>
			switchMode2();
 800081c:	f7ff fe7a 	bl	8000514 <switchMode2>
		}
		break;
 8000820:	e007      	b.n	8000832 <fsm_automatic_run+0x2ee>
	default:
		break;
 8000822:	bf00      	nop
 8000824:	e006      	b.n	8000834 <fsm_automatic_run+0x2f0>
		break;
 8000826:	bf00      	nop
 8000828:	e004      	b.n	8000834 <fsm_automatic_run+0x2f0>
		break;
 800082a:	bf00      	nop
 800082c:	e002      	b.n	8000834 <fsm_automatic_run+0x2f0>
		break;
 800082e:	bf00      	nop
 8000830:	e000      	b.n	8000834 <fsm_automatic_run+0x2f0>
		break;
 8000832:	bf00      	nop
	}
};
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000128 	.word	0x20000128
 8000840:	200000ac 	.word	0x200000ac
 8000844:	200000b0 	.word	0x200000b0
 8000848:	08004044 	.word	0x08004044
 800084c:	200000b8 	.word	0x200000b8
 8000850:	200001e4 	.word	0x200001e4
 8000854:	20000120 	.word	0x20000120
 8000858:	200000b4 	.word	0x200000b4
 800085c:	2000001c 	.word	0x2000001c
 8000860:	20000014 	.word	0x20000014

08000864 <switchMode3>:
 */


#include "fsm_manual.h"

void switchMode3() {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <switchMode3+0x24>)
 800086a:	220b      	movs	r2, #11
 800086c:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 800086e:	4b07      	ldr	r3, [pc, #28]	; (800088c <switchMode3+0x28>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <switchMode3+0x2c>)
 8000874:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000876:	2064      	movs	r0, #100	; 0x64
 8000878:	f000 fb4a 	bl	8000f10 <setTimer2>
	setTimer4(25);
 800087c:	2019      	movs	r0, #25
 800087e:	f000 fb5b 	bl	8000f38 <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000b4 	.word	0x200000b4
 800088c:	20000018 	.word	0x20000018
 8000890:	200000ac 	.word	0x200000ac

08000894 <switchMode4>:

void switchMode4() {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <switchMode4+0x24>)
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 800089e:	4b07      	ldr	r3, [pc, #28]	; (80008bc <switchMode4+0x28>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <switchMode4+0x2c>)
 80008a4:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 80008a6:	2064      	movs	r0, #100	; 0x64
 80008a8:	f000 fb32 	bl	8000f10 <setTimer2>
	setTimer4(25);
 80008ac:	2019      	movs	r0, #25
 80008ae:	f000 fb43 	bl	8000f38 <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000b4 	.word	0x200000b4
 80008bc:	2000001c 	.word	0x2000001c
 80008c0:	200000ac 	.word	0x200000ac

080008c4 <fsm_manual_run>:

void fsm_manual_run() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
	switch(status) {
 80008ca:	4bab      	ldr	r3, [pc, #684]	; (8000b78 <fsm_manual_run+0x2b4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b0a      	subs	r3, #10
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	f200 8140 	bhi.w	8000b56 <fsm_manual_run+0x292>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <fsm_manual_run+0x18>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	080008f5 	.word	0x080008f5
 80008e0:	080009bf 	.word	0x080009bf
 80008e4:	08000a8b 	.word	0x08000a8b
 80008e8:	08000937 	.word	0x08000937
 80008ec:	08000a01 	.word	0x08000a01
 80008f0:	08000acd 	.word	0x08000acd



	case RED_MAN:
		displayLed(RED_MAN);
 80008f4:	200a      	movs	r0, #10
 80008f6:	f7ff fd41 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 80008fa:	4ba0      	ldr	r3, [pc, #640]	; (8000b7c <fsm_manual_run+0x2b8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d102      	bne.n	8000908 <fsm_manual_run+0x44>
			setTimer2(100);
 8000902:	2064      	movs	r0, #100	; 0x64
 8000904:	f000 fb04 	bl	8000f10 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff fc5b 	bl	80001c4 <isButtonPressed>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <fsm_manual_run+0x54>
			switchMode3();
 8000914:	f7ff ffa6 	bl	8000864 <switchMode3>
		}

		if(isButtonPressed(1)) {
 8000918:	2001      	movs	r0, #1
 800091a:	f7ff fc53 	bl	80001c4 <isButtonPressed>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	f000 811a 	beq.w	8000b5a <fsm_manual_run+0x296>
			status = RED_MAN_MODIFY;
 8000926:	4b94      	ldr	r3, [pc, #592]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000928:	220d      	movs	r2, #13
 800092a:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 800092c:	4b94      	ldr	r3, [pc, #592]	; (8000b80 <fsm_manual_run+0x2bc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a94      	ldr	r2, [pc, #592]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000932:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 8000934:	e111      	b.n	8000b5a <fsm_manual_run+0x296>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 8000936:	200a      	movs	r0, #10
 8000938:	f7ff fd20 	bl	800037c <displayLed>

		if(isButtonPressed(0)) {
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fc41 	bl	80001c4 <isButtonPressed>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d002      	beq.n	800094e <fsm_manual_run+0x8a>
			status = RED_MAN;
 8000948:	4b8b      	ldr	r3, [pc, #556]	; (8000b78 <fsm_manual_run+0x2b4>)
 800094a:	220a      	movs	r2, #10
 800094c:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff fc38 	bl	80001c4 <isButtonPressed>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d01b      	beq.n	8000992 <fsm_manual_run+0xce>
			timerMan++;
 800095a:	4b8a      	ldr	r3, [pc, #552]	; (8000b84 <fsm_manual_run+0x2c0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	4a88      	ldr	r2, [pc, #544]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000962:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 8000964:	4b87      	ldr	r3, [pc, #540]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4987      	ldr	r1, [pc, #540]	; (8000b88 <fsm_manual_run+0x2c4>)
 800096c:	4887      	ldr	r0, [pc, #540]	; (8000b8c <fsm_manual_run+0x2c8>)
 800096e:	f002 ff11 	bl	8003794 <siprintf>
 8000972:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	b29a      	uxth	r2, r3
 8000978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097c:	4983      	ldr	r1, [pc, #524]	; (8000b8c <fsm_manual_run+0x2c8>)
 800097e:	4884      	ldr	r0, [pc, #528]	; (8000b90 <fsm_manual_run+0x2cc>)
 8000980:	f002 f902 	bl	8002b88 <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 8000984:	4b7f      	ldr	r3, [pc, #508]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b63      	cmp	r3, #99	; 0x63
 800098a:	dd02      	ble.n	8000992 <fsm_manual_run+0xce>
 800098c:	4b7d      	ldr	r3, [pc, #500]	; (8000b84 <fsm_manual_run+0x2c0>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 8000992:	2002      	movs	r0, #2
 8000994:	f7ff fc16 	bl	80001c4 <isButtonPressed>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	f000 80df 	beq.w	8000b5e <fsm_manual_run+0x29a>
			status = INIT;
 80009a0:	4b75      	ldr	r3, [pc, #468]	; (8000b78 <fsm_manual_run+0x2b4>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
			redTimer = timerMan;
 80009a6:	4b77      	ldr	r3, [pc, #476]	; (8000b84 <fsm_manual_run+0x2c0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a75      	ldr	r2, [pc, #468]	; (8000b80 <fsm_manual_run+0x2bc>)
 80009ac:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 80009ae:	4b74      	ldr	r3, [pc, #464]	; (8000b80 <fsm_manual_run+0x2bc>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b78      	ldr	r3, [pc, #480]	; (8000b94 <fsm_manual_run+0x2d0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	4a77      	ldr	r2, [pc, #476]	; (8000b98 <fsm_manual_run+0x2d4>)
 80009ba:	6013      	str	r3, [r2, #0]
		}

		break;
 80009bc:	e0cf      	b.n	8000b5e <fsm_manual_run+0x29a>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 80009be:	200b      	movs	r0, #11
 80009c0:	f7ff fcdc 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 80009c4:	4b6d      	ldr	r3, [pc, #436]	; (8000b7c <fsm_manual_run+0x2b8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d102      	bne.n	80009d2 <fsm_manual_run+0x10e>
			setTimer2(100);
 80009cc:	2064      	movs	r0, #100	; 0x64
 80009ce:	f000 fa9f 	bl	8000f10 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fbf6 	bl	80001c4 <isButtonPressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <fsm_manual_run+0x11e>
			switchMode4();
 80009de:	f7ff ff59 	bl	8000894 <switchMode4>
		}

		if(isButtonPressed(1)) {
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fbee 	bl	80001c4 <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f000 80b9 	beq.w	8000b62 <fsm_manual_run+0x29e>
			status = YELLOW_MAN_MODIFY;
 80009f0:	4b61      	ldr	r3, [pc, #388]	; (8000b78 <fsm_manual_run+0x2b4>)
 80009f2:	220e      	movs	r2, #14
 80009f4:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 80009f6:	4b67      	ldr	r3, [pc, #412]	; (8000b94 <fsm_manual_run+0x2d0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a62      	ldr	r2, [pc, #392]	; (8000b84 <fsm_manual_run+0x2c0>)
 80009fc:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 80009fe:	e0b0      	b.n	8000b62 <fsm_manual_run+0x29e>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 8000a00:	200b      	movs	r0, #11
 8000a02:	f7ff fcbb 	bl	800037c <displayLed>

		if(isButtonPressed(0)) {
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff fbdc 	bl	80001c4 <isButtonPressed>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <fsm_manual_run+0x154>
			status = YELLOW_MAN;
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000a14:	220b      	movs	r2, #11
 8000a16:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff fbd3 	bl	80001c4 <isButtonPressed>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d01d      	beq.n	8000a60 <fsm_manual_run+0x19c>
			timerMan++;
 8000a24:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3301      	adds	r3, #1
 8000a2a:	4a56      	ldr	r2, [pc, #344]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000a2c:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 8000a2e:	4b55      	ldr	r3, [pc, #340]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	4959      	ldr	r1, [pc, #356]	; (8000b9c <fsm_manual_run+0x2d8>)
 8000a36:	4855      	ldr	r0, [pc, #340]	; (8000b8c <fsm_manual_run+0x2c8>)
 8000a38:	f002 feac 	bl	8003794 <siprintf>
 8000a3c:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	4951      	ldr	r1, [pc, #324]	; (8000b8c <fsm_manual_run+0x2c8>)
 8000a48:	4851      	ldr	r0, [pc, #324]	; (8000b90 <fsm_manual_run+0x2cc>)
 8000a4a:	f002 f89d 	bl	8002b88 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b4b      	ldr	r3, [pc, #300]	; (8000b80 <fsm_manual_run+0x2bc>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	db02      	blt.n	8000a60 <fsm_manual_run+0x19c>
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 8000a60:	2002      	movs	r0, #2
 8000a62:	f7ff fbaf 	bl	80001c4 <isButtonPressed>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d07c      	beq.n	8000b66 <fsm_manual_run+0x2a2>
			status = INIT;
 8000a6c:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
			yellowTimer = timerMan;
 8000a72:	4b44      	ldr	r3, [pc, #272]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a47      	ldr	r2, [pc, #284]	; (8000b94 <fsm_manual_run+0x2d0>)
 8000a78:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <fsm_manual_run+0x2bc>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <fsm_manual_run+0x2d0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	4a44      	ldr	r2, [pc, #272]	; (8000b98 <fsm_manual_run+0x2d4>)
 8000a86:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a88:	e06d      	b.n	8000b66 <fsm_manual_run+0x2a2>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f7ff fc76 	bl	800037c <displayLed>

		if(timer2_flag == 1) {
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <fsm_manual_run+0x2b8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d102      	bne.n	8000a9e <fsm_manual_run+0x1da>
			setTimer2(100);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f000 fa39 	bl	8000f10 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fb90 	bl	80001c4 <isButtonPressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <fsm_manual_run+0x1ec>
			status = INIT;
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fb87 	bl	80001c4 <isButtonPressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d056      	beq.n	8000b6a <fsm_manual_run+0x2a6>
			status = GREEN_MAN_MODIFY;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000abe:	220f      	movs	r2, #15
 8000ac0:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <fsm_manual_run+0x2d4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a2f      	ldr	r2, [pc, #188]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000ac8:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 8000aca:	e04e      	b.n	8000b6a <fsm_manual_run+0x2a6>
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8000acc:	200c      	movs	r0, #12
 8000ace:	f7ff fc55 	bl	800037c <displayLed>

		if(isButtonPressed(0)) {
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fb76 	bl	80001c4 <isButtonPressed>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <fsm_manual_run+0x220>
			status = GREEN_MAN;
 8000ade:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fb6d 	bl	80001c4 <isButtonPressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d01d      	beq.n	8000b2c <fsm_manual_run+0x268>
			timerMan++;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4a23      	ldr	r2, [pc, #140]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000af8:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 8000afa:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	4927      	ldr	r1, [pc, #156]	; (8000ba0 <fsm_manual_run+0x2dc>)
 8000b02:	4822      	ldr	r0, [pc, #136]	; (8000b8c <fsm_manual_run+0x2c8>)
 8000b04:	f002 fe46 	bl	8003794 <siprintf>
 8000b08:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b12:	491e      	ldr	r1, [pc, #120]	; (8000b8c <fsm_manual_run+0x2c8>)
 8000b14:	481e      	ldr	r0, [pc, #120]	; (8000b90 <fsm_manual_run+0x2cc>)
 8000b16:	f002 f837 	bl	8002b88 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <fsm_manual_run+0x2bc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	db02      	blt.n	8000b2c <fsm_manual_run+0x268>
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fb49 	bl	80001c4 <isButtonPressed>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d01a      	beq.n	8000b6e <fsm_manual_run+0x2aa>
			status = INIT;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <fsm_manual_run+0x2b4>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
			greenTimer = timerMan;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <fsm_manual_run+0x2c0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <fsm_manual_run+0x2d4>)
 8000b44:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <fsm_manual_run+0x2bc>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <fsm_manual_run+0x2d4>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <fsm_manual_run+0x2d0>)
 8000b52:	6013      	str	r3, [r2, #0]
		}
		break;
 8000b54:	e00b      	b.n	8000b6e <fsm_manual_run+0x2aa>
	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e00a      	b.n	8000b70 <fsm_manual_run+0x2ac>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e008      	b.n	8000b70 <fsm_manual_run+0x2ac>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e006      	b.n	8000b70 <fsm_manual_run+0x2ac>
		break;
 8000b62:	bf00      	nop
 8000b64:	e004      	b.n	8000b70 <fsm_manual_run+0x2ac>
		break;
 8000b66:	bf00      	nop
 8000b68:	e002      	b.n	8000b70 <fsm_manual_run+0x2ac>
		break;
 8000b6a:	bf00      	nop
 8000b6c:	e000      	b.n	8000b70 <fsm_manual_run+0x2ac>
		break;
 8000b6e:	bf00      	nop
	}
};
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000b4 	.word	0x200000b4
 8000b7c:	20000128 	.word	0x20000128
 8000b80:	20000014 	.word	0x20000014
 8000b84:	20000144 	.word	0x20000144
 8000b88:	0800408c 	.word	0x0800408c
 8000b8c:	200000b8 	.word	0x200000b8
 8000b90:	200001e4 	.word	0x200001e4
 8000b94:	20000018 	.word	0x20000018
 8000b98:	2000001c 	.word	0x2000001c
 8000b9c:	080040a0 	.word	0x080040a0
 8000ba0:	080040b4 	.word	0x080040b4

08000ba4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f000 fb9a 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 f818 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 f8d0 	bl	8000d54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb4:	f000 f8a4 	bl	8000d00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000bb8:	f000 f854 	bl	8000c64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <main+0x34>)
 8000bbe:	f001 fbe5 	bl	800238c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 8000bc2:	f7ff fac3 	bl	800014c <initStateForButton>
  status = INIT;
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <main+0x38>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000bcc:	f7ff fcba 	bl	8000544 <fsm_automatic_run>
	  fsm_manual_run();
 8000bd0:	f7ff fe78 	bl	80008c4 <fsm_manual_run>
	  fsm_automatic_run();
 8000bd4:	e7fa      	b.n	8000bcc <main+0x28>
 8000bd6:	bf00      	nop
 8000bd8:	2000019c 	.word	0x2000019c
 8000bdc:	200000b4 	.word	0x200000b4

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0318 	add.w	r3, r7, #24
 8000bea:	2228      	movs	r2, #40	; 0x28
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fdc8 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2310      	movs	r3, #16
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c12:	2300      	movs	r3, #0
 8000c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c16:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 ff55 	bl	8001ad0 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000c2c:	f000 f956 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2302      	movs	r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 f9c0 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c56:	f000 f941 	bl	8000edc <Error_Handler>
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3740      	adds	r7, #64	; 0x40
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000c8a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000c98:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000caa:	4814      	ldr	r0, [pc, #80]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000cac:	f001 fb1e 	bl	80022ec <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cb6:	f000 f911 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000cc8:	f001 fcba 	bl	8002640 <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cd2:	f000 f903 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cde:	463b      	mov	r3, r7
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <MX_TIM2_Init+0x98>)
 8000ce4:	f001 fe90 	bl	8002a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cee:	f000 f8f5 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000019c 	.word	0x2000019c

08000d00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d06:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_USART2_UART_Init+0x50>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_USART2_UART_Init+0x4c>)
 8000d38:	f001 fed6 	bl	8002ae8 <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d42:	f000 f8cb 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001e4 	.word	0x200001e4
 8000d50:	40004400 	.word	0x40004400

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6193      	str	r3, [r2, #24]
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d80:	4b4b      	ldr	r3, [pc, #300]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d86:	f043 0320 	orr.w	r3, r3, #32
 8000d8a:	6193      	str	r3, [r2, #24]
 8000d8c:	4b48      	ldr	r3, [pc, #288]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a44      	ldr	r2, [pc, #272]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f003 0304 	and.w	r3, r3, #4
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a3e      	ldr	r2, [pc, #248]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000db6:	f043 0308 	orr.w	r3, r3, #8
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	; (8000eb0 <MX_GPIO_Init+0x15c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	603b      	str	r3, [r7, #0]
 8000dc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000dce:	4839      	ldr	r0, [pc, #228]	; (8000eb4 <MX_GPIO_Init+0x160>)
 8000dd0:	f000 fe43 	bl	8001a5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000dda:	4837      	ldr	r0, [pc, #220]	; (8000eb8 <MX_GPIO_Init+0x164>)
 8000ddc:	f000 fe3d 	bl	8001a5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	4b35      	ldr	r3, [pc, #212]	; (8000ebc <MX_GPIO_Init+0x168>)
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	4619      	mov	r1, r3
 8000df4:	4832      	ldr	r0, [pc, #200]	; (8000ec0 <MX_GPIO_Init+0x16c>)
 8000df6:	f000 fc95 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4829      	ldr	r0, [pc, #164]	; (8000eb4 <MX_GPIO_Init+0x160>)
 8000e0e:	f000 fc89 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 8000e12:	2312      	movs	r3, #18
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <MX_GPIO_Init+0x160>)
 8000e26:	f000 fc7d 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8000e2a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <MX_GPIO_Init+0x160>)
 8000e44:	f000 fc6e 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <MX_GPIO_Init+0x160>)
 8000e5c:	f000 fc62 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_GPIO_Init+0x164>)
 8000e74:	f000 fc56 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e78:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <MX_GPIO_Init+0x164>)
 8000e92:	f000 fc47 	bl	8001724 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2028      	movs	r0, #40	; 0x28
 8000e9c:	f000 fb59 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ea0:	2028      	movs	r0, #40	; 0x28
 8000ea2:	f000 fb72 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010800 	.word	0x40010800
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	10110000 	.word	0x10110000
 8000ec0:	40011000 	.word	0x40011000

08000ec4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	 timerRun();
 8000ecc:	f000 f85c 	bl	8000f88 <timerRun>
	 getKeyInput();
 8000ed0:	f7ff f9a2 	bl	8000218 <getKeyInput>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <setTimer1>:
int timer5_counter = 0;
int timer5_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <setTimer1+0x20>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <setTimer1+0x24>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000011c 	.word	0x2000011c
 8000f0c:	20000120 	.word	0x20000120

08000f10 <setTimer2>:

void setTimer2(int duration) {
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <setTimer2+0x20>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <setTimer2+0x24>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000124 	.word	0x20000124
 8000f34:	20000128 	.word	0x20000128

08000f38 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000f40:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <setTimer4+0x20>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <setTimer4+0x24>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000134 	.word	0x20000134
 8000f5c:	20000138 	.word	0x20000138

08000f60 <setTimer5>:

void setTimer5(int duration) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <setTimer5+0x20>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <setTimer5+0x24>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000013c 	.word	0x2000013c
 8000f84:	20000140 	.word	0x20000140

08000f88 <timerRun>:

void timerRun() {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <timerRun+0xac>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd0b      	ble.n	8000fac <timerRun+0x24>
		timer1_counter--;
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <timerRun+0xac>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a26      	ldr	r2, [pc, #152]	; (8001034 <timerRun+0xac>)
 8000f9c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <timerRun+0xac>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	dc02      	bgt.n	8000fac <timerRun+0x24>
			timer1_flag = 1;
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <timerRun+0xb0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <timerRun+0xb4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	dd0b      	ble.n	8000fcc <timerRun+0x44>
		timer2_counter--;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <timerRun+0xb4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a20      	ldr	r2, [pc, #128]	; (800103c <timerRun+0xb4>)
 8000fbc:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	; (800103c <timerRun+0xb4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	dc02      	bgt.n	8000fcc <timerRun+0x44>
			timer2_flag = 1;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <timerRun+0xb8>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <timerRun+0xbc>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	dd0b      	ble.n	8000fec <timerRun+0x64>
		timer3_counter--;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <timerRun+0xbc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <timerRun+0xbc>)
 8000fdc:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <timerRun+0xbc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	dc02      	bgt.n	8000fec <timerRun+0x64>
			timer3_flag = 1;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <timerRun+0xc0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <timerRun+0xc4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd0b      	ble.n	800100c <timerRun+0x84>
		timer4_counter--;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <timerRun+0xc4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <timerRun+0xc4>)
 8000ffc:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8000ffe:	4b13      	ldr	r3, [pc, #76]	; (800104c <timerRun+0xc4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	dc02      	bgt.n	800100c <timerRun+0x84>
			timer4_flag = 1;
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <timerRun+0xc8>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <timerRun+0xcc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	dd0b      	ble.n	800102c <timerRun+0xa4>
		timer5_counter--;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <timerRun+0xcc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <timerRun+0xcc>)
 800101c:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <timerRun+0xcc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dc02      	bgt.n	800102c <timerRun+0xa4>
			timer5_flag = 1;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <timerRun+0xd0>)
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	2000011c 	.word	0x2000011c
 8001038:	20000120 	.word	0x20000120
 800103c:	20000124 	.word	0x20000124
 8001040:	20000128 	.word	0x20000128
 8001044:	2000012c 	.word	0x2000012c
 8001048:	20000130 	.word	0x20000130
 800104c:	20000134 	.word	0x20000134
 8001050:	20000138 	.word	0x20000138
 8001054:	2000013c 	.word	0x2000013c
 8001058:	20000140 	.word	0x20000140

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <HAL_MspInit+0x5c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6193      	str	r3, [r2, #24]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_MspInit+0x5c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_MspInit+0x60>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_MspInit+0x60>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010d0:	d113      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	201c      	movs	r0, #28
 80010f0:	f000 fa2f 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010f4:	201c      	movs	r0, #28
 80010f6:	f000 fa48 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_UART_MspInit+0x80>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d12b      	bne.n	8001180 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x84>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <HAL_UART_MspInit+0x84>)
 800112e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x84>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x84>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a11      	ldr	r2, [pc, #68]	; (800118c <HAL_UART_MspInit+0x84>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_UART_MspInit+0x84>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001158:	230c      	movs	r3, #12
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <HAL_UART_MspInit+0x88>)
 800116c:	f000 fada 	bl	8001724 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2026      	movs	r0, #38	; 0x26
 8001176:	f000 f9ec 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800117a:	2026      	movs	r0, #38	; 0x26
 800117c:	f000 fa05 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004400 	.word	0x40004400
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f8c7 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <TIM2_IRQHandler+0x10>)
 80011ea:	f001 f921 	bl	8002430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	2000019c 	.word	0x2000019c

080011f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <USART2_IRQHandler+0x10>)
 80011fe:	f001 fd47 	bl	8002c90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001e4 	.word	0x200001e4

0800120c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001210:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001214:	f000 fc3a 	bl	8001a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f002 fa70 	bl	8003730 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20005000 	.word	0x20005000
 800127c:	00000400 	.word	0x00000400
 8001280:	20000148 	.word	0x20000148
 8001284:	20000240 	.word	0x20000240

08001288 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff fff8 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800129a:	490c      	ldr	r1, [pc, #48]	; (80012cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b0:	4c09      	ldr	r4, [pc, #36]	; (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f002 fa3d 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff fc6f 	bl	8000ba4 <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012d0:	08004130 	.word	0x08004130
  ldr r2, =_sbss
 80012d4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012d8:	20000240 	.word	0x20000240

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x28>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f923 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff feae 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f93b 	bl	80015a6 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f903 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000020 	.word	0x20000020
 8001364:	20000028 	.word	0x20000028
 8001368:	20000024 	.word	0x20000024

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x1c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x20>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a03      	ldr	r2, [pc, #12]	; (800138c <HAL_IncTick+0x20>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000028 	.word	0x20000028
 800138c:	2000022c 	.word	0x2000022c

08001390 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	2000022c 	.word	0x2000022c

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4906      	ldr	r1, [pc, #24]	; (800143c <__NVIC_EnableIRQ+0x34>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff90 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff2d 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff42 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff35 	bl	8001408 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d008      	beq.n	80015e8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2204      	movs	r2, #4
 80015da:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e020      	b.n	800162a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 020e 	bic.w	r2, r2, #14
 80015f6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d005      	beq.n	8001658 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2204      	movs	r2, #4
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	e051      	b.n	80016fc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 020e 	bic.w	r2, r2, #14
 8001666:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_DMA_Abort_IT+0xd4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d029      	beq.n	80016d6 <HAL_DMA_Abort_IT+0xa2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a21      	ldr	r2, [pc, #132]	; (800170c <HAL_DMA_Abort_IT+0xd8>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d022      	beq.n	80016d2 <HAL_DMA_Abort_IT+0x9e>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_DMA_Abort_IT+0xdc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d01a      	beq.n	80016cc <HAL_DMA_Abort_IT+0x98>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_DMA_Abort_IT+0xe0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d012      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x92>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <HAL_DMA_Abort_IT+0xe4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d00a      	beq.n	80016c0 <HAL_DMA_Abort_IT+0x8c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_DMA_Abort_IT+0xe8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_DMA_Abort_IT+0x86>
 80016b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016b8:	e00e      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016be:	e00b      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c4:	e008      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ca:	e005      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	e002      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016d2:	2310      	movs	r3, #16
 80016d4:	e000      	b.n	80016d8 <HAL_DMA_Abort_IT+0xa4>
 80016d6:	2301      	movs	r3, #1
 80016d8:	4a11      	ldr	r2, [pc, #68]	; (8001720 <HAL_DMA_Abort_IT+0xec>)
 80016da:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	4798      	blx	r3
    } 
  }
  return status;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40020008 	.word	0x40020008
 800170c:	4002001c 	.word	0x4002001c
 8001710:	40020030 	.word	0x40020030
 8001714:	40020044 	.word	0x40020044
 8001718:	40020058 	.word	0x40020058
 800171c:	4002006c 	.word	0x4002006c
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e169      	b.n	8001a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001738:	2201      	movs	r2, #1
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	429a      	cmp	r2, r3
 8001752:	f040 8158 	bne.w	8001a06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a9a      	ldr	r2, [pc, #616]	; (80019c4 <HAL_GPIO_Init+0x2a0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d05e      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001760:	4a98      	ldr	r2, [pc, #608]	; (80019c4 <HAL_GPIO_Init+0x2a0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d875      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 8001766:	4a98      	ldr	r2, [pc, #608]	; (80019c8 <HAL_GPIO_Init+0x2a4>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d058      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 800176c:	4a96      	ldr	r2, [pc, #600]	; (80019c8 <HAL_GPIO_Init+0x2a4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d86f      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 8001772:	4a96      	ldr	r2, [pc, #600]	; (80019cc <HAL_GPIO_Init+0x2a8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d052      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001778:	4a94      	ldr	r2, [pc, #592]	; (80019cc <HAL_GPIO_Init+0x2a8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d869      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 800177e:	4a94      	ldr	r2, [pc, #592]	; (80019d0 <HAL_GPIO_Init+0x2ac>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d04c      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001784:	4a92      	ldr	r2, [pc, #584]	; (80019d0 <HAL_GPIO_Init+0x2ac>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d863      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 800178a:	4a92      	ldr	r2, [pc, #584]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d046      	beq.n	800181e <HAL_GPIO_Init+0xfa>
 8001790:	4a90      	ldr	r2, [pc, #576]	; (80019d4 <HAL_GPIO_Init+0x2b0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d85d      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 8001796:	2b12      	cmp	r3, #18
 8001798:	d82a      	bhi.n	80017f0 <HAL_GPIO_Init+0xcc>
 800179a:	2b12      	cmp	r3, #18
 800179c:	d859      	bhi.n	8001852 <HAL_GPIO_Init+0x12e>
 800179e:	a201      	add	r2, pc, #4	; (adr r2, 80017a4 <HAL_GPIO_Init+0x80>)
 80017a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a4:	0800181f 	.word	0x0800181f
 80017a8:	080017f9 	.word	0x080017f9
 80017ac:	0800180b 	.word	0x0800180b
 80017b0:	0800184d 	.word	0x0800184d
 80017b4:	08001853 	.word	0x08001853
 80017b8:	08001853 	.word	0x08001853
 80017bc:	08001853 	.word	0x08001853
 80017c0:	08001853 	.word	0x08001853
 80017c4:	08001853 	.word	0x08001853
 80017c8:	08001853 	.word	0x08001853
 80017cc:	08001853 	.word	0x08001853
 80017d0:	08001853 	.word	0x08001853
 80017d4:	08001853 	.word	0x08001853
 80017d8:	08001853 	.word	0x08001853
 80017dc:	08001853 	.word	0x08001853
 80017e0:	08001853 	.word	0x08001853
 80017e4:	08001853 	.word	0x08001853
 80017e8:	08001801 	.word	0x08001801
 80017ec:	08001815 	.word	0x08001815
 80017f0:	4a79      	ldr	r2, [pc, #484]	; (80019d8 <HAL_GPIO_Init+0x2b4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017f6:	e02c      	b.n	8001852 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	623b      	str	r3, [r7, #32]
          break;
 80017fe:	e029      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	3304      	adds	r3, #4
 8001806:	623b      	str	r3, [r7, #32]
          break;
 8001808:	e024      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	3308      	adds	r3, #8
 8001810:	623b      	str	r3, [r7, #32]
          break;
 8001812:	e01f      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	330c      	adds	r3, #12
 800181a:	623b      	str	r3, [r7, #32]
          break;
 800181c:	e01a      	b.n	8001854 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001826:	2304      	movs	r3, #4
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e013      	b.n	8001854 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001834:	2308      	movs	r3, #8
 8001836:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	611a      	str	r2, [r3, #16]
          break;
 800183e:	e009      	b.n	8001854 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001840:	2308      	movs	r3, #8
 8001842:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69fa      	ldr	r2, [r7, #28]
 8001848:	615a      	str	r2, [r3, #20]
          break;
 800184a:	e003      	b.n	8001854 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e000      	b.n	8001854 <HAL_GPIO_Init+0x130>
          break;
 8001852:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2bff      	cmp	r3, #255	; 0xff
 8001858:	d801      	bhi.n	800185e <HAL_GPIO_Init+0x13a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	e001      	b.n	8001862 <HAL_GPIO_Init+0x13e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3304      	adds	r3, #4
 8001862:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d802      	bhi.n	8001870 <HAL_GPIO_Init+0x14c>
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	e002      	b.n	8001876 <HAL_GPIO_Init+0x152>
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	3b08      	subs	r3, #8
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	210f      	movs	r1, #15
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	fa01 f303 	lsl.w	r3, r1, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	6a39      	ldr	r1, [r7, #32]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	fa01 f303 	lsl.w	r3, r1, r3
 8001890:	431a      	orrs	r2, r3
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 80b1 	beq.w	8001a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_GPIO_Init+0x2b8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x2b8>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_GPIO_Init+0x2b8>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018bc:	4a48      	ldr	r2, [pc, #288]	; (80019e0 <HAL_GPIO_Init+0x2bc>)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a40      	ldr	r2, [pc, #256]	; (80019e4 <HAL_GPIO_Init+0x2c0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d013      	beq.n	8001910 <HAL_GPIO_Init+0x1ec>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <HAL_GPIO_Init+0x2c4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00d      	beq.n	800190c <HAL_GPIO_Init+0x1e8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3e      	ldr	r2, [pc, #248]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <HAL_GPIO_Init+0x1e4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <HAL_GPIO_Init+0x2cc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d101      	bne.n	8001904 <HAL_GPIO_Init+0x1e0>
 8001900:	2303      	movs	r3, #3
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 8001904:	2304      	movs	r3, #4
 8001906:	e004      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 8001908:	2302      	movs	r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <HAL_GPIO_Init+0x1ee>
 8001910:	2300      	movs	r3, #0
 8001912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001914:	f002 0203 	and.w	r2, r2, #3
 8001918:	0092      	lsls	r2, r2, #2
 800191a:	4093      	lsls	r3, r2
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001922:	492f      	ldr	r1, [pc, #188]	; (80019e0 <HAL_GPIO_Init+0x2bc>)
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	3302      	adds	r3, #2
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800193c:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	492c      	ldr	r1, [pc, #176]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	4928      	ldr	r1, [pc, #160]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001954:	4013      	ands	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	4922      	ldr	r1, [pc, #136]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	491e      	ldr	r1, [pc, #120]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800197c:	4013      	ands	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4918      	ldr	r1, [pc, #96]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4914      	ldr	r1, [pc, #80]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d021      	beq.n	80019f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	490e      	ldr	r1, [pc, #56]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e021      	b.n	8001a06 <HAL_GPIO_Init+0x2e2>
 80019c2:	bf00      	nop
 80019c4:	10320000 	.word	0x10320000
 80019c8:	10310000 	.word	0x10310000
 80019cc:	10220000 	.word	0x10220000
 80019d0:	10210000 	.word	0x10210000
 80019d4:	10120000 	.word	0x10120000
 80019d8:	10110000 	.word	0x10110000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	40010800 	.word	0x40010800
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	40011000 	.word	0x40011000
 80019f0:	40011400 	.word	0x40011400
 80019f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	4909      	ldr	r1, [pc, #36]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001a02:	4013      	ands	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f47f ae8e 	bne.w	8001738 <HAL_GPIO_Init+0x14>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	372c      	adds	r7, #44	; 0x2c
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	460b      	mov	r3, r1
 8001a64:	807b      	strh	r3, [r7, #2]
 8001a66:	4613      	mov	r3, r2
 8001a68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a6a:	787b      	ldrb	r3, [r7, #1]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a76:	e003      	b.n	8001a80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	041a      	lsls	r2, r3, #16
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	611a      	str	r2, [r3, #16]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d006      	beq.n	8001ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f806 	bl	8001abc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e26c      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8087 	beq.w	8001bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d00c      	beq.n	8001b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afc:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d112      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
 8001b08:	4b8c      	ldr	r3, [pc, #560]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b14:	d10b      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d06c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x12c>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d168      	bne.n	8001bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e246      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x76>
 8001b38:	4b80      	ldr	r3, [pc, #512]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b7b      	ldr	r3, [pc, #492]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7a      	ldr	r2, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e01d      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0xbc>
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_RCC_OscConfig+0xd4>
 8001b8c:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a6a      	ldr	r2, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a67      	ldr	r2, [pc, #412]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d013      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fbf0 	bl	8001390 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fbec 	bl	8001390 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1fa      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0xe4>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff fbdc 	bl	8001390 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff fbd8 	bl	8001390 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e1e6      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bee:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x10c>
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d063      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d11c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x18c>
 8001c22:	4b46      	ldr	r3, [pc, #280]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x176>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e1ba      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4939      	ldr	r1, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_RCC_OscConfig+0x270>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fb91 	bl	8001390 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff fb8d 	bl	8001390 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e19b      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4927      	ldr	r1, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fb70 	bl	8001390 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff fb6c 	bl	8001390 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e17a      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d03a      	beq.n	8001d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d019      	beq.n	8001d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cec:	f7ff fb50 	bl	8001390 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb4c 	bl	8001390 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e15a      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f000 facc 	bl	80022b0 <RCC_Delay>
 8001d18:	e01c      	b.n	8001d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fb36 	bl	8001390 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d26:	e00f      	b.n	8001d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fb32 	bl	8001390 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d908      	bls.n	8001d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e140      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	42420000 	.word	0x42420000
 8001d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1e9      	bne.n	8001d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80a6 	beq.w	8001eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d66:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10d      	bne.n	8001d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	4b94      	ldr	r3, [pc, #592]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a93      	ldr	r2, [pc, #588]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b91      	ldr	r3, [pc, #580]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	4b8e      	ldr	r3, [pc, #568]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d118      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a8a      	ldr	r2, [pc, #552]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da6:	f7ff faf3 	bl	8001390 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dae:	f7ff faef 	bl	8001390 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b64      	cmp	r3, #100	; 0x64
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e0fd      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6213      	str	r3, [r2, #32]
 8001de0:	e02d      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x334>
 8001dea:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a75      	ldr	r2, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a72      	ldr	r2, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	e01c      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b05      	cmp	r3, #5
 8001e0a:	d10c      	bne.n	8001e26 <HAL_RCC_OscConfig+0x356>
 8001e0c:	4b6d      	ldr	r3, [pc, #436]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a6c      	ldr	r2, [pc, #432]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6213      	str	r3, [r2, #32]
 8001e24:	e00b      	b.n	8001e3e <HAL_RCC_OscConfig+0x36e>
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a63      	ldr	r2, [pc, #396]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e46:	f7ff faa3 	bl	8001390 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff fa9f 	bl	8001390 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0ab      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ee      	beq.n	8001e4e <HAL_RCC_OscConfig+0x37e>
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff fa8d 	bl	8001390 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fa89 	bl	8001390 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e095      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ee      	bne.n	8001e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8081 	beq.w	8001fba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d061      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d146      	bne.n	8001f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_OscConfig+0x4fc>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fa5d 	bl	8001390 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fa59 	bl	8001390 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e067      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eec:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1f0      	bne.n	8001eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	492d      	ldr	r1, [pc, #180]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a19      	ldr	r1, [r3, #32]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	430b      	orrs	r3, r1
 8001f26:	4927      	ldr	r1, [pc, #156]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x4fc>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa2d 	bl	8001390 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff fa29 	bl	8001390 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e037      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x46a>
 8001f58:	e02f      	b.n	8001fba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCC_OscConfig+0x4fc>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fa16 	bl	8001390 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff fa12 	bl	8001390 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e020      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x498>
 8001f86:	e018      	b.n	8001fba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e013      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42420060 	.word	0x42420060

08001fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0d0      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d910      	bls.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b67      	ldr	r3, [pc, #412]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 0207 	bic.w	r2, r3, #7
 8001ffa:	4965      	ldr	r1, [pc, #404]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b63      	ldr	r3, [pc, #396]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b8      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d020      	beq.n	8002062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800202c:	4b59      	ldr	r3, [pc, #356]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800204e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002050:	4b50      	ldr	r3, [pc, #320]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	494d      	ldr	r1, [pc, #308]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d040      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b47      	ldr	r3, [pc, #284]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e07f      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b41      	ldr	r3, [pc, #260]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e073      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e06b      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4936      	ldr	r1, [pc, #216]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f966 	bl	8001390 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7ff f962 	bl	8001390 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e053      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d210      	bcs.n	8002120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4922      	ldr	r1, [pc, #136]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e032      	b.n	8002186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800212c:	4b19      	ldr	r3, [pc, #100]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	4916      	ldr	r1, [pc, #88]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	490e      	ldr	r1, [pc, #56]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215e:	f000 f821 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8002162:	4602      	mov	r2, r0
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	490a      	ldr	r1, [pc, #40]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	5ccb      	ldrb	r3, [r1, r3]
 8002172:	fa22 f303 	lsr.w	r3, r2, r3
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1cc>)
 8002178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1d0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f8c4 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40022000 	.word	0x40022000
 8002194:	40021000 	.word	0x40021000
 8002198:	080040c8 	.word	0x080040c8
 800219c:	20000020 	.word	0x20000020
 80021a0:	20000024 	.word	0x20000024

080021a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021be:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x30>
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x36>
 80021d2:	e027      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d4:	4b19      	ldr	r3, [pc, #100]	; (800223c <HAL_RCC_GetSysClockFreq+0x98>)
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	e027      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	4a17      	ldr	r2, [pc, #92]	; (8002240 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_RCC_GetSysClockFreq+0x94>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	0c5b      	lsrs	r3, r3, #17
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	4a11      	ldr	r2, [pc, #68]	; (8002244 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <HAL_RCC_GetSysClockFreq+0x98>)
 8002206:	fb02 f203 	mul.w	r2, r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e004      	b.n	800221e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	613b      	str	r3, [r7, #16]
      break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x98>)
 8002226:	613b      	str	r3, [r7, #16]
      break;
 8002228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222a:	693b      	ldr	r3, [r7, #16]
}
 800222c:	4618      	mov	r0, r3
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	007a1200 	.word	0x007a1200
 8002240:	080040e0 	.word	0x080040e0
 8002244:	080040f0 	.word	0x080040f0
 8002248:	003d0900 	.word	0x003d0900

0800224c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b02      	ldr	r3, [pc, #8]	; (800225c <HAL_RCC_GetHCLKFreq+0x10>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	20000020 	.word	0x20000020

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002264:	f7ff fff2 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	080040d8 	.word	0x080040d8

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800228c:	f7ff ffde 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0adb      	lsrs	r3, r3, #11
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4903      	ldr	r1, [pc, #12]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080040d8 	.word	0x080040d8

080022b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <RCC_Delay+0x34>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <RCC_Delay+0x38>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a5b      	lsrs	r3, r3, #9
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022cc:	bf00      	nop
  }
  while (Delay --);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <RCC_Delay+0x1c>
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000020 	.word	0x20000020
 80022e8:	10624dd3 	.word	0x10624dd3

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fed4 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fa74 	bl	8002818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d001      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e03a      	b.n	800241a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a18      	ldr	r2, [pc, #96]	; (8002424 <HAL_TIM_Base_Start_IT+0x98>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00e      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x58>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d009      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x58>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <HAL_TIM_Base_Start_IT+0x9c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_TIM_Base_Start_IT+0x58>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <HAL_TIM_Base_Start_IT+0xa0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d111      	bne.n	8002408 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d010      	beq.n	8002418 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f042 0201 	orr.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002406:	e007      	b.n	8002418 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0201 	orr.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40000400 	.word	0x40000400
 800242c:	40000800 	.word	0x40000800

08002430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b02      	cmp	r3, #2
 8002444:	d122      	bne.n	800248c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d11b      	bne.n	800248c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0202 	mvn.w	r2, #2
 800245c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f9b4 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002478:	e005      	b.n	8002486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f9a7 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f9b6 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b04      	cmp	r3, #4
 8002498:	d122      	bne.n	80024e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d11b      	bne.n	80024e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0204 	mvn.w	r2, #4
 80024b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f98a 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f97d 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f98c 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d122      	bne.n	8002534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d11b      	bne.n	8002534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0208 	mvn.w	r2, #8
 8002504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2204      	movs	r2, #4
 800250a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f960 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f953 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f962 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b10      	cmp	r3, #16
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b10      	cmp	r3, #16
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0210 	mvn.w	r2, #16
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2208      	movs	r2, #8
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f936 	bl	80027e0 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f929 	bl	80027ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f938 	bl	80027f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d10e      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0201 	mvn.w	r2, #1
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fc88 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025be:	2b80      	cmp	r3, #128	; 0x80
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d107      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fa7b 	bl	8002ad6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b40      	cmp	r3, #64	; 0x40
 80025ec:	d10e      	bne.n	800260c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d107      	bne.n	800260c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8fc 	bl	8002804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b20      	cmp	r3, #32
 8002618:	d10e      	bne.n	8002638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b20      	cmp	r3, #32
 8002626:	d107      	bne.n	8002638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0220 	mvn.w	r2, #32
 8002630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa46 	bl	8002ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x1c>
 8002658:	2302      	movs	r3, #2
 800265a:	e0b4      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x186>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002694:	d03e      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0xd4>
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	f200 8087 	bhi.w	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	f000 8086 	beq.w	80027b2 <HAL_TIM_ConfigClockSource+0x172>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d87f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d01a      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0xa6>
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d87b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d050      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x11a>
 80026b8:	2b60      	cmp	r3, #96	; 0x60
 80026ba:	d877      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026bc:	2b50      	cmp	r3, #80	; 0x50
 80026be:	d03c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0xfa>
 80026c0:	2b50      	cmp	r3, #80	; 0x50
 80026c2:	d873      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d058      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x13a>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d86f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026cc:	2b30      	cmp	r3, #48	; 0x30
 80026ce:	d064      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x15a>
 80026d0:	2b30      	cmp	r3, #48	; 0x30
 80026d2:	d86b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d060      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x15a>
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d867      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05c      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x15a>
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d05a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x15a>
 80026e4:	e062      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f000 f968 	bl	80029ca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	609a      	str	r2, [r3, #8]
      break;
 8002712:	e04f      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f000 f951 	bl	80029ca <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002736:	609a      	str	r2, [r3, #8]
      break;
 8002738:	e03c      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 f8c8 	bl	80028dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2150      	movs	r1, #80	; 0x50
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f91f 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002758:	e02c      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 f8e6 	bl	8002938 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2160      	movs	r1, #96	; 0x60
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f90f 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002778:	e01c      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	f000 f8a8 	bl	80028dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8ff 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 8002798:	e00c      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f000 f8f6 	bl	8002996 <TIM_ITRx_SetConfig>
      break;
 80027aa:	e003      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      break;
 80027b0:	e000      	b.n	80027b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
	...

08002818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <TIM_Base_SetConfig+0xb8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00b      	beq.n	8002848 <TIM_Base_SetConfig+0x30>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d007      	beq.n	8002848 <TIM_Base_SetConfig+0x30>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <TIM_Base_SetConfig+0xbc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0x30>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0xc0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <TIM_Base_SetConfig+0xb8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d00b      	beq.n	800287a <TIM_Base_SetConfig+0x62>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d007      	beq.n	800287a <TIM_Base_SetConfig+0x62>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <TIM_Base_SetConfig+0xbc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d003      	beq.n	800287a <TIM_Base_SetConfig+0x62>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <TIM_Base_SetConfig+0xc0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d108      	bne.n	800288c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <TIM_Base_SetConfig+0xb8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d103      	bne.n	80028c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	615a      	str	r2, [r3, #20]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800

080028dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f023 030a 	bic.w	r3, r3, #10
 8002918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	621a      	str	r2, [r3, #32]
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f023 0210 	bic.w	r2, r3, #16
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	031b      	lsls	r3, r3, #12
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002974:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f043 0307 	orr.w	r3, r3, #7
 80029b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	021a      	lsls	r2, r3, #8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	609a      	str	r2, [r3, #8]
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e046      	b.n	8002aae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6c:	d009      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a10      	ldr	r2, [pc, #64]	; (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10c      	bne.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr
 8002ab8:	40012c00 	.word	0x40012c00
 8002abc:	40000400 	.word	0x40000400
 8002ac0:	40000800 	.word	0x40000800

08002ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e042      	b.n	8002b80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fafa 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fd71 	bl	8003614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d16d      	bne.n	8002c84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_UART_Transmit+0x2c>
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e066      	b.n	8002c86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2221      	movs	r2, #33	; 0x21
 8002bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe fbe3 	bl	8001390 <HAL_GetTick>
 8002bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be0:	d108      	bne.n	8002bf4 <HAL_UART_Transmit+0x6c>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d104      	bne.n	8002bf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e003      	b.n	8002bfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bfc:	e02a      	b.n	8002c54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2200      	movs	r2, #0
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 faf9 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e036      	b.n	8002c86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	3302      	adds	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e007      	b.n	8002c46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	3301      	adds	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1cf      	bne.n	8002bfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	2140      	movs	r1, #64	; 0x40
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fac9 	bl	8003200 <UART_WaitOnFlagUntilTimeout>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e006      	b.n	8002c86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3720      	adds	r7, #32
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0ba      	sub	sp, #232	; 0xe8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002cce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x66>
 8002ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fbd1 	bl	8003496 <UART_Receive_IT>
      return;
 8002cf4:	e25b      	b.n	80031ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002cf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80de 	beq.w	8002ebc <HAL_UART_IRQHandler+0x22c>
 8002d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80d1 	beq.w	8002ebc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_UART_IRQHandler+0xae>
 8002d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00b      	beq.n	8002d62 <HAL_UART_IRQHandler+0xd2>
 8002d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0202 	orr.w	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_UART_IRQHandler+0xf6>
 8002d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d005      	beq.n	8002d86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <HAL_UART_IRQHandler+0x126>
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 81f2 	beq.w	80031a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x14e>
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fb5c 	bl	8003496 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <HAL_UART_IRQHandler+0x17a>
 8002e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d04f      	beq.n	8002eaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa66 	bl	80032dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d041      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3314      	adds	r3, #20
 8002e46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1d9      	bne.n	8002e1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_UART_IRQHandler+0x3e0>)
 8002e78:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fbd8 	bl	8001634 <HAL_DMA_Abort_IT>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e94:	4610      	mov	r0, r2
 8002e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	e00e      	b.n	8002eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f99c 	bl	80031d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea0:	e00a      	b.n	8002eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f998 	bl	80031d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea8:	e006      	b.n	8002eb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f994 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002eb6:	e175      	b.n	80031a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb8:	bf00      	nop
    return;
 8002eba:	e173      	b.n	80031a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f040 814f 	bne.w	8003164 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8148 	beq.w	8003164 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 8141 	beq.w	8003164 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80b6 	beq.w	8003074 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 8145 	beq.w	80031a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f26:	429a      	cmp	r2, r3
 8002f28:	f080 813e 	bcs.w	80031a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	f000 8088 	beq.w	8003050 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002f6c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f7c:	e841 2300 	strex	r3, r2, [r1]
 8002f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1d9      	bne.n	8002f40 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3314      	adds	r3, #20
 8002f92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3314      	adds	r3, #20
 8002fac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e1      	bne.n	8002f8c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e3      	bne.n	8002fc8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	330c      	adds	r3, #12
 8003014:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800301e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003020:	f023 0310 	bic.w	r3, r3, #16
 8003024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003032:	65ba      	str	r2, [r7, #88]	; 0x58
 8003034:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e3      	bne.n	800300e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fab7 	bl	80015be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2202      	movs	r2, #2
 8003054:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305e:	b29b      	uxth	r3, r3
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	b29b      	uxth	r3, r3
 8003064:	4619      	mov	r1, r3
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8bf 	bl	80031ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800306c:	e09c      	b.n	80031a8 <HAL_UART_IRQHandler+0x518>
 800306e:	bf00      	nop
 8003070:	080033a1 	.word	0x080033a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800307c:	b29b      	uxth	r3, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 808e 	beq.w	80031ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8089 	beq.w	80031ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80030be:	647a      	str	r2, [r7, #68]	; 0x44
 80030c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e3      	bne.n	800309a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	623b      	str	r3, [r7, #32]
   return(result);
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3314      	adds	r3, #20
 80030f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030f6:	633a      	str	r2, [r7, #48]	; 0x30
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e3      	bne.n	80030d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	60fb      	str	r3, [r7, #12]
   return(result);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0310 	bic.w	r3, r3, #16
 800312e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800313c:	61fa      	str	r2, [r7, #28]
 800313e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	69b9      	ldr	r1, [r7, #24]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	617b      	str	r3, [r7, #20]
   return(result);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e3      	bne.n	8003118 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800315a:	4619      	mov	r1, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f844 	bl	80031ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003162:	e023      	b.n	80031ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <HAL_UART_IRQHandler+0x4f4>
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f923 	bl	80033c8 <UART_Transmit_IT>
    return;
 8003182:	e014      	b.n	80031ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <HAL_UART_IRQHandler+0x51e>
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f962 	bl	8003466 <UART_EndTransmit_IT>
    return;
 80031a2:	e004      	b.n	80031ae <HAL_UART_IRQHandler+0x51e>
    return;
 80031a4:	bf00      	nop
 80031a6:	e002      	b.n	80031ae <HAL_UART_IRQHandler+0x51e>
      return;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <HAL_UART_IRQHandler+0x51e>
      return;
 80031ac:	bf00      	nop
  }
}
 80031ae:	37e8      	adds	r7, #232	; 0xe8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b090      	sub	sp, #64	; 0x40
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	4613      	mov	r3, r2
 800320e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003210:	e050      	b.n	80032b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d04c      	beq.n	80032b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800321a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <UART_WaitOnFlagUntilTimeout+0x30>
 8003220:	f7fe f8b6 	bl	8001390 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800322c:	429a      	cmp	r2, r3
 800322e:	d241      	bcs.n	80032b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003250:	637a      	str	r2, [r7, #52]	; 0x34
 8003252:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e5      	bne.n	8003230 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	e853 3f00 	ldrex	r3, [r3]
 8003272:	613b      	str	r3, [r7, #16]
   return(result);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f023 0301 	bic.w	r3, r3, #1
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003284:	623a      	str	r2, [r7, #32]
 8003286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	69f9      	ldr	r1, [r7, #28]
 800328a:	6a3a      	ldr	r2, [r7, #32]
 800328c:	e841 2300 	strex	r3, r2, [r1]
 8003290:	61bb      	str	r3, [r7, #24]
   return(result);
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e5      	bne.n	8003264 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e00f      	b.n	80032d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4013      	ands	r3, r2
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d09f      	beq.n	8003212 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3740      	adds	r7, #64	; 0x40
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b095      	sub	sp, #84	; 0x54
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	e853 3f00 	ldrex	r3, [r3]
 80032f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	330c      	adds	r3, #12
 8003302:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003304:	643a      	str	r2, [r7, #64]	; 0x40
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800330a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e5      	bne.n	80032e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3314      	adds	r3, #20
 800331e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	e853 3f00 	ldrex	r3, [r3]
 8003326:	61fb      	str	r3, [r7, #28]
   return(result);
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f023 0301 	bic.w	r3, r3, #1
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3314      	adds	r3, #20
 8003336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003338:	62fa      	str	r2, [r7, #44]	; 0x2c
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	e841 2300 	strex	r3, r2, [r1]
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e5      	bne.n	8003318 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	2b01      	cmp	r3, #1
 8003352:	d119      	bne.n	8003388 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	330c      	adds	r3, #12
 800335a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	60bb      	str	r3, [r7, #8]
   return(result);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 0310 	bic.w	r3, r3, #16
 800336a:	647b      	str	r3, [r7, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	330c      	adds	r3, #12
 8003372:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003374:	61ba      	str	r2, [r7, #24]
 8003376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6979      	ldr	r1, [r7, #20]
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	613b      	str	r3, [r7, #16]
   return(result);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003396:	bf00      	nop
 8003398:	3754      	adds	r7, #84	; 0x54
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f7ff ff0c 	bl	80031d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b21      	cmp	r3, #33	; 0x21
 80033da:	d13e      	bne.n	800345a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e4:	d114      	bne.n	8003410 <UART_Transmit_IT+0x48>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d110      	bne.n	8003410 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003402:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	621a      	str	r2, [r3, #32]
 800340e:	e008      	b.n	8003422 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	1c59      	adds	r1, r3, #1
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6211      	str	r1, [r2, #32]
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29b      	uxth	r3, r3
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4619      	mov	r1, r3
 8003430:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003444:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003454:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff fe94 	bl	80031b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b08c      	sub	sp, #48	; 0x30
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b22      	cmp	r3, #34	; 0x22
 80034a8:	f040 80ae 	bne.w	8003608 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d117      	bne.n	80034e6 <UART_Receive_IT+0x50>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d113      	bne.n	80034e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	1c9a      	adds	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
 80034e4:	e026      	b.n	8003534 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d007      	beq.n	800350a <UART_Receive_IT+0x74>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <UART_Receive_IT+0x82>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e008      	b.n	800352a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003524:	b2da      	uxtb	r2, r3
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4619      	mov	r1, r3
 8003542:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003544:	2b00      	cmp	r3, #0
 8003546:	d15d      	bne.n	8003604 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0220 	bic.w	r2, r2, #32
 8003556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	2b01      	cmp	r3, #1
 800358c:	d135      	bne.n	80035fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	613b      	str	r3, [r7, #16]
   return(result);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f023 0310 	bic.w	r3, r3, #16
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	623a      	str	r2, [r7, #32]
 80035b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	69f9      	ldr	r1, [r7, #28]
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e5      	bne.n	8003594 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d10a      	bne.n	80035ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035f0:	4619      	mov	r1, r3
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7ff fdf9 	bl	80031ea <HAL_UARTEx_RxEventCallback>
 80035f8:	e002      	b.n	8003600 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fde3 	bl	80031c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e002      	b.n	800360a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003608:	2302      	movs	r3, #2
  }
}
 800360a:	4618      	mov	r0, r3
 800360c:	3730      	adds	r7, #48	; 0x30
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800364e:	f023 030c 	bic.w	r3, r3, #12
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6812      	ldr	r2, [r2, #0]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	430b      	orrs	r3, r1
 800365a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <UART_SetConfig+0x114>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d103      	bne.n	8003684 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800367c:	f7fe fe04 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	e002      	b.n	800368a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003684:	f7fe fdec 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003688:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	009a      	lsls	r2, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	4a22      	ldr	r2, [pc, #136]	; (800372c <UART_SetConfig+0x118>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	0119      	lsls	r1, r3, #4
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009a      	lsls	r2, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <UART_SetConfig+0x118>)
 80036c2:	fba3 0302 	umull	r0, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2064      	movs	r0, #100	; 0x64
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a15      	ldr	r2, [pc, #84]	; (800372c <UART_SetConfig+0x118>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e0:	4419      	add	r1, r3
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <UART_SetConfig+0x118>)
 80036fa:	fba3 0302 	umull	r0, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2064      	movs	r0, #100	; 0x64
 8003702:	fb00 f303 	mul.w	r3, r0, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	3332      	adds	r3, #50	; 0x32
 800370c:	4a07      	ldr	r2, [pc, #28]	; (800372c <UART_SetConfig+0x118>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	440a      	add	r2, r1
 800371e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003720:	bf00      	nop
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40013800 	.word	0x40013800
 800372c:	51eb851f 	.word	0x51eb851f

08003730 <__errno>:
 8003730:	4b01      	ldr	r3, [pc, #4]	; (8003738 <__errno+0x8>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	2000002c 	.word	0x2000002c

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	2600      	movs	r6, #0
 8003740:	4d0c      	ldr	r5, [pc, #48]	; (8003774 <__libc_init_array+0x38>)
 8003742:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	42a6      	cmp	r6, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	f000 fc5c 	bl	8004008 <_init>
 8003750:	2600      	movs	r6, #0
 8003752:	4d0a      	ldr	r5, [pc, #40]	; (800377c <__libc_init_array+0x40>)
 8003754:	4c0a      	ldr	r4, [pc, #40]	; (8003780 <__libc_init_array+0x44>)
 8003756:	1b64      	subs	r4, r4, r5
 8003758:	10a4      	asrs	r4, r4, #2
 800375a:	42a6      	cmp	r6, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f855 3b04 	ldr.w	r3, [r5], #4
 8003764:	4798      	blx	r3
 8003766:	3601      	adds	r6, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f855 3b04 	ldr.w	r3, [r5], #4
 800376e:	4798      	blx	r3
 8003770:	3601      	adds	r6, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	08004128 	.word	0x08004128
 8003778:	08004128 	.word	0x08004128
 800377c:	08004128 	.word	0x08004128
 8003780:	0800412c 	.word	0x0800412c

08003784 <memset>:
 8003784:	4603      	mov	r3, r0
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <siprintf>:
 8003794:	b40e      	push	{r1, r2, r3}
 8003796:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800379a:	b500      	push	{lr}
 800379c:	b09c      	sub	sp, #112	; 0x70
 800379e:	ab1d      	add	r3, sp, #116	; 0x74
 80037a0:	9002      	str	r0, [sp, #8]
 80037a2:	9006      	str	r0, [sp, #24]
 80037a4:	9107      	str	r1, [sp, #28]
 80037a6:	9104      	str	r1, [sp, #16]
 80037a8:	4808      	ldr	r0, [pc, #32]	; (80037cc <siprintf+0x38>)
 80037aa:	4909      	ldr	r1, [pc, #36]	; (80037d0 <siprintf+0x3c>)
 80037ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b0:	9105      	str	r1, [sp, #20]
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	a902      	add	r1, sp, #8
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	f000 f868 	bl	800388c <_svfiprintf_r>
 80037bc:	2200      	movs	r2, #0
 80037be:	9b02      	ldr	r3, [sp, #8]
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	b01c      	add	sp, #112	; 0x70
 80037c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c8:	b003      	add	sp, #12
 80037ca:	4770      	bx	lr
 80037cc:	2000002c 	.word	0x2000002c
 80037d0:	ffff0208 	.word	0xffff0208

080037d4 <__ssputs_r>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	688e      	ldr	r6, [r1, #8]
 80037da:	4682      	mov	sl, r0
 80037dc:	429e      	cmp	r6, r3
 80037de:	460c      	mov	r4, r1
 80037e0:	4690      	mov	r8, r2
 80037e2:	461f      	mov	r7, r3
 80037e4:	d838      	bhi.n	8003858 <__ssputs_r+0x84>
 80037e6:	898a      	ldrh	r2, [r1, #12]
 80037e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037ec:	d032      	beq.n	8003854 <__ssputs_r+0x80>
 80037ee:	6825      	ldr	r5, [r4, #0]
 80037f0:	6909      	ldr	r1, [r1, #16]
 80037f2:	3301      	adds	r3, #1
 80037f4:	eba5 0901 	sub.w	r9, r5, r1
 80037f8:	6965      	ldr	r5, [r4, #20]
 80037fa:	444b      	add	r3, r9
 80037fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003804:	106d      	asrs	r5, r5, #1
 8003806:	429d      	cmp	r5, r3
 8003808:	bf38      	it	cc
 800380a:	461d      	movcc	r5, r3
 800380c:	0553      	lsls	r3, r2, #21
 800380e:	d531      	bpl.n	8003874 <__ssputs_r+0xa0>
 8003810:	4629      	mov	r1, r5
 8003812:	f000 fb53 	bl	8003ebc <_malloc_r>
 8003816:	4606      	mov	r6, r0
 8003818:	b950      	cbnz	r0, 8003830 <__ssputs_r+0x5c>
 800381a:	230c      	movs	r3, #12
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f8ca 3000 	str.w	r3, [sl]
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382a:	81a3      	strh	r3, [r4, #12]
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	464a      	mov	r2, r9
 8003832:	6921      	ldr	r1, [r4, #16]
 8003834:	f000 face 	bl	8003dd4 <memcpy>
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800383e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003842:	81a3      	strh	r3, [r4, #12]
 8003844:	6126      	str	r6, [r4, #16]
 8003846:	444e      	add	r6, r9
 8003848:	6026      	str	r6, [r4, #0]
 800384a:	463e      	mov	r6, r7
 800384c:	6165      	str	r5, [r4, #20]
 800384e:	eba5 0509 	sub.w	r5, r5, r9
 8003852:	60a5      	str	r5, [r4, #8]
 8003854:	42be      	cmp	r6, r7
 8003856:	d900      	bls.n	800385a <__ssputs_r+0x86>
 8003858:	463e      	mov	r6, r7
 800385a:	4632      	mov	r2, r6
 800385c:	4641      	mov	r1, r8
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	f000 fac6 	bl	8003df0 <memmove>
 8003864:	68a3      	ldr	r3, [r4, #8]
 8003866:	6822      	ldr	r2, [r4, #0]
 8003868:	1b9b      	subs	r3, r3, r6
 800386a:	4432      	add	r2, r6
 800386c:	2000      	movs	r0, #0
 800386e:	60a3      	str	r3, [r4, #8]
 8003870:	6022      	str	r2, [r4, #0]
 8003872:	e7db      	b.n	800382c <__ssputs_r+0x58>
 8003874:	462a      	mov	r2, r5
 8003876:	f000 fb7b 	bl	8003f70 <_realloc_r>
 800387a:	4606      	mov	r6, r0
 800387c:	2800      	cmp	r0, #0
 800387e:	d1e1      	bne.n	8003844 <__ssputs_r+0x70>
 8003880:	4650      	mov	r0, sl
 8003882:	6921      	ldr	r1, [r4, #16]
 8003884:	f000 face 	bl	8003e24 <_free_r>
 8003888:	e7c7      	b.n	800381a <__ssputs_r+0x46>
	...

0800388c <_svfiprintf_r>:
 800388c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003890:	4698      	mov	r8, r3
 8003892:	898b      	ldrh	r3, [r1, #12]
 8003894:	4607      	mov	r7, r0
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	460d      	mov	r5, r1
 800389a:	4614      	mov	r4, r2
 800389c:	b09d      	sub	sp, #116	; 0x74
 800389e:	d50e      	bpl.n	80038be <_svfiprintf_r+0x32>
 80038a0:	690b      	ldr	r3, [r1, #16]
 80038a2:	b963      	cbnz	r3, 80038be <_svfiprintf_r+0x32>
 80038a4:	2140      	movs	r1, #64	; 0x40
 80038a6:	f000 fb09 	bl	8003ebc <_malloc_r>
 80038aa:	6028      	str	r0, [r5, #0]
 80038ac:	6128      	str	r0, [r5, #16]
 80038ae:	b920      	cbnz	r0, 80038ba <_svfiprintf_r+0x2e>
 80038b0:	230c      	movs	r3, #12
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	e0d1      	b.n	8003a5e <_svfiprintf_r+0x1d2>
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	616b      	str	r3, [r5, #20]
 80038be:	2300      	movs	r3, #0
 80038c0:	9309      	str	r3, [sp, #36]	; 0x24
 80038c2:	2320      	movs	r3, #32
 80038c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038c8:	2330      	movs	r3, #48	; 0x30
 80038ca:	f04f 0901 	mov.w	r9, #1
 80038ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80038d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a78 <_svfiprintf_r+0x1ec>
 80038d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038da:	4623      	mov	r3, r4
 80038dc:	469a      	mov	sl, r3
 80038de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038e2:	b10a      	cbz	r2, 80038e8 <_svfiprintf_r+0x5c>
 80038e4:	2a25      	cmp	r2, #37	; 0x25
 80038e6:	d1f9      	bne.n	80038dc <_svfiprintf_r+0x50>
 80038e8:	ebba 0b04 	subs.w	fp, sl, r4
 80038ec:	d00b      	beq.n	8003906 <_svfiprintf_r+0x7a>
 80038ee:	465b      	mov	r3, fp
 80038f0:	4622      	mov	r2, r4
 80038f2:	4629      	mov	r1, r5
 80038f4:	4638      	mov	r0, r7
 80038f6:	f7ff ff6d 	bl	80037d4 <__ssputs_r>
 80038fa:	3001      	adds	r0, #1
 80038fc:	f000 80aa 	beq.w	8003a54 <_svfiprintf_r+0x1c8>
 8003900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003902:	445a      	add	r2, fp
 8003904:	9209      	str	r2, [sp, #36]	; 0x24
 8003906:	f89a 3000 	ldrb.w	r3, [sl]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80a2 	beq.w	8003a54 <_svfiprintf_r+0x1c8>
 8003910:	2300      	movs	r3, #0
 8003912:	f04f 32ff 	mov.w	r2, #4294967295
 8003916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800391a:	f10a 0a01 	add.w	sl, sl, #1
 800391e:	9304      	str	r3, [sp, #16]
 8003920:	9307      	str	r3, [sp, #28]
 8003922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003926:	931a      	str	r3, [sp, #104]	; 0x68
 8003928:	4654      	mov	r4, sl
 800392a:	2205      	movs	r2, #5
 800392c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003930:	4851      	ldr	r0, [pc, #324]	; (8003a78 <_svfiprintf_r+0x1ec>)
 8003932:	f000 fa41 	bl	8003db8 <memchr>
 8003936:	9a04      	ldr	r2, [sp, #16]
 8003938:	b9d8      	cbnz	r0, 8003972 <_svfiprintf_r+0xe6>
 800393a:	06d0      	lsls	r0, r2, #27
 800393c:	bf44      	itt	mi
 800393e:	2320      	movmi	r3, #32
 8003940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003944:	0711      	lsls	r1, r2, #28
 8003946:	bf44      	itt	mi
 8003948:	232b      	movmi	r3, #43	; 0x2b
 800394a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800394e:	f89a 3000 	ldrb.w	r3, [sl]
 8003952:	2b2a      	cmp	r3, #42	; 0x2a
 8003954:	d015      	beq.n	8003982 <_svfiprintf_r+0xf6>
 8003956:	4654      	mov	r4, sl
 8003958:	2000      	movs	r0, #0
 800395a:	f04f 0c0a 	mov.w	ip, #10
 800395e:	9a07      	ldr	r2, [sp, #28]
 8003960:	4621      	mov	r1, r4
 8003962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003966:	3b30      	subs	r3, #48	; 0x30
 8003968:	2b09      	cmp	r3, #9
 800396a:	d94e      	bls.n	8003a0a <_svfiprintf_r+0x17e>
 800396c:	b1b0      	cbz	r0, 800399c <_svfiprintf_r+0x110>
 800396e:	9207      	str	r2, [sp, #28]
 8003970:	e014      	b.n	800399c <_svfiprintf_r+0x110>
 8003972:	eba0 0308 	sub.w	r3, r0, r8
 8003976:	fa09 f303 	lsl.w	r3, r9, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	46a2      	mov	sl, r4
 800397e:	9304      	str	r3, [sp, #16]
 8003980:	e7d2      	b.n	8003928 <_svfiprintf_r+0x9c>
 8003982:	9b03      	ldr	r3, [sp, #12]
 8003984:	1d19      	adds	r1, r3, #4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	9103      	str	r1, [sp, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	bfbb      	ittet	lt
 800398e:	425b      	neglt	r3, r3
 8003990:	f042 0202 	orrlt.w	r2, r2, #2
 8003994:	9307      	strge	r3, [sp, #28]
 8003996:	9307      	strlt	r3, [sp, #28]
 8003998:	bfb8      	it	lt
 800399a:	9204      	strlt	r2, [sp, #16]
 800399c:	7823      	ldrb	r3, [r4, #0]
 800399e:	2b2e      	cmp	r3, #46	; 0x2e
 80039a0:	d10c      	bne.n	80039bc <_svfiprintf_r+0x130>
 80039a2:	7863      	ldrb	r3, [r4, #1]
 80039a4:	2b2a      	cmp	r3, #42	; 0x2a
 80039a6:	d135      	bne.n	8003a14 <_svfiprintf_r+0x188>
 80039a8:	9b03      	ldr	r3, [sp, #12]
 80039aa:	3402      	adds	r4, #2
 80039ac:	1d1a      	adds	r2, r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	9203      	str	r2, [sp, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bfb8      	it	lt
 80039b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ba:	9305      	str	r3, [sp, #20]
 80039bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a88 <_svfiprintf_r+0x1fc>
 80039c0:	2203      	movs	r2, #3
 80039c2:	4650      	mov	r0, sl
 80039c4:	7821      	ldrb	r1, [r4, #0]
 80039c6:	f000 f9f7 	bl	8003db8 <memchr>
 80039ca:	b140      	cbz	r0, 80039de <_svfiprintf_r+0x152>
 80039cc:	2340      	movs	r3, #64	; 0x40
 80039ce:	eba0 000a 	sub.w	r0, r0, sl
 80039d2:	fa03 f000 	lsl.w	r0, r3, r0
 80039d6:	9b04      	ldr	r3, [sp, #16]
 80039d8:	3401      	adds	r4, #1
 80039da:	4303      	orrs	r3, r0
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039e2:	2206      	movs	r2, #6
 80039e4:	4825      	ldr	r0, [pc, #148]	; (8003a7c <_svfiprintf_r+0x1f0>)
 80039e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039ea:	f000 f9e5 	bl	8003db8 <memchr>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d038      	beq.n	8003a64 <_svfiprintf_r+0x1d8>
 80039f2:	4b23      	ldr	r3, [pc, #140]	; (8003a80 <_svfiprintf_r+0x1f4>)
 80039f4:	bb1b      	cbnz	r3, 8003a3e <_svfiprintf_r+0x1b2>
 80039f6:	9b03      	ldr	r3, [sp, #12]
 80039f8:	3307      	adds	r3, #7
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	3308      	adds	r3, #8
 8003a00:	9303      	str	r3, [sp, #12]
 8003a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a04:	4433      	add	r3, r6
 8003a06:	9309      	str	r3, [sp, #36]	; 0x24
 8003a08:	e767      	b.n	80038da <_svfiprintf_r+0x4e>
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a12:	e7a5      	b.n	8003960 <_svfiprintf_r+0xd4>
 8003a14:	2300      	movs	r3, #0
 8003a16:	f04f 0c0a 	mov.w	ip, #10
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	3401      	adds	r4, #1
 8003a1e:	9305      	str	r3, [sp, #20]
 8003a20:	4620      	mov	r0, r4
 8003a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a26:	3a30      	subs	r2, #48	; 0x30
 8003a28:	2a09      	cmp	r2, #9
 8003a2a:	d903      	bls.n	8003a34 <_svfiprintf_r+0x1a8>
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0c5      	beq.n	80039bc <_svfiprintf_r+0x130>
 8003a30:	9105      	str	r1, [sp, #20]
 8003a32:	e7c3      	b.n	80039bc <_svfiprintf_r+0x130>
 8003a34:	4604      	mov	r4, r0
 8003a36:	2301      	movs	r3, #1
 8003a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a3c:	e7f0      	b.n	8003a20 <_svfiprintf_r+0x194>
 8003a3e:	ab03      	add	r3, sp, #12
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	462a      	mov	r2, r5
 8003a44:	4638      	mov	r0, r7
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <_svfiprintf_r+0x1f8>)
 8003a48:	a904      	add	r1, sp, #16
 8003a4a:	f3af 8000 	nop.w
 8003a4e:	1c42      	adds	r2, r0, #1
 8003a50:	4606      	mov	r6, r0
 8003a52:	d1d6      	bne.n	8003a02 <_svfiprintf_r+0x176>
 8003a54:	89ab      	ldrh	r3, [r5, #12]
 8003a56:	065b      	lsls	r3, r3, #25
 8003a58:	f53f af2c 	bmi.w	80038b4 <_svfiprintf_r+0x28>
 8003a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a5e:	b01d      	add	sp, #116	; 0x74
 8003a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a64:	ab03      	add	r3, sp, #12
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	462a      	mov	r2, r5
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <_svfiprintf_r+0x1f8>)
 8003a6e:	a904      	add	r1, sp, #16
 8003a70:	f000 f87c 	bl	8003b6c <_printf_i>
 8003a74:	e7eb      	b.n	8003a4e <_svfiprintf_r+0x1c2>
 8003a76:	bf00      	nop
 8003a78:	080040f2 	.word	0x080040f2
 8003a7c:	080040fc 	.word	0x080040fc
 8003a80:	00000000 	.word	0x00000000
 8003a84:	080037d5 	.word	0x080037d5
 8003a88:	080040f8 	.word	0x080040f8

08003a8c <_printf_common>:
 8003a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	4616      	mov	r6, r2
 8003a92:	4699      	mov	r9, r3
 8003a94:	688a      	ldr	r2, [r1, #8]
 8003a96:	690b      	ldr	r3, [r1, #16]
 8003a98:	4607      	mov	r7, r0
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	bfb8      	it	lt
 8003a9e:	4613      	movlt	r3, r2
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aac:	b10a      	cbz	r2, 8003ab2 <_printf_common+0x26>
 8003aae:	3301      	adds	r3, #1
 8003ab0:	6033      	str	r3, [r6, #0]
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	0699      	lsls	r1, r3, #26
 8003ab6:	bf42      	ittt	mi
 8003ab8:	6833      	ldrmi	r3, [r6, #0]
 8003aba:	3302      	addmi	r3, #2
 8003abc:	6033      	strmi	r3, [r6, #0]
 8003abe:	6825      	ldr	r5, [r4, #0]
 8003ac0:	f015 0506 	ands.w	r5, r5, #6
 8003ac4:	d106      	bne.n	8003ad4 <_printf_common+0x48>
 8003ac6:	f104 0a19 	add.w	sl, r4, #25
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	6832      	ldr	r2, [r6, #0]
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	42ab      	cmp	r3, r5
 8003ad2:	dc28      	bgt.n	8003b26 <_printf_common+0x9a>
 8003ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ad8:	1e13      	subs	r3, r2, #0
 8003ada:	6822      	ldr	r2, [r4, #0]
 8003adc:	bf18      	it	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	0692      	lsls	r2, r2, #26
 8003ae2:	d42d      	bmi.n	8003b40 <_printf_common+0xb4>
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	4638      	mov	r0, r7
 8003ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aec:	47c0      	blx	r8
 8003aee:	3001      	adds	r0, #1
 8003af0:	d020      	beq.n	8003b34 <_printf_common+0xa8>
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	68e5      	ldr	r5, [r4, #12]
 8003af6:	f003 0306 	and.w	r3, r3, #6
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	bf18      	it	ne
 8003afe:	2500      	movne	r5, #0
 8003b00:	6832      	ldr	r2, [r6, #0]
 8003b02:	f04f 0600 	mov.w	r6, #0
 8003b06:	68a3      	ldr	r3, [r4, #8]
 8003b08:	bf08      	it	eq
 8003b0a:	1aad      	subeq	r5, r5, r2
 8003b0c:	6922      	ldr	r2, [r4, #16]
 8003b0e:	bf08      	it	eq
 8003b10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b14:	4293      	cmp	r3, r2
 8003b16:	bfc4      	itt	gt
 8003b18:	1a9b      	subgt	r3, r3, r2
 8003b1a:	18ed      	addgt	r5, r5, r3
 8003b1c:	341a      	adds	r4, #26
 8003b1e:	42b5      	cmp	r5, r6
 8003b20:	d11a      	bne.n	8003b58 <_printf_common+0xcc>
 8003b22:	2000      	movs	r0, #0
 8003b24:	e008      	b.n	8003b38 <_printf_common+0xac>
 8003b26:	2301      	movs	r3, #1
 8003b28:	4652      	mov	r2, sl
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	47c0      	blx	r8
 8003b30:	3001      	adds	r0, #1
 8003b32:	d103      	bne.n	8003b3c <_printf_common+0xb0>
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b3c:	3501      	adds	r5, #1
 8003b3e:	e7c4      	b.n	8003aca <_printf_common+0x3e>
 8003b40:	2030      	movs	r0, #48	; 0x30
 8003b42:	18e1      	adds	r1, r4, r3
 8003b44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b4e:	4422      	add	r2, r4
 8003b50:	3302      	adds	r3, #2
 8003b52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b56:	e7c5      	b.n	8003ae4 <_printf_common+0x58>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	4638      	mov	r0, r7
 8003b60:	47c0      	blx	r8
 8003b62:	3001      	adds	r0, #1
 8003b64:	d0e6      	beq.n	8003b34 <_printf_common+0xa8>
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7d9      	b.n	8003b1e <_printf_common+0x92>
	...

08003b6c <_printf_i>:
 8003b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b70:	460c      	mov	r4, r1
 8003b72:	7e27      	ldrb	r7, [r4, #24]
 8003b74:	4691      	mov	r9, r2
 8003b76:	2f78      	cmp	r7, #120	; 0x78
 8003b78:	4680      	mov	r8, r0
 8003b7a:	469a      	mov	sl, r3
 8003b7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b82:	d807      	bhi.n	8003b94 <_printf_i+0x28>
 8003b84:	2f62      	cmp	r7, #98	; 0x62
 8003b86:	d80a      	bhi.n	8003b9e <_printf_i+0x32>
 8003b88:	2f00      	cmp	r7, #0
 8003b8a:	f000 80d9 	beq.w	8003d40 <_printf_i+0x1d4>
 8003b8e:	2f58      	cmp	r7, #88	; 0x58
 8003b90:	f000 80a4 	beq.w	8003cdc <_printf_i+0x170>
 8003b94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b9c:	e03a      	b.n	8003c14 <_printf_i+0xa8>
 8003b9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ba2:	2b15      	cmp	r3, #21
 8003ba4:	d8f6      	bhi.n	8003b94 <_printf_i+0x28>
 8003ba6:	a001      	add	r0, pc, #4	; (adr r0, 8003bac <_printf_i+0x40>)
 8003ba8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003bac:	08003c05 	.word	0x08003c05
 8003bb0:	08003c19 	.word	0x08003c19
 8003bb4:	08003b95 	.word	0x08003b95
 8003bb8:	08003b95 	.word	0x08003b95
 8003bbc:	08003b95 	.word	0x08003b95
 8003bc0:	08003b95 	.word	0x08003b95
 8003bc4:	08003c19 	.word	0x08003c19
 8003bc8:	08003b95 	.word	0x08003b95
 8003bcc:	08003b95 	.word	0x08003b95
 8003bd0:	08003b95 	.word	0x08003b95
 8003bd4:	08003b95 	.word	0x08003b95
 8003bd8:	08003d27 	.word	0x08003d27
 8003bdc:	08003c49 	.word	0x08003c49
 8003be0:	08003d09 	.word	0x08003d09
 8003be4:	08003b95 	.word	0x08003b95
 8003be8:	08003b95 	.word	0x08003b95
 8003bec:	08003d49 	.word	0x08003d49
 8003bf0:	08003b95 	.word	0x08003b95
 8003bf4:	08003c49 	.word	0x08003c49
 8003bf8:	08003b95 	.word	0x08003b95
 8003bfc:	08003b95 	.word	0x08003b95
 8003c00:	08003d11 	.word	0x08003d11
 8003c04:	680b      	ldr	r3, [r1, #0]
 8003c06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c0a:	1d1a      	adds	r2, r3, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	600a      	str	r2, [r1, #0]
 8003c10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0a4      	b.n	8003d62 <_printf_i+0x1f6>
 8003c18:	6825      	ldr	r5, [r4, #0]
 8003c1a:	6808      	ldr	r0, [r1, #0]
 8003c1c:	062e      	lsls	r6, r5, #24
 8003c1e:	f100 0304 	add.w	r3, r0, #4
 8003c22:	d50a      	bpl.n	8003c3a <_printf_i+0xce>
 8003c24:	6805      	ldr	r5, [r0, #0]
 8003c26:	600b      	str	r3, [r1, #0]
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	da03      	bge.n	8003c34 <_printf_i+0xc8>
 8003c2c:	232d      	movs	r3, #45	; 0x2d
 8003c2e:	426d      	negs	r5, r5
 8003c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c34:	230a      	movs	r3, #10
 8003c36:	485e      	ldr	r0, [pc, #376]	; (8003db0 <_printf_i+0x244>)
 8003c38:	e019      	b.n	8003c6e <_printf_i+0x102>
 8003c3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003c3e:	6805      	ldr	r5, [r0, #0]
 8003c40:	600b      	str	r3, [r1, #0]
 8003c42:	bf18      	it	ne
 8003c44:	b22d      	sxthne	r5, r5
 8003c46:	e7ef      	b.n	8003c28 <_printf_i+0xbc>
 8003c48:	680b      	ldr	r3, [r1, #0]
 8003c4a:	6825      	ldr	r5, [r4, #0]
 8003c4c:	1d18      	adds	r0, r3, #4
 8003c4e:	6008      	str	r0, [r1, #0]
 8003c50:	0628      	lsls	r0, r5, #24
 8003c52:	d501      	bpl.n	8003c58 <_printf_i+0xec>
 8003c54:	681d      	ldr	r5, [r3, #0]
 8003c56:	e002      	b.n	8003c5e <_printf_i+0xf2>
 8003c58:	0669      	lsls	r1, r5, #25
 8003c5a:	d5fb      	bpl.n	8003c54 <_printf_i+0xe8>
 8003c5c:	881d      	ldrh	r5, [r3, #0]
 8003c5e:	2f6f      	cmp	r7, #111	; 0x6f
 8003c60:	bf0c      	ite	eq
 8003c62:	2308      	moveq	r3, #8
 8003c64:	230a      	movne	r3, #10
 8003c66:	4852      	ldr	r0, [pc, #328]	; (8003db0 <_printf_i+0x244>)
 8003c68:	2100      	movs	r1, #0
 8003c6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c6e:	6866      	ldr	r6, [r4, #4]
 8003c70:	2e00      	cmp	r6, #0
 8003c72:	bfa8      	it	ge
 8003c74:	6821      	ldrge	r1, [r4, #0]
 8003c76:	60a6      	str	r6, [r4, #8]
 8003c78:	bfa4      	itt	ge
 8003c7a:	f021 0104 	bicge.w	r1, r1, #4
 8003c7e:	6021      	strge	r1, [r4, #0]
 8003c80:	b90d      	cbnz	r5, 8003c86 <_printf_i+0x11a>
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	d04d      	beq.n	8003d22 <_printf_i+0x1b6>
 8003c86:	4616      	mov	r6, r2
 8003c88:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c8c:	fb03 5711 	mls	r7, r3, r1, r5
 8003c90:	5dc7      	ldrb	r7, [r0, r7]
 8003c92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c96:	462f      	mov	r7, r5
 8003c98:	42bb      	cmp	r3, r7
 8003c9a:	460d      	mov	r5, r1
 8003c9c:	d9f4      	bls.n	8003c88 <_printf_i+0x11c>
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d10b      	bne.n	8003cba <_printf_i+0x14e>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	07df      	lsls	r7, r3, #31
 8003ca6:	d508      	bpl.n	8003cba <_printf_i+0x14e>
 8003ca8:	6923      	ldr	r3, [r4, #16]
 8003caa:	6861      	ldr	r1, [r4, #4]
 8003cac:	4299      	cmp	r1, r3
 8003cae:	bfde      	ittt	le
 8003cb0:	2330      	movle	r3, #48	; 0x30
 8003cb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cba:	1b92      	subs	r2, r2, r6
 8003cbc:	6122      	str	r2, [r4, #16]
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	f8cd a000 	str.w	sl, [sp]
 8003cc8:	aa03      	add	r2, sp, #12
 8003cca:	f7ff fedf 	bl	8003a8c <_printf_common>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d14c      	bne.n	8003d6c <_printf_i+0x200>
 8003cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd6:	b004      	add	sp, #16
 8003cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cdc:	4834      	ldr	r0, [pc, #208]	; (8003db0 <_printf_i+0x244>)
 8003cde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ce2:	680e      	ldr	r6, [r1, #0]
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003cea:	061f      	lsls	r7, r3, #24
 8003cec:	600e      	str	r6, [r1, #0]
 8003cee:	d514      	bpl.n	8003d1a <_printf_i+0x1ae>
 8003cf0:	07d9      	lsls	r1, r3, #31
 8003cf2:	bf44      	itt	mi
 8003cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8003cf8:	6023      	strmi	r3, [r4, #0]
 8003cfa:	b91d      	cbnz	r5, 8003d04 <_printf_i+0x198>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	f023 0320 	bic.w	r3, r3, #32
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	2310      	movs	r3, #16
 8003d06:	e7af      	b.n	8003c68 <_printf_i+0xfc>
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	f043 0320 	orr.w	r3, r3, #32
 8003d0e:	6023      	str	r3, [r4, #0]
 8003d10:	2378      	movs	r3, #120	; 0x78
 8003d12:	4828      	ldr	r0, [pc, #160]	; (8003db4 <_printf_i+0x248>)
 8003d14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d18:	e7e3      	b.n	8003ce2 <_printf_i+0x176>
 8003d1a:	065e      	lsls	r6, r3, #25
 8003d1c:	bf48      	it	mi
 8003d1e:	b2ad      	uxthmi	r5, r5
 8003d20:	e7e6      	b.n	8003cf0 <_printf_i+0x184>
 8003d22:	4616      	mov	r6, r2
 8003d24:	e7bb      	b.n	8003c9e <_printf_i+0x132>
 8003d26:	680b      	ldr	r3, [r1, #0]
 8003d28:	6826      	ldr	r6, [r4, #0]
 8003d2a:	1d1d      	adds	r5, r3, #4
 8003d2c:	6960      	ldr	r0, [r4, #20]
 8003d2e:	600d      	str	r5, [r1, #0]
 8003d30:	0635      	lsls	r5, r6, #24
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	d501      	bpl.n	8003d3a <_printf_i+0x1ce>
 8003d36:	6018      	str	r0, [r3, #0]
 8003d38:	e002      	b.n	8003d40 <_printf_i+0x1d4>
 8003d3a:	0671      	lsls	r1, r6, #25
 8003d3c:	d5fb      	bpl.n	8003d36 <_printf_i+0x1ca>
 8003d3e:	8018      	strh	r0, [r3, #0]
 8003d40:	2300      	movs	r3, #0
 8003d42:	4616      	mov	r6, r2
 8003d44:	6123      	str	r3, [r4, #16]
 8003d46:	e7ba      	b.n	8003cbe <_printf_i+0x152>
 8003d48:	680b      	ldr	r3, [r1, #0]
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	600a      	str	r2, [r1, #0]
 8003d4e:	681e      	ldr	r6, [r3, #0]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4630      	mov	r0, r6
 8003d54:	6862      	ldr	r2, [r4, #4]
 8003d56:	f000 f82f 	bl	8003db8 <memchr>
 8003d5a:	b108      	cbz	r0, 8003d60 <_printf_i+0x1f4>
 8003d5c:	1b80      	subs	r0, r0, r6
 8003d5e:	6060      	str	r0, [r4, #4]
 8003d60:	6863      	ldr	r3, [r4, #4]
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d6a:	e7a8      	b.n	8003cbe <_printf_i+0x152>
 8003d6c:	4632      	mov	r2, r6
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4640      	mov	r0, r8
 8003d72:	6923      	ldr	r3, [r4, #16]
 8003d74:	47d0      	blx	sl
 8003d76:	3001      	adds	r0, #1
 8003d78:	d0ab      	beq.n	8003cd2 <_printf_i+0x166>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	079b      	lsls	r3, r3, #30
 8003d7e:	d413      	bmi.n	8003da8 <_printf_i+0x23c>
 8003d80:	68e0      	ldr	r0, [r4, #12]
 8003d82:	9b03      	ldr	r3, [sp, #12]
 8003d84:	4298      	cmp	r0, r3
 8003d86:	bfb8      	it	lt
 8003d88:	4618      	movlt	r0, r3
 8003d8a:	e7a4      	b.n	8003cd6 <_printf_i+0x16a>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4649      	mov	r1, r9
 8003d92:	4640      	mov	r0, r8
 8003d94:	47d0      	blx	sl
 8003d96:	3001      	adds	r0, #1
 8003d98:	d09b      	beq.n	8003cd2 <_printf_i+0x166>
 8003d9a:	3501      	adds	r5, #1
 8003d9c:	68e3      	ldr	r3, [r4, #12]
 8003d9e:	9903      	ldr	r1, [sp, #12]
 8003da0:	1a5b      	subs	r3, r3, r1
 8003da2:	42ab      	cmp	r3, r5
 8003da4:	dcf2      	bgt.n	8003d8c <_printf_i+0x220>
 8003da6:	e7eb      	b.n	8003d80 <_printf_i+0x214>
 8003da8:	2500      	movs	r5, #0
 8003daa:	f104 0619 	add.w	r6, r4, #25
 8003dae:	e7f5      	b.n	8003d9c <_printf_i+0x230>
 8003db0:	08004103 	.word	0x08004103
 8003db4:	08004114 	.word	0x08004114

08003db8 <memchr>:
 8003db8:	4603      	mov	r3, r0
 8003dba:	b510      	push	{r4, lr}
 8003dbc:	b2c9      	uxtb	r1, r1
 8003dbe:	4402      	add	r2, r0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	d101      	bne.n	8003dca <memchr+0x12>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e003      	b.n	8003dd2 <memchr+0x1a>
 8003dca:	7804      	ldrb	r4, [r0, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	428c      	cmp	r4, r1
 8003dd0:	d1f6      	bne.n	8003dc0 <memchr+0x8>
 8003dd2:	bd10      	pop	{r4, pc}

08003dd4 <memcpy>:
 8003dd4:	440a      	add	r2, r1
 8003dd6:	4291      	cmp	r1, r2
 8003dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ddc:	d100      	bne.n	8003de0 <memcpy+0xc>
 8003dde:	4770      	bx	lr
 8003de0:	b510      	push	{r4, lr}
 8003de2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de6:	4291      	cmp	r1, r2
 8003de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dec:	d1f9      	bne.n	8003de2 <memcpy+0xe>
 8003dee:	bd10      	pop	{r4, pc}

08003df0 <memmove>:
 8003df0:	4288      	cmp	r0, r1
 8003df2:	b510      	push	{r4, lr}
 8003df4:	eb01 0402 	add.w	r4, r1, r2
 8003df8:	d902      	bls.n	8003e00 <memmove+0x10>
 8003dfa:	4284      	cmp	r4, r0
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	d807      	bhi.n	8003e10 <memmove+0x20>
 8003e00:	1e43      	subs	r3, r0, #1
 8003e02:	42a1      	cmp	r1, r4
 8003e04:	d008      	beq.n	8003e18 <memmove+0x28>
 8003e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e0e:	e7f8      	b.n	8003e02 <memmove+0x12>
 8003e10:	4601      	mov	r1, r0
 8003e12:	4402      	add	r2, r0
 8003e14:	428a      	cmp	r2, r1
 8003e16:	d100      	bne.n	8003e1a <memmove+0x2a>
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e22:	e7f7      	b.n	8003e14 <memmove+0x24>

08003e24 <_free_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4605      	mov	r5, r0
 8003e28:	2900      	cmp	r1, #0
 8003e2a:	d043      	beq.n	8003eb4 <_free_r+0x90>
 8003e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e30:	1f0c      	subs	r4, r1, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	bfb8      	it	lt
 8003e36:	18e4      	addlt	r4, r4, r3
 8003e38:	f000 f8d0 	bl	8003fdc <__malloc_lock>
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	; (8003eb8 <_free_r+0x94>)
 8003e3e:	6813      	ldr	r3, [r2, #0]
 8003e40:	4610      	mov	r0, r2
 8003e42:	b933      	cbnz	r3, 8003e52 <_free_r+0x2e>
 8003e44:	6063      	str	r3, [r4, #4]
 8003e46:	6014      	str	r4, [r2, #0]
 8003e48:	4628      	mov	r0, r5
 8003e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e4e:	f000 b8cb 	b.w	8003fe8 <__malloc_unlock>
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	d90a      	bls.n	8003e6c <_free_r+0x48>
 8003e56:	6821      	ldr	r1, [r4, #0]
 8003e58:	1862      	adds	r2, r4, r1
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	bf01      	itttt	eq
 8003e5e:	681a      	ldreq	r2, [r3, #0]
 8003e60:	685b      	ldreq	r3, [r3, #4]
 8003e62:	1852      	addeq	r2, r2, r1
 8003e64:	6022      	streq	r2, [r4, #0]
 8003e66:	6063      	str	r3, [r4, #4]
 8003e68:	6004      	str	r4, [r0, #0]
 8003e6a:	e7ed      	b.n	8003e48 <_free_r+0x24>
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	b10b      	cbz	r3, 8003e76 <_free_r+0x52>
 8003e72:	42a3      	cmp	r3, r4
 8003e74:	d9fa      	bls.n	8003e6c <_free_r+0x48>
 8003e76:	6811      	ldr	r1, [r2, #0]
 8003e78:	1850      	adds	r0, r2, r1
 8003e7a:	42a0      	cmp	r0, r4
 8003e7c:	d10b      	bne.n	8003e96 <_free_r+0x72>
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	4401      	add	r1, r0
 8003e82:	1850      	adds	r0, r2, r1
 8003e84:	4283      	cmp	r3, r0
 8003e86:	6011      	str	r1, [r2, #0]
 8003e88:	d1de      	bne.n	8003e48 <_free_r+0x24>
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4401      	add	r1, r0
 8003e90:	6011      	str	r1, [r2, #0]
 8003e92:	6053      	str	r3, [r2, #4]
 8003e94:	e7d8      	b.n	8003e48 <_free_r+0x24>
 8003e96:	d902      	bls.n	8003e9e <_free_r+0x7a>
 8003e98:	230c      	movs	r3, #12
 8003e9a:	602b      	str	r3, [r5, #0]
 8003e9c:	e7d4      	b.n	8003e48 <_free_r+0x24>
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	1821      	adds	r1, r4, r0
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	bf01      	itttt	eq
 8003ea6:	6819      	ldreq	r1, [r3, #0]
 8003ea8:	685b      	ldreq	r3, [r3, #4]
 8003eaa:	1809      	addeq	r1, r1, r0
 8003eac:	6021      	streq	r1, [r4, #0]
 8003eae:	6063      	str	r3, [r4, #4]
 8003eb0:	6054      	str	r4, [r2, #4]
 8003eb2:	e7c9      	b.n	8003e48 <_free_r+0x24>
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000014c 	.word	0x2000014c

08003ebc <_malloc_r>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	1ccd      	adds	r5, r1, #3
 8003ec0:	f025 0503 	bic.w	r5, r5, #3
 8003ec4:	3508      	adds	r5, #8
 8003ec6:	2d0c      	cmp	r5, #12
 8003ec8:	bf38      	it	cc
 8003eca:	250c      	movcc	r5, #12
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	4606      	mov	r6, r0
 8003ed0:	db01      	blt.n	8003ed6 <_malloc_r+0x1a>
 8003ed2:	42a9      	cmp	r1, r5
 8003ed4:	d903      	bls.n	8003ede <_malloc_r+0x22>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	6033      	str	r3, [r6, #0]
 8003eda:	2000      	movs	r0, #0
 8003edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ede:	f000 f87d 	bl	8003fdc <__malloc_lock>
 8003ee2:	4921      	ldr	r1, [pc, #132]	; (8003f68 <_malloc_r+0xac>)
 8003ee4:	680a      	ldr	r2, [r1, #0]
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	b99c      	cbnz	r4, 8003f12 <_malloc_r+0x56>
 8003eea:	4f20      	ldr	r7, [pc, #128]	; (8003f6c <_malloc_r+0xb0>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	b923      	cbnz	r3, 8003efa <_malloc_r+0x3e>
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 f862 	bl	8003fbc <_sbrk_r>
 8003ef8:	6038      	str	r0, [r7, #0]
 8003efa:	4629      	mov	r1, r5
 8003efc:	4630      	mov	r0, r6
 8003efe:	f000 f85d 	bl	8003fbc <_sbrk_r>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d123      	bne.n	8003f4e <_malloc_r+0x92>
 8003f06:	230c      	movs	r3, #12
 8003f08:	4630      	mov	r0, r6
 8003f0a:	6033      	str	r3, [r6, #0]
 8003f0c:	f000 f86c 	bl	8003fe8 <__malloc_unlock>
 8003f10:	e7e3      	b.n	8003eda <_malloc_r+0x1e>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	1b5b      	subs	r3, r3, r5
 8003f16:	d417      	bmi.n	8003f48 <_malloc_r+0x8c>
 8003f18:	2b0b      	cmp	r3, #11
 8003f1a:	d903      	bls.n	8003f24 <_malloc_r+0x68>
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	441c      	add	r4, r3
 8003f20:	6025      	str	r5, [r4, #0]
 8003f22:	e004      	b.n	8003f2e <_malloc_r+0x72>
 8003f24:	6863      	ldr	r3, [r4, #4]
 8003f26:	42a2      	cmp	r2, r4
 8003f28:	bf0c      	ite	eq
 8003f2a:	600b      	streq	r3, [r1, #0]
 8003f2c:	6053      	strne	r3, [r2, #4]
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f85a 	bl	8003fe8 <__malloc_unlock>
 8003f34:	f104 000b 	add.w	r0, r4, #11
 8003f38:	1d23      	adds	r3, r4, #4
 8003f3a:	f020 0007 	bic.w	r0, r0, #7
 8003f3e:	1ac2      	subs	r2, r0, r3
 8003f40:	d0cc      	beq.n	8003edc <_malloc_r+0x20>
 8003f42:	1a1b      	subs	r3, r3, r0
 8003f44:	50a3      	str	r3, [r4, r2]
 8003f46:	e7c9      	b.n	8003edc <_malloc_r+0x20>
 8003f48:	4622      	mov	r2, r4
 8003f4a:	6864      	ldr	r4, [r4, #4]
 8003f4c:	e7cc      	b.n	8003ee8 <_malloc_r+0x2c>
 8003f4e:	1cc4      	adds	r4, r0, #3
 8003f50:	f024 0403 	bic.w	r4, r4, #3
 8003f54:	42a0      	cmp	r0, r4
 8003f56:	d0e3      	beq.n	8003f20 <_malloc_r+0x64>
 8003f58:	1a21      	subs	r1, r4, r0
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f000 f82e 	bl	8003fbc <_sbrk_r>
 8003f60:	3001      	adds	r0, #1
 8003f62:	d1dd      	bne.n	8003f20 <_malloc_r+0x64>
 8003f64:	e7cf      	b.n	8003f06 <_malloc_r+0x4a>
 8003f66:	bf00      	nop
 8003f68:	2000014c 	.word	0x2000014c
 8003f6c:	20000150 	.word	0x20000150

08003f70 <_realloc_r>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	4607      	mov	r7, r0
 8003f74:	4614      	mov	r4, r2
 8003f76:	460e      	mov	r6, r1
 8003f78:	b921      	cbnz	r1, 8003f84 <_realloc_r+0x14>
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f80:	f7ff bf9c 	b.w	8003ebc <_malloc_r>
 8003f84:	b922      	cbnz	r2, 8003f90 <_realloc_r+0x20>
 8003f86:	f7ff ff4d 	bl	8003e24 <_free_r>
 8003f8a:	4625      	mov	r5, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f90:	f000 f830 	bl	8003ff4 <_malloc_usable_size_r>
 8003f94:	42a0      	cmp	r0, r4
 8003f96:	d20f      	bcs.n	8003fb8 <_realloc_r+0x48>
 8003f98:	4621      	mov	r1, r4
 8003f9a:	4638      	mov	r0, r7
 8003f9c:	f7ff ff8e 	bl	8003ebc <_malloc_r>
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d0f2      	beq.n	8003f8c <_realloc_r+0x1c>
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4622      	mov	r2, r4
 8003faa:	f7ff ff13 	bl	8003dd4 <memcpy>
 8003fae:	4631      	mov	r1, r6
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	f7ff ff37 	bl	8003e24 <_free_r>
 8003fb6:	e7e9      	b.n	8003f8c <_realloc_r+0x1c>
 8003fb8:	4635      	mov	r5, r6
 8003fba:	e7e7      	b.n	8003f8c <_realloc_r+0x1c>

08003fbc <_sbrk_r>:
 8003fbc:	b538      	push	{r3, r4, r5, lr}
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	4d05      	ldr	r5, [pc, #20]	; (8003fd8 <_sbrk_r+0x1c>)
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	f7fd f928 	bl	800121c <_sbrk>
 8003fcc:	1c43      	adds	r3, r0, #1
 8003fce:	d102      	bne.n	8003fd6 <_sbrk_r+0x1a>
 8003fd0:	682b      	ldr	r3, [r5, #0]
 8003fd2:	b103      	cbz	r3, 8003fd6 <_sbrk_r+0x1a>
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	bd38      	pop	{r3, r4, r5, pc}
 8003fd8:	20000230 	.word	0x20000230

08003fdc <__malloc_lock>:
 8003fdc:	4801      	ldr	r0, [pc, #4]	; (8003fe4 <__malloc_lock+0x8>)
 8003fde:	f000 b811 	b.w	8004004 <__retarget_lock_acquire_recursive>
 8003fe2:	bf00      	nop
 8003fe4:	20000238 	.word	0x20000238

08003fe8 <__malloc_unlock>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__malloc_unlock+0x8>)
 8003fea:	f000 b80c 	b.w	8004006 <__retarget_lock_release_recursive>
 8003fee:	bf00      	nop
 8003ff0:	20000238 	.word	0x20000238

08003ff4 <_malloc_usable_size_r>:
 8003ff4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ff8:	1f18      	subs	r0, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	bfbc      	itt	lt
 8003ffe:	580b      	ldrlt	r3, [r1, r0]
 8004000:	18c0      	addlt	r0, r0, r3
 8004002:	4770      	bx	lr

08004004 <__retarget_lock_acquire_recursive>:
 8004004:	4770      	bx	lr

08004006 <__retarget_lock_release_recursive>:
 8004006:	4770      	bx	lr

08004008 <_init>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr

08004014 <_fini>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	bf00      	nop
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr
