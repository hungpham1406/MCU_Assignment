
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b18  08002b18  00012b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000030  08002b7c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08002b7c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2a8  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e95  00000000  00000000  0002d301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  0002fe28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175a6  00000000  00000000  000309c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e53e  00000000  00000000  00047f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ca9  00000000  00000000  000564ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd155  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000dd1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b00 	.word	0x08002b00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002b00 	.word	0x08002b00

0800014c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initStateForButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initStateForButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initStateForButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initStateForButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initStateForButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initStateForButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2100      	movs	r1, #0
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b03      	cmp	r3, #3
 800019e:	dddb      	ble.n	8000158 <initStateForButton+0xc>
	 }
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	200000a4 	.word	0x200000a4
 80001b0:	200000b4 	.word	0x200000b4
 80001b4:	200000e4 	.word	0x200000e4
 80001b8:	20000094 	.word	0x20000094
 80001bc:	200000d4 	.word	0x200000d4
 80001c0:	200000c4 	.word	0x200000c4

080001c4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <isButtonPressed+0x30>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2100      	movs	r1, #0
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <isButtonPressed+0x24>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	200000c4 	.word	0x200000c4

080001f8 <subKeyProcess>:

void subKeyProcess(int key_index) {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <subKeyProcess+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2101      	movs	r1, #1
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	200000c4 	.word	0x200000c4

08000218 <getKeyInput>:

void getKeyInput() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e076      	b.n	8000312 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000224:	4a3f      	ldr	r2, [pc, #252]	; (8000324 <getKeyInput+0x10c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	493e      	ldr	r1, [pc, #248]	; (8000328 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000234:	4a3d      	ldr	r2, [pc, #244]	; (800032c <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4939      	ldr	r1, [pc, #228]	; (8000324 <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000244:	4a3a      	ldr	r2, [pc, #232]	; (8000330 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4939      	ldr	r1, [pc, #228]	; (8000334 <getKeyInput+0x11c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f001 faea 	bl	8001830 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	4619      	mov	r1, r3
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <getKeyInput+0x114>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <getKeyInput+0x110>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	492c      	ldr	r1, [pc, #176]	; (8000324 <getKeyInput+0x10c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d147      	bne.n	800030c <getKeyInput+0xf4>
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	4929      	ldr	r1, [pc, #164]	; (800032c <getKeyInput+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028c:	429a      	cmp	r2, r3
 800028e:	d13d      	bne.n	800030c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 8000290:	4a29      	ldr	r2, [pc, #164]	; (8000338 <getKeyInput+0x120>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <getKeyInput+0x114>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d016      	beq.n	80002d2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <getKeyInput+0x114>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4922      	ldr	r1, [pc, #136]	; (8000338 <getKeyInput+0x120>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <getKeyInput+0x114>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d125      	bne.n	800030c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ff99 	bl	80001f8 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <getKeyInput+0x124>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	21c8      	movs	r1, #200	; 0xc8
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d0:	e01c      	b.n	800030c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80002d2:	4a1a      	ldr	r2, [pc, #104]	; (800033c <getKeyInput+0x124>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4917      	ldr	r1, [pc, #92]	; (800033c <getKeyInput+0x124>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <getKeyInput+0x124>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dc0d      	bgt.n	800030c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <getKeyInput+0x114>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <getKeyInput+0xea>
						subKeyProcess(i);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff7b 	bl	80001f8 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <getKeyInput+0x124>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	21c8      	movs	r1, #200	; 0xc8
 8000308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b03      	cmp	r3, #3
 8000316:	dd85      	ble.n	8000224 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000b4 	.word	0x200000b4
 8000328:	200000a4 	.word	0x200000a4
 800032c:	200000e4 	.word	0x200000e4
 8000330:	20000008 	.word	0x20000008
 8000334:	20000000 	.word	0x20000000
 8000338:	20000094 	.word	0x20000094
 800033c:	200000d4 	.word	0x200000d4

08000340 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3b0a      	subs	r3, #10
 800034c:	2b0d      	cmp	r3, #13
 800034e:	f200 80fa 	bhi.w	8000546 <displayLed+0x206>
 8000352:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <displayLed+0x18>)
 8000354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000358:	08000391 	.word	0x08000391
 800035c:	080003bd 	.word	0x080003bd
 8000360:	080003e9 	.word	0x080003e9
 8000364:	08000547 	.word	0x08000547
 8000368:	08000547 	.word	0x08000547
 800036c:	08000547 	.word	0x08000547
 8000370:	08000547 	.word	0x08000547
 8000374:	08000547 	.word	0x08000547
 8000378:	08000547 	.word	0x08000547
 800037c:	08000547 	.word	0x08000547
 8000380:	08000415 	.word	0x08000415
 8000384:	08000463 	.word	0x08000463
 8000388:	080004af 	.word	0x080004af
 800038c:	080004fb 	.word	0x080004fb
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4872      	ldr	r0, [pc, #456]	; (8000560 <displayLed+0x220>)
 8000398:	f001 fa61 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	4870      	ldr	r0, [pc, #448]	; (8000564 <displayLed+0x224>)
 80003a2:	f001 fa5c 	bl	800185e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2120      	movs	r1, #32
 80003aa:	486e      	ldr	r0, [pc, #440]	; (8000564 <displayLed+0x224>)
 80003ac:	f001 fa57 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	486b      	ldr	r0, [pc, #428]	; (8000564 <displayLed+0x224>)
 80003b6:	f001 fa52 	bl	800185e <HAL_GPIO_WritePin>
		break;
 80003ba:	e0cd      	b.n	8000558 <displayLed+0x218>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4867      	ldr	r0, [pc, #412]	; (8000560 <displayLed+0x220>)
 80003c4:	f001 fa4b 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4865      	ldr	r0, [pc, #404]	; (8000564 <displayLed+0x224>)
 80003ce:	f001 fa46 	bl	800185e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2120      	movs	r1, #32
 80003d6:	4863      	ldr	r0, [pc, #396]	; (8000564 <displayLed+0x224>)
 80003d8:	f001 fa41 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	4860      	ldr	r0, [pc, #384]	; (8000564 <displayLed+0x224>)
 80003e2:	f001 fa3c 	bl	800185e <HAL_GPIO_WritePin>
		break;
 80003e6:	e0b7      	b.n	8000558 <displayLed+0x218>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	485c      	ldr	r0, [pc, #368]	; (8000560 <displayLed+0x220>)
 80003f0:	f001 fa35 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	485a      	ldr	r0, [pc, #360]	; (8000564 <displayLed+0x224>)
 80003fa:	f001 fa30 	bl	800185e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4858      	ldr	r0, [pc, #352]	; (8000564 <displayLed+0x224>)
 8000404:	f001 fa2b 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	4855      	ldr	r0, [pc, #340]	; (8000564 <displayLed+0x224>)
 800040e:	f001 fa26 	bl	800185e <HAL_GPIO_WritePin>
		break;
 8000412:	e0a1      	b.n	8000558 <displayLed+0x218>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041a:	4851      	ldr	r0, [pc, #324]	; (8000560 <displayLed+0x220>)
 800041c:	f001 fa1f 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2108      	movs	r1, #8
 8000424:	484f      	ldr	r0, [pc, #316]	; (8000564 <displayLed+0x224>)
 8000426:	f001 fa1a 	bl	800185e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2120      	movs	r1, #32
 800042e:	484d      	ldr	r0, [pc, #308]	; (8000564 <displayLed+0x224>)
 8000430:	f001 fa15 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2110      	movs	r1, #16
 8000438:	484a      	ldr	r0, [pc, #296]	; (8000564 <displayLed+0x224>)
 800043a:	f001 fa10 	bl	800185e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 800043e:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <displayLed+0x228>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	f040 8081 	bne.w	800054a <displayLed+0x20a>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	4845      	ldr	r0, [pc, #276]	; (8000564 <displayLed+0x224>)
 8000450:	f001 fa05 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045a:	4841      	ldr	r0, [pc, #260]	; (8000560 <displayLed+0x220>)
 800045c:	f001 f9ff 	bl	800185e <HAL_GPIO_WritePin>
		}
		break;
 8000460:	e073      	b.n	800054a <displayLed+0x20a>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	483d      	ldr	r0, [pc, #244]	; (8000560 <displayLed+0x220>)
 800046a:	f001 f9f8 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2108      	movs	r1, #8
 8000472:	483c      	ldr	r0, [pc, #240]	; (8000564 <displayLed+0x224>)
 8000474:	f001 f9f3 	bl	800185e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2120      	movs	r1, #32
 800047c:	4839      	ldr	r0, [pc, #228]	; (8000564 <displayLed+0x224>)
 800047e:	f001 f9ee 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2110      	movs	r1, #16
 8000486:	4837      	ldr	r0, [pc, #220]	; (8000564 <displayLed+0x224>)
 8000488:	f001 f9e9 	bl	800185e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <displayLed+0x228>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d15c      	bne.n	800054e <displayLed+0x20e>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	4832      	ldr	r0, [pc, #200]	; (8000564 <displayLed+0x224>)
 800049c:	f001 f9df 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a6:	482e      	ldr	r0, [pc, #184]	; (8000560 <displayLed+0x220>)
 80004a8:	f001 f9d9 	bl	800185e <HAL_GPIO_WritePin>
		}
		break;
 80004ac:	e04f      	b.n	800054e <displayLed+0x20e>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b4:	482a      	ldr	r0, [pc, #168]	; (8000560 <displayLed+0x220>)
 80004b6:	f001 f9d2 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2108      	movs	r1, #8
 80004be:	4829      	ldr	r0, [pc, #164]	; (8000564 <displayLed+0x224>)
 80004c0:	f001 f9cd 	bl	800185e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4826      	ldr	r0, [pc, #152]	; (8000564 <displayLed+0x224>)
 80004ca:	f001 f9c8 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2110      	movs	r1, #16
 80004d2:	4824      	ldr	r0, [pc, #144]	; (8000564 <displayLed+0x224>)
 80004d4:	f001 f9c3 	bl	800185e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <displayLed+0x228>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d138      	bne.n	8000552 <displayLed+0x212>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e6:	481f      	ldr	r0, [pc, #124]	; (8000564 <displayLed+0x224>)
 80004e8:	f001 f9b9 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <displayLed+0x220>)
 80004f4:	f001 f9b3 	bl	800185e <HAL_GPIO_WritePin>
		}
		break;
 80004f8:	e02b      	b.n	8000552 <displayLed+0x212>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <displayLed+0x220>)
 8000502:	f001 f9ac 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4816      	ldr	r0, [pc, #88]	; (8000564 <displayLed+0x224>)
 800050c:	f001 f9a7 	bl	800185e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <displayLed+0x224>)
 8000516:	f001 f9a2 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <displayLed+0x224>)
 8000520:	f001 f99d 	bl	800185e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <displayLed+0x228>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d114      	bne.n	8000556 <displayLed+0x216>
		// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	480c      	ldr	r0, [pc, #48]	; (8000564 <displayLed+0x224>)
 8000534:	f001 f993 	bl	800185e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <displayLed+0x220>)
 8000540:	f001 f98d 	bl	800185e <HAL_GPIO_WritePin>
		}
		break;
 8000544:	e007      	b.n	8000556 <displayLed+0x216>

	default:
		break;
 8000546:	bf00      	nop
 8000548:	e006      	b.n	8000558 <displayLed+0x218>
		break;
 800054a:	bf00      	nop
 800054c:	e004      	b.n	8000558 <displayLed+0x218>
		break;
 800054e:	bf00      	nop
 8000550:	e002      	b.n	8000558 <displayLed+0x218>
		break;
 8000552:	bf00      	nop
 8000554:	e000      	b.n	8000558 <displayLed+0x218>
		break;
 8000556:	bf00      	nop
	}
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00
 8000568:	20000058 	.word	0x20000058

0800056c <switchMode2>:
 */

#include "fsm_automatic.h"


void switchMode2() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	status = RED_MAN;
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <switchMode2+0x28>)
 8000572:	220a      	movs	r2, #10
 8000574:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <switchMode2+0x2c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a08      	ldr	r2, [pc, #32]	; (800059c <switchMode2+0x30>)
 800057c:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 800057e:	2064      	movs	r0, #100	; 0x64
 8000580:	f000 fc9a 	bl	8000eb8 <setTimer2>
	setTimer4(25);
 8000584:	2019      	movs	r0, #25
 8000586:	f000 fcab 	bl	8000ee0 <setTimer4>
	statusPedestrian = PES_OFF;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <switchMode2+0x34>)
 800058c:	221f      	movs	r2, #31
 800058e:	601a      	str	r2, [r3, #0]
//	updateLedBufferVal(counter1/10, 2, counter1%10, 2);
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000054 	.word	0x20000054
 8000598:	20000018 	.word	0x20000018
 800059c:	2000004c 	.word	0x2000004c
 80005a0:	2000005c 	.word	0x2000005c

080005a4 <fsm_pedestrian>:

void fsm_pedestrian(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <fsm_pedestrian+0x4c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b1e      	cmp	r3, #30
 80005ae:	d002      	beq.n	80005b6 <fsm_pedestrian+0x12>
 80005b0:	2b1f      	cmp	r3, #31
 80005b2:	d004      	beq.n	80005be <fsm_pedestrian+0x1a>
		turnPedestrian_flag = 0;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	default:
		break;
 80005b4:	e013      	b.n	80005de <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 1;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <fsm_pedestrian+0x50>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
		break;
 80005bc:	e00f      	b.n	80005de <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 0;
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <fsm_pedestrian+0x50>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <fsm_pedestrian+0x54>)
 80005cc:	f001 f947 	bl	800185e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	4809      	ldr	r0, [pc, #36]	; (80005fc <fsm_pedestrian+0x58>)
 80005d8:	f001 f941 	bl	800185e <HAL_GPIO_WritePin>
		break;
 80005dc:	bf00      	nop
	}

	if(timer6_flag == 1) {
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <fsm_pedestrian+0x5c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d102      	bne.n	80005ec <fsm_pedestrian+0x48>
		statusPedestrian = PES_OFF;
 80005e6:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <fsm_pedestrian+0x4c>)
 80005e8:	221f      	movs	r2, #31
 80005ea:	601a      	str	r2, [r3, #0]
	}
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000005c 	.word	0x2000005c
 80005f4:	20000058 	.word	0x20000058
 80005f8:	40010c00 	.word	0x40010c00
 80005fc:	40010800 	.word	0x40010800
 8000600:	2000008c 	.word	0x2000008c

08000604 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	switch(status) {
 8000608:	4b94      	ldr	r3, [pc, #592]	; (800085c <fsm_automatic_run+0x258>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	3b01      	subs	r3, #1
 800060e:	2b04      	cmp	r3, #4
 8000610:	f200 8118 	bhi.w	8000844 <fsm_automatic_run+0x240>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <fsm_automatic_run+0x18>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	08000631 	.word	0x08000631
 8000620:	08000665 	.word	0x08000665
 8000624:	080006db 	.word	0x080006db
 8000628:	08000745 	.word	0x08000745
 800062c:	080007dd 	.word	0x080007dd
	case INIT:
		//turnOffLed();

		status = RED1_GREEN2_AUTO;
 8000630:	4b8a      	ldr	r3, [pc, #552]	; (800085c <fsm_automatic_run+0x258>)
 8000632:	2202      	movs	r2, #2
 8000634:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 8000636:	4b8a      	ldr	r3, [pc, #552]	; (8000860 <fsm_automatic_run+0x25c>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a8a      	ldr	r2, [pc, #552]	; (8000864 <fsm_automatic_run+0x260>)
 800063c:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 800063e:	4b8a      	ldr	r3, [pc, #552]	; (8000868 <fsm_automatic_run+0x264>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a8a      	ldr	r2, [pc, #552]	; (800086c <fsm_automatic_run+0x268>)
 8000644:	6013      	str	r3, [r2, #0]


//		updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		setTimer1(greenTimer*100);
 8000646:	4b88      	ldr	r3, [pc, #544]	; (8000868 <fsm_automatic_run+0x264>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fc1d 	bl	8000e90 <setTimer1>
		setTimer2(100);
 8000656:	2064      	movs	r0, #100	; 0x64
 8000658:	f000 fc2e 	bl	8000eb8 <setTimer2>
		setTimer5(25);
 800065c:	2019      	movs	r0, #25
 800065e:	f000 fc53 	bl	8000f08 <setTimer5>
		break;
 8000662:	e0f8      	b.n	8000856 <fsm_automatic_run+0x252>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 8000664:	2014      	movs	r0, #20
 8000666:	f7ff fe6b 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 800066a:	4b81      	ldr	r3, [pc, #516]	; (8000870 <fsm_automatic_run+0x26c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d10c      	bne.n	800068c <fsm_automatic_run+0x88>
			setTimer2(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f000 fc20 	bl	8000eb8 <setTimer2>
			counter1--;
 8000678:	4b7a      	ldr	r3, [pc, #488]	; (8000864 <fsm_automatic_run+0x260>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a79      	ldr	r2, [pc, #484]	; (8000864 <fsm_automatic_run+0x260>)
 8000680:	6013      	str	r3, [r2, #0]
			counter2--;
 8000682:	4b7a      	ldr	r3, [pc, #488]	; (800086c <fsm_automatic_run+0x268>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	3b01      	subs	r3, #1
 8000688:	4a78      	ldr	r2, [pc, #480]	; (800086c <fsm_automatic_run+0x268>)
 800068a:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 800068c:	4b79      	ldr	r3, [pc, #484]	; (8000874 <fsm_automatic_run+0x270>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d118      	bne.n	80006c6 <fsm_automatic_run+0xc2>
			status = RED1_YELLOW2_AUTO;
 8000694:	4b71      	ldr	r3, [pc, #452]	; (800085c <fsm_automatic_run+0x258>)
 8000696:	2203      	movs	r2, #3
 8000698:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 800069a:	4b71      	ldr	r3, [pc, #452]	; (8000860 <fsm_automatic_run+0x25c>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b72      	ldr	r3, [pc, #456]	; (8000868 <fsm_automatic_run+0x264>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1ad3      	subs	r3, r2, r3
 80006a4:	2264      	movs	r2, #100	; 0x64
 80006a6:	fb02 f303 	mul.w	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fbf0 	bl	8000e90 <setTimer1>
			counter1 = redTimer-greenTimer;
 80006b0:	4b6b      	ldr	r3, [pc, #428]	; (8000860 <fsm_automatic_run+0x25c>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <fsm_automatic_run+0x264>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	4a6a      	ldr	r2, [pc, #424]	; (8000864 <fsm_automatic_run+0x260>)
 80006bc:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 80006be:	4b6e      	ldr	r3, [pc, #440]	; (8000878 <fsm_automatic_run+0x274>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a6a      	ldr	r2, [pc, #424]	; (800086c <fsm_automatic_run+0x268>)
 80006c4:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fd7c 	bl	80001c4 <isButtonPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f000 80ba 	beq.w	8000848 <fsm_automatic_run+0x244>
			switchMode2();
 80006d4:	f7ff ff4a 	bl	800056c <switchMode2>
		}

		break;
 80006d8:	e0b6      	b.n	8000848 <fsm_automatic_run+0x244>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 80006da:	2015      	movs	r0, #21
 80006dc:	f7ff fe30 	bl	8000340 <displayLed>
		if(timer2_flag == 1) {
 80006e0:	4b63      	ldr	r3, [pc, #396]	; (8000870 <fsm_automatic_run+0x26c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d10c      	bne.n	8000702 <fsm_automatic_run+0xfe>
			setTimer2(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 fbe5 	bl	8000eb8 <setTimer2>
			counter1--;
 80006ee:	4b5d      	ldr	r3, [pc, #372]	; (8000864 <fsm_automatic_run+0x260>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a5b      	ldr	r2, [pc, #364]	; (8000864 <fsm_automatic_run+0x260>)
 80006f6:	6013      	str	r3, [r2, #0]
			counter2--;
 80006f8:	4b5c      	ldr	r3, [pc, #368]	; (800086c <fsm_automatic_run+0x268>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	4a5b      	ldr	r2, [pc, #364]	; (800086c <fsm_automatic_run+0x268>)
 8000700:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 8000702:	4b5c      	ldr	r3, [pc, #368]	; (8000874 <fsm_automatic_run+0x270>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d112      	bne.n	8000730 <fsm_automatic_run+0x12c>
			status = GREEN1_RED2_AUTO;
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <fsm_automatic_run+0x258>)
 800070c:	2204      	movs	r2, #4
 800070e:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000710:	4b55      	ldr	r3, [pc, #340]	; (8000868 <fsm_automatic_run+0x264>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2264      	movs	r2, #100	; 0x64
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fbb8 	bl	8000e90 <setTimer1>
			counter1 = greenTimer;
 8000720:	4b51      	ldr	r3, [pc, #324]	; (8000868 <fsm_automatic_run+0x264>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a4f      	ldr	r2, [pc, #316]	; (8000864 <fsm_automatic_run+0x260>)
 8000726:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <fsm_automatic_run+0x25c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a4f      	ldr	r2, [pc, #316]	; (800086c <fsm_automatic_run+0x268>)
 800072e:	6013      	str	r3, [r2, #0]
		}
//		if (isButtonPressed(3)) {
//					turnPedestrianLight = 1;
//				}

		if(isButtonPressed(0)) {
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fd47 	bl	80001c4 <isButtonPressed>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 8087 	beq.w	800084c <fsm_automatic_run+0x248>
			switchMode2();
 800073e:	f7ff ff15 	bl	800056c <switchMode2>
		}
		break;
 8000742:	e083      	b.n	800084c <fsm_automatic_run+0x248>
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000744:	2016      	movs	r0, #22
 8000746:	f7ff fdfb 	bl	8000340 <displayLed>
		if (isButtonPressed(3)) {
 800074a:	2003      	movs	r0, #3
 800074c:	f7ff fd3a 	bl	80001c4 <isButtonPressed>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d00b      	beq.n	800076e <fsm_automatic_run+0x16a>
//			statusPedestrian = RED_ON;
//			setTimer6(redTimer*100);
			statusPedestrian = PES_ON;
 8000756:	4b49      	ldr	r3, [pc, #292]	; (800087c <fsm_automatic_run+0x278>)
 8000758:	221e      	movs	r2, #30
 800075a:	601a      	str	r2, [r3, #0]
			setTimer6((3*redTimer)*100);
 800075c:	4b40      	ldr	r3, [pc, #256]	; (8000860 <fsm_automatic_run+0x25c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000764:	fb02 f303 	mul.w	r3, r2, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fbe1 	bl	8000f30 <setTimer6>
		}

		if(timer2_flag == 1) {
 800076e:	4b40      	ldr	r3, [pc, #256]	; (8000870 <fsm_automatic_run+0x26c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10c      	bne.n	8000790 <fsm_automatic_run+0x18c>
			setTimer2(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 fb9e 	bl	8000eb8 <setTimer2>
			counter1--;
 800077c:	4b39      	ldr	r3, [pc, #228]	; (8000864 <fsm_automatic_run+0x260>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3b01      	subs	r3, #1
 8000782:	4a38      	ldr	r2, [pc, #224]	; (8000864 <fsm_automatic_run+0x260>)
 8000784:	6013      	str	r3, [r2, #0]
			counter2--;
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <fsm_automatic_run+0x268>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3b01      	subs	r3, #1
 800078c:	4a37      	ldr	r2, [pc, #220]	; (800086c <fsm_automatic_run+0x268>)
 800078e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 8000790:	4b38      	ldr	r3, [pc, #224]	; (8000874 <fsm_automatic_run+0x270>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d118      	bne.n	80007ca <fsm_automatic_run+0x1c6>
			status = YELLOW1_RED2_AUTO;
 8000798:	4b30      	ldr	r3, [pc, #192]	; (800085c <fsm_automatic_run+0x258>)
 800079a:	2205      	movs	r2, #5
 800079c:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <fsm_automatic_run+0x25c>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <fsm_automatic_run+0x264>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	2264      	movs	r2, #100	; 0x64
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fb6e 	bl	8000e90 <setTimer1>
			counter1 = yellowTimer;
 80007b4:	4b30      	ldr	r3, [pc, #192]	; (8000878 <fsm_automatic_run+0x274>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <fsm_automatic_run+0x260>)
 80007ba:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <fsm_automatic_run+0x25c>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <fsm_automatic_run+0x264>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	4a29      	ldr	r2, [pc, #164]	; (800086c <fsm_automatic_run+0x268>)
 80007c8:	6013      	str	r3, [r2, #0]
//		if (isButtonPressed(3)) {
//			turnPedestrianLight = 1;
//		}


		if(isButtonPressed(0)) {
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff fcfa 	bl	80001c4 <isButtonPressed>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d03c      	beq.n	8000850 <fsm_automatic_run+0x24c>
			switchMode2();
 80007d6:	f7ff fec9 	bl	800056c <switchMode2>
		}
		break;
 80007da:	e039      	b.n	8000850 <fsm_automatic_run+0x24c>
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 80007dc:	2017      	movs	r0, #23
 80007de:	f7ff fdaf 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 80007e2:	4b23      	ldr	r3, [pc, #140]	; (8000870 <fsm_automatic_run+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10c      	bne.n	8000804 <fsm_automatic_run+0x200>
			setTimer2(100);
 80007ea:	2064      	movs	r0, #100	; 0x64
 80007ec:	f000 fb64 	bl	8000eb8 <setTimer2>
			counter1--;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <fsm_automatic_run+0x260>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <fsm_automatic_run+0x260>)
 80007f8:	6013      	str	r3, [r2, #0]
			counter2--;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <fsm_automatic_run+0x268>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3b01      	subs	r3, #1
 8000800:	4a1a      	ldr	r2, [pc, #104]	; (800086c <fsm_automatic_run+0x268>)
 8000802:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <fsm_automatic_run+0x270>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d112      	bne.n	8000832 <fsm_automatic_run+0x22e>
			status = RED1_GREEN2_AUTO;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <fsm_automatic_run+0x258>)
 800080e:	2202      	movs	r2, #2
 8000810:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <fsm_automatic_run+0x264>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2264      	movs	r2, #100	; 0x64
 8000818:	fb02 f303 	mul.w	r3, r2, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fb37 	bl	8000e90 <setTimer1>
			counter1 = redTimer;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <fsm_automatic_run+0x25c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <fsm_automatic_run+0x260>)
 8000828:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <fsm_automatic_run+0x264>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <fsm_automatic_run+0x268>)
 8000830:	6013      	str	r3, [r2, #0]
		}
//		if (isButtonPressed(3)) {
//			turnPedestrianLight = 1;
//		}

		if(isButtonPressed(0)) {
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff fcc6 	bl	80001c4 <isButtonPressed>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00a      	beq.n	8000854 <fsm_automatic_run+0x250>
			switchMode2();
 800083e:	f7ff fe95 	bl	800056c <switchMode2>
		}
		break;
 8000842:	e007      	b.n	8000854 <fsm_automatic_run+0x250>
	default:
		break;
 8000844:	bf00      	nop
 8000846:	e006      	b.n	8000856 <fsm_automatic_run+0x252>
		break;
 8000848:	bf00      	nop
 800084a:	e004      	b.n	8000856 <fsm_automatic_run+0x252>
		break;
 800084c:	bf00      	nop
 800084e:	e002      	b.n	8000856 <fsm_automatic_run+0x252>
		break;
 8000850:	bf00      	nop
 8000852:	e000      	b.n	8000856 <fsm_automatic_run+0x252>
		break;
 8000854:	bf00      	nop
	}
};
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000054 	.word	0x20000054
 8000860:	20000018 	.word	0x20000018
 8000864:	2000004c 	.word	0x2000004c
 8000868:	20000020 	.word	0x20000020
 800086c:	20000050 	.word	0x20000050
 8000870:	2000006c 	.word	0x2000006c
 8000874:	20000064 	.word	0x20000064
 8000878:	2000001c 	.word	0x2000001c
 800087c:	2000005c 	.word	0x2000005c

08000880 <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <switchMode3+0x24>)
 8000886:	220b      	movs	r2, #11
 8000888:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <switchMode3+0x28>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a07      	ldr	r2, [pc, #28]	; (80008ac <switchMode3+0x2c>)
 8000890:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f000 fb10 	bl	8000eb8 <setTimer2>
	setTimer4(25);
 8000898:	2019      	movs	r0, #25
 800089a:	f000 fb21 	bl	8000ee0 <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000054 	.word	0x20000054
 80008a8:	2000001c 	.word	0x2000001c
 80008ac:	2000004c 	.word	0x2000004c

080008b0 <switchMode4>:

void switchMode4() {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <switchMode4+0x24>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <switchMode4+0x28>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <switchMode4+0x2c>)
 80008c0:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f000 faf8 	bl	8000eb8 <setTimer2>
	setTimer4(25);
 80008c8:	2019      	movs	r0, #25
 80008ca:	f000 fb09 	bl	8000ee0 <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000054 	.word	0x20000054
 80008d8:	20000020 	.word	0x20000020
 80008dc:	2000004c 	.word	0x2000004c

080008e0 <fsm_manual_run>:

void fsm_manual_run() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	switch(status) {
 80008e4:	4b92      	ldr	r3, [pc, #584]	; (8000b30 <fsm_manual_run+0x250>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3b0a      	subs	r3, #10
 80008ea:	2b05      	cmp	r3, #5
 80008ec:	f200 8111 	bhi.w	8000b12 <fsm_manual_run+0x232>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <fsm_manual_run+0x18>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000911 	.word	0x08000911
 80008fc:	080009bb 	.word	0x080009bb
 8000900:	08000a67 	.word	0x08000a67
 8000904:	08000953 	.word	0x08000953
 8000908:	080009fd 	.word	0x080009fd
 800090c:	08000aa9 	.word	0x08000aa9

	case RED_MAN:
		displayLed(RED_MAN);
 8000910:	200a      	movs	r0, #10
 8000912:	f7ff fd15 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000916:	4b87      	ldr	r3, [pc, #540]	; (8000b34 <fsm_manual_run+0x254>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d102      	bne.n	8000924 <fsm_manual_run+0x44>
			setTimer2(100);
 800091e:	2064      	movs	r0, #100	; 0x64
 8000920:	f000 faca 	bl	8000eb8 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fc4d 	bl	80001c4 <isButtonPressed>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <fsm_manual_run+0x54>
			switchMode3();
 8000930:	f7ff ffa6 	bl	8000880 <switchMode3>
		}

		if(isButtonPressed(1)) {
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fc45 	bl	80001c4 <isButtonPressed>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80ea 	beq.w	8000b16 <fsm_manual_run+0x236>
			status = RED_MAN_MODIFY;
 8000942:	4b7b      	ldr	r3, [pc, #492]	; (8000b30 <fsm_manual_run+0x250>)
 8000944:	220d      	movs	r2, #13
 8000946:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 8000948:	4b7b      	ldr	r3, [pc, #492]	; (8000b38 <fsm_manual_run+0x258>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a7b      	ldr	r2, [pc, #492]	; (8000b3c <fsm_manual_run+0x25c>)
 800094e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 8000950:	e0e1      	b.n	8000b16 <fsm_manual_run+0x236>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 8000952:	200a      	movs	r0, #10
 8000954:	f7ff fcf4 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff fc33 	bl	80001c4 <isButtonPressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <fsm_manual_run+0x8a>
			status = RED_MAN;
 8000964:	4b72      	ldr	r3, [pc, #456]	; (8000b30 <fsm_manual_run+0x250>)
 8000966:	220a      	movs	r2, #10
 8000968:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff fc2a 	bl	80001c4 <isButtonPressed>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00b      	beq.n	800098e <fsm_manual_run+0xae>
			timerMan++;
 8000976:	4b71      	ldr	r3, [pc, #452]	; (8000b3c <fsm_manual_run+0x25c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	4a6f      	ldr	r2, [pc, #444]	; (8000b3c <fsm_manual_run+0x25c>)
 800097e:	6013      	str	r3, [r2, #0]
			if(timerMan > 99) timerMan = 1;
 8000980:	4b6e      	ldr	r3, [pc, #440]	; (8000b3c <fsm_manual_run+0x25c>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b63      	cmp	r3, #99	; 0x63
 8000986:	dd02      	ble.n	800098e <fsm_manual_run+0xae>
 8000988:	4b6c      	ldr	r3, [pc, #432]	; (8000b3c <fsm_manual_run+0x25c>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 800098e:	2002      	movs	r0, #2
 8000990:	f7ff fc18 	bl	80001c4 <isButtonPressed>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80bf 	beq.w	8000b1a <fsm_manual_run+0x23a>
			status = INIT;
 800099c:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <fsm_manual_run+0x250>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
			redTimer = timerMan;
 80009a2:	4b66      	ldr	r3, [pc, #408]	; (8000b3c <fsm_manual_run+0x25c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a64      	ldr	r2, [pc, #400]	; (8000b38 <fsm_manual_run+0x258>)
 80009a8:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 80009aa:	4b63      	ldr	r3, [pc, #396]	; (8000b38 <fsm_manual_run+0x258>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	4b64      	ldr	r3, [pc, #400]	; (8000b40 <fsm_manual_run+0x260>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	4a63      	ldr	r2, [pc, #396]	; (8000b44 <fsm_manual_run+0x264>)
 80009b6:	6013      	str	r3, [r2, #0]
		}

		break;
 80009b8:	e0af      	b.n	8000b1a <fsm_manual_run+0x23a>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 80009ba:	200b      	movs	r0, #11
 80009bc:	f7ff fcc0 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 80009c0:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <fsm_manual_run+0x254>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d102      	bne.n	80009ce <fsm_manual_run+0xee>
			setTimer2(100);
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f000 fa75 	bl	8000eb8 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff fbf8 	bl	80001c4 <isButtonPressed>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <fsm_manual_run+0xfe>
			switchMode4();
 80009da:	f7ff ff69 	bl	80008b0 <switchMode4>
		}

		if(isButtonPressed(1)) {
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff fbf0 	bl	80001c4 <isButtonPressed>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 8099 	beq.w	8000b1e <fsm_manual_run+0x23e>
			status = YELLOW_MAN_MODIFY;
 80009ec:	4b50      	ldr	r3, [pc, #320]	; (8000b30 <fsm_manual_run+0x250>)
 80009ee:	220e      	movs	r2, #14
 80009f0:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <fsm_manual_run+0x260>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <fsm_manual_run+0x25c>)
 80009f8:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 80009fa:	e090      	b.n	8000b1e <fsm_manual_run+0x23e>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 80009fc:	200b      	movs	r0, #11
 80009fe:	f7ff fc9f 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff fbde 	bl	80001c4 <isButtonPressed>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <fsm_manual_run+0x134>
			status = YELLOW_MAN;
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <fsm_manual_run+0x250>)
 8000a10:	220b      	movs	r2, #11
 8000a12:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fbd5 	bl	80001c4 <isButtonPressed>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d00d      	beq.n	8000a3c <fsm_manual_run+0x15c>
			timerMan++;
 8000a20:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <fsm_manual_run+0x25c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a45      	ldr	r2, [pc, #276]	; (8000b3c <fsm_manual_run+0x25c>)
 8000a28:	6013      	str	r3, [r2, #0]
			if(timerMan >= redTimer) timerMan = 1;
 8000a2a:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <fsm_manual_run+0x25c>)
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <fsm_manual_run+0x258>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	db02      	blt.n	8000a3c <fsm_manual_run+0x15c>
 8000a36:	4b41      	ldr	r3, [pc, #260]	; (8000b3c <fsm_manual_run+0x25c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f7ff fbc1 	bl	80001c4 <isButtonPressed>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d06c      	beq.n	8000b22 <fsm_manual_run+0x242>
			status = INIT;
 8000a48:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <fsm_manual_run+0x250>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
			yellowTimer = timerMan;
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <fsm_manual_run+0x25c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a3b      	ldr	r2, [pc, #236]	; (8000b40 <fsm_manual_run+0x260>)
 8000a54:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 8000a56:	4b38      	ldr	r3, [pc, #224]	; (8000b38 <fsm_manual_run+0x258>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	4b39      	ldr	r3, [pc, #228]	; (8000b40 <fsm_manual_run+0x260>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	4a38      	ldr	r2, [pc, #224]	; (8000b44 <fsm_manual_run+0x264>)
 8000a62:	6013      	str	r3, [r2, #0]
		}
		break;
 8000a64:	e05d      	b.n	8000b22 <fsm_manual_run+0x242>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8000a66:	200c      	movs	r0, #12
 8000a68:	f7ff fc6a 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <fsm_manual_run+0x254>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d102      	bne.n	8000a7a <fsm_manual_run+0x19a>
			setTimer2(100);
 8000a74:	2064      	movs	r0, #100	; 0x64
 8000a76:	f000 fa1f 	bl	8000eb8 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fba2 	bl	80001c4 <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <fsm_manual_run+0x1ac>
			status = INIT;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <fsm_manual_run+0x250>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff fb99 	bl	80001c4 <isButtonPressed>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d046      	beq.n	8000b26 <fsm_manual_run+0x246>
			status = GREEN_MAN_MODIFY;
 8000a98:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <fsm_manual_run+0x250>)
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <fsm_manual_run+0x264>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <fsm_manual_run+0x25c>)
 8000aa4:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 8000aa6:	e03e      	b.n	8000b26 <fsm_manual_run+0x246>
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8000aa8:	200c      	movs	r0, #12
 8000aaa:	f7ff fc49 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fb88 	bl	80001c4 <isButtonPressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <fsm_manual_run+0x1e0>
			status = GREEN_MAN;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <fsm_manual_run+0x250>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f7ff fb7f 	bl	80001c4 <isButtonPressed>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00d      	beq.n	8000ae8 <fsm_manual_run+0x208>
			timerMan++;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <fsm_manual_run+0x25c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <fsm_manual_run+0x25c>)
 8000ad4:	6013      	str	r3, [r2, #0]
			if(timerMan >= redTimer) timerMan = 1;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <fsm_manual_run+0x25c>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <fsm_manual_run+0x258>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	db02      	blt.n	8000ae8 <fsm_manual_run+0x208>
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <fsm_manual_run+0x25c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fb6b 	bl	80001c4 <isButtonPressed>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d01a      	beq.n	8000b2a <fsm_manual_run+0x24a>
			status = INIT;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <fsm_manual_run+0x250>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
			greenTimer = timerMan;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <fsm_manual_run+0x25c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <fsm_manual_run+0x264>)
 8000b00:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <fsm_manual_run+0x258>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <fsm_manual_run+0x264>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	; (8000b40 <fsm_manual_run+0x260>)
 8000b0e:	6013      	str	r3, [r2, #0]
		}
		break;
 8000b10:	e00b      	b.n	8000b2a <fsm_manual_run+0x24a>
	default:
		break;
 8000b12:	bf00      	nop
 8000b14:	e00a      	b.n	8000b2c <fsm_manual_run+0x24c>
		break;
 8000b16:	bf00      	nop
 8000b18:	e008      	b.n	8000b2c <fsm_manual_run+0x24c>
		break;
 8000b1a:	bf00      	nop
 8000b1c:	e006      	b.n	8000b2c <fsm_manual_run+0x24c>
		break;
 8000b1e:	bf00      	nop
 8000b20:	e004      	b.n	8000b2c <fsm_manual_run+0x24c>
		break;
 8000b22:	bf00      	nop
 8000b24:	e002      	b.n	8000b2c <fsm_manual_run+0x24c>
		break;
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <fsm_manual_run+0x24c>
		break;
 8000b2a:	bf00      	nop
	}
};
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000054 	.word	0x20000054
 8000b34:	2000006c 	.word	0x2000006c
 8000b38:	20000018 	.word	0x20000018
 8000b3c:	20000090 	.word	0x20000090
 8000b40:	2000001c 	.word	0x2000001c
 8000b44:	20000020 	.word	0x20000020

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fb7c 	bl	8001248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f81a 	bl	8000b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f8d2 	bl	8000cfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b58:	f000 f8a6 	bl	8000ca8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b5c:	f000 f856 	bl	8000c0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000b60:	4807      	ldr	r0, [pc, #28]	; (8000b80 <main+0x38>)
 8000b62:	f001 fb15 	bl	8002190 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 8000b66:	f7ff faf1 	bl	800014c <initStateForButton>
  status = INIT;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <main+0x3c>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000b70:	f7ff fd48 	bl	8000604 <fsm_automatic_run>
	  fsm_manual_run();
 8000b74:	f7ff feb4 	bl	80008e0 <fsm_manual_run>
	  fsm_pedestrian();
 8000b78:	f7ff fd14 	bl	80005a4 <fsm_pedestrian>
  {
 8000b7c:	e7f8      	b.n	8000b70 <main+0x28>
 8000b7e:	bf00      	nop
 8000b80:	200000f4 	.word	0x200000f4
 8000b84:	20000054 	.word	0x20000054

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b090      	sub	sp, #64	; 0x40
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2228      	movs	r2, #40	; 0x28
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 ffaa 	bl	8002af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb2:	2310      	movs	r3, #16
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bbe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fe83 	bl	80018d4 <HAL_RCC_OscConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bd4:	f000 f956 	bl	8000e84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd8:	230f      	movs	r3, #15
 8000bda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f8ee 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000bfe:	f000 f941 	bl	8000e84 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3740      	adds	r7, #64	; 0x40
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0308 	add.w	r3, r7, #8
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c32:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000c36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c40:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000c44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c54:	f001 fa4c 	bl	80020f0 <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c5e:	f000 f911 	bl	8000e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c70:	f001 fbe8 	bl	8002444 <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c7a:	f000 f903 	bl	8000e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c8c:	f001 fdbe 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c96:	f000 f8f5 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000f4 	.word	0x200000f4

08000ca8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_USART2_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	f001 fe04 	bl	80028ec <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cea:	f000 f8cb 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000013c 	.word	0x2000013c
 8000cf8:	40004400 	.word	0x40004400

08000cfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d10:	4b51      	ldr	r3, [pc, #324]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a50      	ldr	r2, [pc, #320]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a4a      	ldr	r2, [pc, #296]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d2e:	f043 0320 	orr.w	r3, r3, #32
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0320 	and.w	r3, r3, #32
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b3f      	ldr	r3, [pc, #252]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <MX_GPIO_Init+0x15c>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000d76:	4839      	ldr	r0, [pc, #228]	; (8000e5c <MX_GPIO_Init+0x160>)
 8000d78:	f000 fd71 	bl	800185e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d82:	4837      	ldr	r0, [pc, #220]	; (8000e60 <MX_GPIO_Init+0x164>)
 8000d84:	f000 fd6b 	bl	800185e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <MX_GPIO_Init+0x168>)
 8000d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4832      	ldr	r0, [pc, #200]	; (8000e68 <MX_GPIO_Init+0x16c>)
 8000d9e:	f000 fbc3 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 8000da2:	2301      	movs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	4829      	ldr	r0, [pc, #164]	; (8000e5c <MX_GPIO_Init+0x160>)
 8000db6:	f000 fbb7 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 8000dba:	2312      	movs	r3, #18
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_GPIO_Init+0x160>)
 8000dce:	f000 fbab 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 8000dd2:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4619      	mov	r1, r3
 8000dea:	481c      	ldr	r0, [pc, #112]	; (8000e5c <MX_GPIO_Init+0x160>)
 8000dec:	f000 fb9c 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	4619      	mov	r1, r3
 8000e02:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_GPIO_Init+0x160>)
 8000e04:	f000 fb90 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4811      	ldr	r0, [pc, #68]	; (8000e60 <MX_GPIO_Init+0x164>)
 8000e1c:	f000 fb84 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e20:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <MX_GPIO_Init+0x164>)
 8000e3a:	f000 fb75 	bl	8001528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2028      	movs	r0, #40	; 0x28
 8000e44:	f000 fb39 	bl	80014ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e48:	2028      	movs	r0, #40	; 0x28
 8000e4a:	f000 fb52 	bl	80014f2 <HAL_NVIC_EnableIRQ>

}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	10110000 	.word	0x10110000
 8000e68:	40011000 	.word	0x40011000

08000e6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
	 timerRun();
 8000e74:	f000 f870 	bl	8000f58 <timerRun>
	 getKeyInput();
 8000e78:	f7ff f9ce 	bl	8000218 <getKeyInput>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <Error_Handler+0x8>
	...

08000e90 <setTimer1>:
int timer6_counter = 0;
int timer6_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000e98:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <setTimer1+0x20>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <setTimer1+0x24>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000060 	.word	0x20000060
 8000eb4:	20000064 	.word	0x20000064

08000eb8 <setTimer2>:

void setTimer2(int duration) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000ec0:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <setTimer2+0x20>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <setTimer2+0x24>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000068 	.word	0x20000068
 8000edc:	2000006c 	.word	0x2000006c

08000ee0 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <setTimer4+0x20>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <setTimer4+0x24>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000078 	.word	0x20000078
 8000f04:	2000007c 	.word	0x2000007c

08000f08 <setTimer5>:

void setTimer5(int duration) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8000f10:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <setTimer5+0x20>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <setTimer5+0x24>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000080 	.word	0x20000080
 8000f2c:	20000084 	.word	0x20000084

08000f30 <setTimer6>:
void setTimer6(int duration) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 8000f38:	4a05      	ldr	r2, [pc, #20]	; (8000f50 <setTimer6+0x20>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <setTimer6+0x24>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000088 	.word	0x20000088
 8000f54:	2000008c 	.word	0x2000008c

08000f58 <timerRun>:
void timerRun() {
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <timerRun+0xcc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	dd0b      	ble.n	8000f7c <timerRun+0x24>
		timer1_counter--;
 8000f64:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <timerRun+0xcc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	4a2e      	ldr	r2, [pc, #184]	; (8001024 <timerRun+0xcc>)
 8000f6c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <timerRun+0xcc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	dc02      	bgt.n	8000f7c <timerRun+0x24>
			timer1_flag = 1;
 8000f76:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <timerRun+0xd0>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <timerRun+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dd0b      	ble.n	8000f9c <timerRun+0x44>
		timer2_counter--;
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <timerRun+0xd4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a28      	ldr	r2, [pc, #160]	; (800102c <timerRun+0xd4>)
 8000f8c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <timerRun+0xd4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dc02      	bgt.n	8000f9c <timerRun+0x44>
			timer2_flag = 1;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <timerRun+0xd8>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <timerRun+0xdc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dd0b      	ble.n	8000fbc <timerRun+0x64>
		timer3_counter--;
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <timerRun+0xdc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <timerRun+0xdc>)
 8000fac:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <timerRun+0xdc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	dc02      	bgt.n	8000fbc <timerRun+0x64>
			timer3_flag = 1;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	; (8001038 <timerRun+0xe0>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <timerRun+0xe4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	dd0b      	ble.n	8000fdc <timerRun+0x84>
		timer4_counter--;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <timerRun+0xe4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	4a1c      	ldr	r2, [pc, #112]	; (800103c <timerRun+0xe4>)
 8000fcc:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <timerRun+0xe4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dc02      	bgt.n	8000fdc <timerRun+0x84>
			timer4_flag = 1;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <timerRun+0xe8>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <timerRun+0xec>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	dd0b      	ble.n	8000ffc <timerRun+0xa4>
		timer5_counter--;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <timerRun+0xec>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <timerRun+0xec>)
 8000fec:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <timerRun+0xec>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	dc02      	bgt.n	8000ffc <timerRun+0xa4>
			timer5_flag = 1;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <timerRun+0xf0>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0) {
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <timerRun+0xf4>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd0b      	ble.n	800101c <timerRun+0xc4>
			timer6_counter--;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <timerRun+0xf4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <timerRun+0xf4>)
 800100c:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0) {
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <timerRun+0xf4>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dc02      	bgt.n	800101c <timerRun+0xc4>
				timer6_flag = 1;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <timerRun+0xf8>)
 8001018:	2201      	movs	r2, #1
 800101a:	601a      	str	r2, [r3, #0]
			}
	}
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	20000060 	.word	0x20000060
 8001028:	20000064 	.word	0x20000064
 800102c:	20000068 	.word	0x20000068
 8001030:	2000006c 	.word	0x2000006c
 8001034:	20000070 	.word	0x20000070
 8001038:	20000074 	.word	0x20000074
 800103c:	20000078 	.word	0x20000078
 8001040:	2000007c 	.word	0x2000007c
 8001044:	20000080 	.word	0x20000080
 8001048:	20000084 	.word	0x20000084
 800104c:	20000088 	.word	0x20000088
 8001050:	2000008c 	.word	0x2000008c

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_MspInit+0x5c>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_MspInit+0x5c>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_MspInit+0x5c>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_MspInit+0x5c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_MspInit+0x5c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_MspInit+0x5c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_MspInit+0x60>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_MspInit+0x60>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	201c      	movs	r0, #28
 80010e8:	f000 f9e7 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ec:	201c      	movs	r0, #28
 80010ee:	f000 fa00 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_UART_MspInit+0x70>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d123      	bne.n	8001168 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_MspInit+0x74>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_UART_MspInit+0x74>)
 8001126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112a:	61d3      	str	r3, [r2, #28]
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_MspInit+0x74>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_UART_MspInit+0x74>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_UART_MspInit+0x74>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_UART_MspInit+0x74>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001150:	230c      	movs	r3, #12
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <HAL_UART_MspInit+0x78>)
 8001164:	f000 f9e0 	bl	8001528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004400 	.word	0x40004400
 8001174:	40021000 	.word	0x40021000
 8001178:	40010800 	.word	0x40010800

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 f887 	bl	80012d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <TIM2_IRQHandler+0x10>)
 80011d2:	f001 f82f 	bl	8002234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000f4 	.word	0x200000f4

080011e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011e8:	f000 fb52 	bl	8001890 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011fc:	f7ff fff8 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001202:	490c      	ldr	r1, [pc, #48]	; (8001234 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001218:	4c09      	ldr	r4, [pc, #36]	; (8001240 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001226:	f001 fc3f 	bl	8002aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff fc8d 	bl	8000b48 <main>
  bx lr
 800122e:	4770      	bx	lr
  ldr r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001234:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001238:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 800123c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001240:	20000188 	.word	0x20000188

08001244 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001244:	e7fe      	b.n	8001244 <ADC1_2_IRQHandler>
	...

08001248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_Init+0x28>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_Init+0x28>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f923 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f808 	bl	8001274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fef6 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40022000 	.word	0x40022000

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x54>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_InitTick+0x58>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f93b 	bl	800150e <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e00e      	b.n	80012c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b0f      	cmp	r3, #15
 80012a6:	d80a      	bhi.n	80012be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f000 f903 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b4:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <HAL_InitTick+0x5c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	e000      	b.n	80012c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000024 	.word	0x20000024
 80012cc:	2000002c 	.word	0x2000002c
 80012d0:	20000028 	.word	0x20000028

080012d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x1c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	461a      	mov	r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_IncTick+0x20>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	4a03      	ldr	r2, [pc, #12]	; (80012f4 <HAL_IncTick+0x20>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	2000002c 	.word	0x2000002c
 80012f4:	20000184 	.word	0x20000184

080012f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b02      	ldr	r3, [pc, #8]	; (8001308 <HAL_GetTick+0x10>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	20000184 	.word	0x20000184

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4906      	ldr	r1, [pc, #24]	; (80013a4 <__NVIC_EnableIRQ+0x34>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff90 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff2d 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff42 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff90 	bl	80013fc <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5f 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff35 	bl	8001370 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b08b      	sub	sp, #44	; 0x2c
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	e169      	b.n	8001810 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800153c:	2201      	movs	r2, #1
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 8158 	bne.w	800180a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a9a      	ldr	r2, [pc, #616]	; (80017c8 <HAL_GPIO_Init+0x2a0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d05e      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001564:	4a98      	ldr	r2, [pc, #608]	; (80017c8 <HAL_GPIO_Init+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d875      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800156a:	4a98      	ldr	r2, [pc, #608]	; (80017cc <HAL_GPIO_Init+0x2a4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d058      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001570:	4a96      	ldr	r2, [pc, #600]	; (80017cc <HAL_GPIO_Init+0x2a4>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d86f      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 8001576:	4a96      	ldr	r2, [pc, #600]	; (80017d0 <HAL_GPIO_Init+0x2a8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d052      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 800157c:	4a94      	ldr	r2, [pc, #592]	; (80017d0 <HAL_GPIO_Init+0x2a8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d869      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 8001582:	4a94      	ldr	r2, [pc, #592]	; (80017d4 <HAL_GPIO_Init+0x2ac>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d04c      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001588:	4a92      	ldr	r2, [pc, #584]	; (80017d4 <HAL_GPIO_Init+0x2ac>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d863      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800158e:	4a92      	ldr	r2, [pc, #584]	; (80017d8 <HAL_GPIO_Init+0x2b0>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d046      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
 8001594:	4a90      	ldr	r2, [pc, #576]	; (80017d8 <HAL_GPIO_Init+0x2b0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d85d      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 800159a:	2b12      	cmp	r3, #18
 800159c:	d82a      	bhi.n	80015f4 <HAL_GPIO_Init+0xcc>
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d859      	bhi.n	8001656 <HAL_GPIO_Init+0x12e>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <HAL_GPIO_Init+0x80>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	08001623 	.word	0x08001623
 80015ac:	080015fd 	.word	0x080015fd
 80015b0:	0800160f 	.word	0x0800160f
 80015b4:	08001651 	.word	0x08001651
 80015b8:	08001657 	.word	0x08001657
 80015bc:	08001657 	.word	0x08001657
 80015c0:	08001657 	.word	0x08001657
 80015c4:	08001657 	.word	0x08001657
 80015c8:	08001657 	.word	0x08001657
 80015cc:	08001657 	.word	0x08001657
 80015d0:	08001657 	.word	0x08001657
 80015d4:	08001657 	.word	0x08001657
 80015d8:	08001657 	.word	0x08001657
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001657 	.word	0x08001657
 80015e4:	08001657 	.word	0x08001657
 80015e8:	08001657 	.word	0x08001657
 80015ec:	08001605 	.word	0x08001605
 80015f0:	08001619 	.word	0x08001619
 80015f4:	4a79      	ldr	r2, [pc, #484]	; (80017dc <HAL_GPIO_Init+0x2b4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015fa:	e02c      	b.n	8001656 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e029      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	3304      	adds	r3, #4
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e024      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	3308      	adds	r3, #8
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e01f      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	330c      	adds	r3, #12
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e01a      	b.n	8001658 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800162a:	2304      	movs	r3, #4
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e013      	b.n	8001658 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001638:	2308      	movs	r3, #8
 800163a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	611a      	str	r2, [r3, #16]
          break;
 8001642:	e009      	b.n	8001658 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	615a      	str	r2, [r3, #20]
          break;
 800164e:	e003      	b.n	8001658 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x130>
          break;
 8001656:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2bff      	cmp	r3, #255	; 0xff
 800165c:	d801      	bhi.n	8001662 <HAL_GPIO_Init+0x13a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	e001      	b.n	8001666 <HAL_GPIO_Init+0x13e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3304      	adds	r3, #4
 8001666:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	d802      	bhi.n	8001674 <HAL_GPIO_Init+0x14c>
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	e002      	b.n	800167a <HAL_GPIO_Init+0x152>
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	3b08      	subs	r3, #8
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	210f      	movs	r1, #15
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	401a      	ands	r2, r3
 800168c:	6a39      	ldr	r1, [r7, #32]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	431a      	orrs	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 80b1 	beq.w	800180a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016a8:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <HAL_GPIO_Init+0x2b8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a4c      	ldr	r2, [pc, #304]	; (80017e0 <HAL_GPIO_Init+0x2b8>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b4a      	ldr	r3, [pc, #296]	; (80017e0 <HAL_GPIO_Init+0x2b8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c0:	4a48      	ldr	r2, [pc, #288]	; (80017e4 <HAL_GPIO_Init+0x2bc>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a40      	ldr	r2, [pc, #256]	; (80017e8 <HAL_GPIO_Init+0x2c0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d013      	beq.n	8001714 <HAL_GPIO_Init+0x1ec>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3f      	ldr	r2, [pc, #252]	; (80017ec <HAL_GPIO_Init+0x2c4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1e8>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3e      	ldr	r2, [pc, #248]	; (80017f0 <HAL_GPIO_Init+0x2c8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1e4>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <HAL_GPIO_Init+0x2cc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1e0>
 8001704:	2303      	movs	r3, #3
 8001706:	e006      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001708:	2304      	movs	r3, #4
 800170a:	e004      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 800170c:	2302      	movs	r3, #2
 800170e:	e002      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_GPIO_Init+0x1ee>
 8001714:	2300      	movs	r3, #0
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	f002 0203 	and.w	r2, r2, #3
 800171c:	0092      	lsls	r2, r2, #2
 800171e:	4093      	lsls	r3, r2
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001726:	492f      	ldr	r1, [pc, #188]	; (80017e4 <HAL_GPIO_Init+0x2bc>)
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	492c      	ldr	r1, [pc, #176]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	608b      	str	r3, [r1, #8]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174e:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4928      	ldr	r1, [pc, #160]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001758:	4013      	ands	r3, r2
 800175a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	491e      	ldr	r1, [pc, #120]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001780:	4013      	ands	r3, r2
 8001782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4918      	ldr	r1, [pc, #96]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	604b      	str	r3, [r1, #4]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4914      	ldr	r1, [pc, #80]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d021      	beq.n	80017fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	490e      	ldr	r1, [pc, #56]	; (80017f8 <HAL_GPIO_Init+0x2d0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]
 80017c4:	e021      	b.n	800180a <HAL_GPIO_Init+0x2e2>
 80017c6:	bf00      	nop
 80017c8:	10320000 	.word	0x10320000
 80017cc:	10310000 	.word	0x10310000
 80017d0:	10220000 	.word	0x10220000
 80017d4:	10210000 	.word	0x10210000
 80017d8:	10120000 	.word	0x10120000
 80017dc:	10110000 	.word	0x10110000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	40010800 	.word	0x40010800
 80017ec:	40010c00 	.word	0x40010c00
 80017f0:	40011000 	.word	0x40011000
 80017f4:	40011400 	.word	0x40011400
 80017f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_GPIO_Init+0x304>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	43db      	mvns	r3, r3
 8001804:	4909      	ldr	r1, [pc, #36]	; (800182c <HAL_GPIO_Init+0x304>)
 8001806:	4013      	ands	r3, r2
 8001808:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	3301      	adds	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	f47f ae8e 	bne.w	800153c <HAL_GPIO_Init+0x14>
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	372c      	adds	r7, #44	; 0x2c
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40010400 	.word	0x40010400

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]
 800186a:	4613      	mov	r3, r2
 800186c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800186e:	787b      	ldrb	r3, [r7, #1]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001874:	887a      	ldrh	r2, [r7, #2]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800187a:	e003      	b.n	8001884 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	041a      	lsls	r2, r3, #16
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	611a      	str	r2, [r3, #16]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
	...

08001890 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800189a:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018a6:	4a05      	ldr	r2, [pc, #20]	; (80018bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f806 	bl	80018c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40010400 	.word	0x40010400

080018c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e26c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8087 	beq.w	8001a02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f4:	4b92      	ldr	r3, [pc, #584]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d00c      	beq.n	800191a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001900:	4b8f      	ldr	r3, [pc, #572]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d112      	bne.n	8001932 <HAL_RCC_OscConfig+0x5e>
 800190c:	4b8c      	ldr	r3, [pc, #560]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d10b      	bne.n	8001932 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d06c      	beq.n	8001a00 <HAL_RCC_OscConfig+0x12c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d168      	bne.n	8001a00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e246      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x76>
 800193c:	4b80      	ldr	r3, [pc, #512]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a7f      	ldr	r2, [pc, #508]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e02e      	b.n	80019a8 <HAL_RCC_OscConfig+0xd4>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x98>
 8001952:	4b7b      	ldr	r3, [pc, #492]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a7a      	ldr	r2, [pc, #488]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b78      	ldr	r3, [pc, #480]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a77      	ldr	r2, [pc, #476]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xd4>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0xbc>
 8001976:	4b72      	ldr	r3, [pc, #456]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a71      	ldr	r2, [pc, #452]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6e      	ldr	r2, [pc, #440]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xd4>
 8001990:	4b6b      	ldr	r3, [pc, #428]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a6a      	ldr	r2, [pc, #424]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b68      	ldr	r3, [pc, #416]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a67      	ldr	r2, [pc, #412]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fca2 	bl	80012f8 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fc9e 	bl	80012f8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1fa      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xe4>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc8e 	bl	80012f8 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fc8a 	bl	80012f8 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1e6      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x10c>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x18c>
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x176>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1ba      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4939      	ldr	r1, [pc, #228]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e03a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fc43 	bl	80012f8 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fc3f 	bl	80012f8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e19b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4b2d      	ldr	r3, [pc, #180]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b2a      	ldr	r3, [pc, #168]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4927      	ldr	r1, [pc, #156]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x270>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fc22 	bl	80012f8 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fc1e 	bl	80012f8 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e17a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03a      	beq.n	8001b58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d019      	beq.n	8001b1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fc02 	bl	80012f8 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fbfe 	bl	80012f8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e15a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f000 facc 	bl	80020b4 <RCC_Delay>
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_RCC_OscConfig+0x274>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b24:	f7ff fbe8 	bl	80012f8 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2a:	e00f      	b.n	8001b4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fbe4 	bl	80012f8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d908      	bls.n	8001b4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e140      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	42420000 	.word	0x42420000
 8001b48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4c:	4b9e      	ldr	r3, [pc, #632]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e9      	bne.n	8001b2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a6 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b97      	ldr	r3, [pc, #604]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4a93      	ldr	r2, [pc, #588]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	61d3      	str	r3, [r2, #28]
 8001b82:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b8e      	ldr	r3, [pc, #568]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b8b      	ldr	r3, [pc, #556]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a8a      	ldr	r2, [pc, #552]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fba5 	bl	80012f8 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff fba1 	bl	80012f8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	; 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0fd      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b81      	ldr	r3, [pc, #516]	; (8001dcc <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x312>
 8001bd8:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	e02d      	b.n	8001c42 <HAL_RCC_OscConfig+0x36e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x334>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6213      	str	r3, [r2, #32]
 8001c06:	e01c      	b.n	8001c42 <HAL_RCC_OscConfig+0x36e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d10c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x356>
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a6c      	ldr	r2, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4a69      	ldr	r2, [pc, #420]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6213      	str	r3, [r2, #32]
 8001c28:	e00b      	b.n	8001c42 <HAL_RCC_OscConfig+0x36e>
 8001c2a:	4b67      	ldr	r3, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	4b64      	ldr	r3, [pc, #400]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a63      	ldr	r2, [pc, #396]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d015      	beq.n	8001c76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff fb55 	bl	80012f8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7ff fb51 	bl	80012f8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0ab      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0ee      	beq.n	8001c52 <HAL_RCC_OscConfig+0x37e>
 8001c74:	e014      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb3f 	bl	80012f8 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7e:	f7ff fb3b 	bl	80012f8 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e095      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ee      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca6:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4a47      	ldr	r2, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8081 	beq.w	8001dbe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d061      	beq.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d146      	bne.n	8001d5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x4fc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fb0f 	bl	80012f8 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cde:	f7ff fb0b 	bl	80012f8 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e067      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f0      	bne.n	8001cde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	492d      	ldr	r1, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a19      	ldr	r1, [r3, #32]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x4fc>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fadf 	bl	80012f8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff fadb 	bl	80012f8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e037      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x46a>
 8001d5c:	e02f      	b.n	8001dbe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_OscConfig+0x4fc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff fac8 	bl	80012f8 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff fac4 	bl	80012f8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e020      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x498>
 8001d8a:	e018      	b.n	8001dbe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e013      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	42420060 	.word	0x42420060

08001dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0d0      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d910      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b67      	ldr	r3, [pc, #412]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 0207 	bic.w	r2, r3, #7
 8001dfe:	4965      	ldr	r1, [pc, #404]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b63      	ldr	r3, [pc, #396]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0b8      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e30:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a52      	ldr	r2, [pc, #328]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	494d      	ldr	r1, [pc, #308]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d040      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e073      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e06b      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4936      	ldr	r1, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff fa18 	bl	80012f8 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff fa14 	bl	80012f8 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e053      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d210      	bcs.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4922      	ldr	r1, [pc, #136]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e032      	b.n	8001f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4916      	ldr	r1, [pc, #88]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d009      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f4e:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	490e      	ldr	r1, [pc, #56]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f62:	f000 f821 	bl	8001fa8 <HAL_RCC_GetSysClockFreq>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f976 	bl	8001274 <HAL_InitTick>

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40022000 	.word	0x40022000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08002b18 	.word	0x08002b18
 8001fa0:	20000024 	.word	0x20000024
 8001fa4:	20000028 	.word	0x20000028

08001fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	; (800203c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	d002      	beq.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d003      	beq.n	8001fde <HAL_RCC_GetSysClockFreq+0x36>
 8001fd6:	e027      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fda:	613b      	str	r3, [r7, #16]
      break;
 8001fdc:	e027      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	0c9b      	lsrs	r3, r3, #18
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe8:	5cd3      	ldrb	r3, [r2, r3]
 8001fea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d010      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0c5b      	lsrs	r3, r3, #17
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	4a11      	ldr	r2, [pc, #68]	; (8002048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 800200a:	fb02 f203 	mul.w	r2, r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e004      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_RCC_GetSysClockFreq+0xa4>)
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	613b      	str	r3, [r7, #16]
      break;
 8002026:	e002      	b.n	800202e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetSysClockFreq+0x98>)
 800202a:	613b      	str	r3, [r7, #16]
      break;
 800202c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202e:	693b      	ldr	r3, [r7, #16]
}
 8002030:	4618      	mov	r0, r3
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	007a1200 	.word	0x007a1200
 8002044:	08002b30 	.word	0x08002b30
 8002048:	08002b40 	.word	0x08002b40
 800204c:	003d0900 	.word	0x003d0900

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <HAL_RCC_GetHCLKFreq+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	20000024 	.word	0x20000024

08002064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002068:	f7ff fff2 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40021000 	.word	0x40021000
 8002088:	08002b28 	.word	0x08002b28

0800208c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002090:	f7ff ffde 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	0adb      	lsrs	r3, r3, #11
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4903      	ldr	r1, [pc, #12]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08002b28 	.word	0x08002b28

080020b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <RCC_Delay+0x34>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <RCC_Delay+0x38>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0a5b      	lsrs	r3, r3, #9
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020d0:	bf00      	nop
  }
  while (Delay --);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	60fa      	str	r2, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f9      	bne.n	80020d0 <RCC_Delay+0x1c>
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	20000024 	.word	0x20000024
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e041      	b.n	8002186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe ffce 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4610      	mov	r0, r2
 8002130:	f000 fa74 	bl	800261c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d001      	beq.n	80021a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e03a      	b.n	800221e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <HAL_TIM_Base_Start_IT+0x98>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00e      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x58>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d009      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x58>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <HAL_TIM_Base_Start_IT+0x9c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_TIM_Base_Start_IT+0x58>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a13      	ldr	r2, [pc, #76]	; (8002230 <HAL_TIM_Base_Start_IT+0xa0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d111      	bne.n	800220c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d010      	beq.n	800221c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0201 	orr.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220a:	e007      	b.n	800221c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800

08002234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b02      	cmp	r3, #2
 8002248:	d122      	bne.n	8002290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d11b      	bne.n	8002290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0202 	mvn.w	r2, #2
 8002260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f9b4 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 800227c:	e005      	b.n	800228a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f9a7 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f9b6 	bl	80025f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0304 	and.w	r3, r3, #4
 800229a:	2b04      	cmp	r3, #4
 800229c:	d122      	bne.n	80022e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0204 	mvn.w	r2, #4
 80022b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2202      	movs	r2, #2
 80022ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f98a 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f97d 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f98c 	bl	80025f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0208 	mvn.w	r2, #8
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2204      	movs	r2, #4
 800230e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f960 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f953 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f962 	bl	80025f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b10      	cmp	r3, #16
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0210 	mvn.w	r2, #16
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2208      	movs	r2, #8
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f936 	bl	80025e4 <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f929 	bl	80025d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f938 	bl	80025f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0201 	mvn.w	r2, #1
 80023b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fd5a 	bl	8000e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b80      	cmp	r3, #128	; 0x80
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa7b 	bl	80028da <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b40      	cmp	r3, #64	; 0x40
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8fc 	bl	8002608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	2b20      	cmp	r3, #32
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b20      	cmp	r3, #32
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0220 	mvn.w	r2, #32
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa46 	bl	80028c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_TIM_ConfigClockSource+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e0b4      	b.n	80025ca <HAL_TIM_ConfigClockSource+0x186>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800247e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002486:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002498:	d03e      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0xd4>
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800249e:	f200 8087 	bhi.w	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a6:	f000 8086 	beq.w	80025b6 <HAL_TIM_ConfigClockSource+0x172>
 80024aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ae:	d87f      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b70      	cmp	r3, #112	; 0x70
 80024b2:	d01a      	beq.n	80024ea <HAL_TIM_ConfigClockSource+0xa6>
 80024b4:	2b70      	cmp	r3, #112	; 0x70
 80024b6:	d87b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b60      	cmp	r3, #96	; 0x60
 80024ba:	d050      	beq.n	800255e <HAL_TIM_ConfigClockSource+0x11a>
 80024bc:	2b60      	cmp	r3, #96	; 0x60
 80024be:	d877      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b50      	cmp	r3, #80	; 0x50
 80024c2:	d03c      	beq.n	800253e <HAL_TIM_ConfigClockSource+0xfa>
 80024c4:	2b50      	cmp	r3, #80	; 0x50
 80024c6:	d873      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b40      	cmp	r3, #64	; 0x40
 80024ca:	d058      	beq.n	800257e <HAL_TIM_ConfigClockSource+0x13a>
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d86f      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b30      	cmp	r3, #48	; 0x30
 80024d2:	d064      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024d4:	2b30      	cmp	r3, #48	; 0x30
 80024d6:	d86b      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d060      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d867      	bhi.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05c      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d05a      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x15a>
 80024e8:	e062      	b.n	80025b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f000 f968 	bl	80027ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800250c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	609a      	str	r2, [r3, #8]
      break;
 8002516:	e04f      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f000 f951 	bl	80027ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800253a:	609a      	str	r2, [r3, #8]
      break;
 800253c:	e03c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	461a      	mov	r2, r3
 800254c:	f000 f8c8 	bl	80026e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2150      	movs	r1, #80	; 0x50
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f91f 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 800255c:	e02c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6859      	ldr	r1, [r3, #4]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	461a      	mov	r2, r3
 800256c:	f000 f8e6 	bl	800273c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2160      	movs	r1, #96	; 0x60
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f90f 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 800257c:	e01c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	461a      	mov	r2, r3
 800258c:	f000 f8a8 	bl	80026e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f8ff 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 800259c:	e00c      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f000 f8f6 	bl	800279a <TIM_ITRx_SetConfig>
      break;
 80025ae:	e003      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e000      	b.n	80025b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
	...

0800261c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00b      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263a:	d007      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <TIM_Base_SetConfig+0xbc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d003      	beq.n	800264c <TIM_Base_SetConfig+0x30>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a25      	ldr	r2, [pc, #148]	; (80026dc <TIM_Base_SetConfig+0xc0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d108      	bne.n	800265e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00b      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a19      	ldr	r2, [pc, #100]	; (80026d8 <TIM_Base_SetConfig+0xbc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x62>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <TIM_Base_SetConfig+0xc0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <TIM_Base_SetConfig+0xb8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800

080026e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	f023 0201 	bic.w	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f023 030a 	bic.w	r3, r3, #10
 800271c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	621a      	str	r2, [r3, #32]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273c:	b480      	push	{r7}
 800273e:	b087      	sub	sp, #28
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	f023 0210 	bic.w	r2, r3, #16
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	031b      	lsls	r3, r3, #12
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002778:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f043 0307 	orr.w	r3, r3, #7
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b087      	sub	sp, #28
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	021a      	lsls	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002820:	2302      	movs	r3, #2
 8002822:	e046      	b.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00e      	beq.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d009      	beq.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d004      	beq.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a10      	ldr	r2, [pc, #64]	; (80028c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10c      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800288c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	4313      	orrs	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40000800 	.word	0x40000800

080028c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e042      	b.n	8002984 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fbf4 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2224      	movs	r2, #36	; 0x24
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800292e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f82b 	bl	800298c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002944:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002954:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002964:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029c6:	f023 030c 	bic.w	r3, r3, #12
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <UART_SetConfig+0x114>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7ff fb4a 	bl	800208c <HAL_RCC_GetPCLK2Freq>
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	e002      	b.n	8002a02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029fc:	f7ff fb32 	bl	8002064 <HAL_RCC_GetPCLK1Freq>
 8002a00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	0119      	lsls	r1, r3, #4
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009a      	lsls	r2, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2064      	movs	r0, #100	; 0x64
 8002a42:	fb00 f303 	mul.w	r3, r0, r3
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a58:	4419      	add	r1, r3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a72:	fba3 0302 	umull	r0, r3, r3, r2
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2064      	movs	r0, #100	; 0x64
 8002a7a:	fb00 f303 	mul.w	r3, r0, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	3332      	adds	r3, #50	; 0x32
 8002a84:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <UART_SetConfig+0x118>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	440a      	add	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	51eb851f 	.word	0x51eb851f

08002aa8 <__libc_init_array>:
 8002aa8:	b570      	push	{r4, r5, r6, lr}
 8002aaa:	2600      	movs	r6, #0
 8002aac:	4d0c      	ldr	r5, [pc, #48]	; (8002ae0 <__libc_init_array+0x38>)
 8002aae:	4c0d      	ldr	r4, [pc, #52]	; (8002ae4 <__libc_init_array+0x3c>)
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	42a6      	cmp	r6, r4
 8002ab6:	d109      	bne.n	8002acc <__libc_init_array+0x24>
 8002ab8:	f000 f822 	bl	8002b00 <_init>
 8002abc:	2600      	movs	r6, #0
 8002abe:	4d0a      	ldr	r5, [pc, #40]	; (8002ae8 <__libc_init_array+0x40>)
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	; (8002aec <__libc_init_array+0x44>)
 8002ac2:	1b64      	subs	r4, r4, r5
 8002ac4:	10a4      	asrs	r4, r4, #2
 8002ac6:	42a6      	cmp	r6, r4
 8002ac8:	d105      	bne.n	8002ad6 <__libc_init_array+0x2e>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad0:	4798      	blx	r3
 8002ad2:	3601      	adds	r6, #1
 8002ad4:	e7ee      	b.n	8002ab4 <__libc_init_array+0xc>
 8002ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ada:	4798      	blx	r3
 8002adc:	3601      	adds	r6, #1
 8002ade:	e7f2      	b.n	8002ac6 <__libc_init_array+0x1e>
 8002ae0:	08002b44 	.word	0x08002b44
 8002ae4:	08002b44 	.word	0x08002b44
 8002ae8:	08002b44 	.word	0x08002b44
 8002aec:	08002b48 	.word	0x08002b48

08002af0 <memset>:
 8002af0:	4603      	mov	r3, r0
 8002af2:	4402      	add	r2, r0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d100      	bne.n	8002afa <memset+0xa>
 8002af8:	4770      	bx	lr
 8002afa:	f803 1b01 	strb.w	r1, [r3], #1
 8002afe:	e7f9      	b.n	8002af4 <memset+0x4>

08002b00 <_init>:
 8002b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b02:	bf00      	nop
 8002b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b06:	bc08      	pop	{r3}
 8002b08:	469e      	mov	lr, r3
 8002b0a:	4770      	bx	lr

08002b0c <_fini>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	bf00      	nop
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr
