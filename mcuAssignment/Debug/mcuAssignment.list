
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004018  08004018  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004018  08004018  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004018  08004018  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000094  080040b4  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  080040b4  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ddc  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a7  00000000  00000000  00031e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00034440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00035100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ce5  00000000  00000000  00035cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f641  00000000  00000000  0004e9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b353  00000000  00000000  0005dfe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003778  00000000  00000000  000e938c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e78 	.word	0x08003e78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08003e78 	.word	0x08003e78

0800014c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e020      	b.n	800019a <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000158:	4a14      	ldr	r2, [pc, #80]	; (80001ac <initStateForButton+0x60>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2101      	movs	r1, #1
 800015e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000162:	4a13      	ldr	r2, [pc, #76]	; (80001b0 <initStateForButton+0x64>)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2101      	movs	r1, #1
 8000168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800016c:	4a11      	ldr	r2, [pc, #68]	; (80001b4 <initStateForButton+0x68>)
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	2101      	movs	r1, #1
 8000172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000176:	4a10      	ldr	r2, [pc, #64]	; (80001b8 <initStateForButton+0x6c>)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2101      	movs	r1, #1
 800017c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000180:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <initStateForButton+0x70>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	21c8      	movs	r1, #200	; 0xc8
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <initStateForButton+0x74>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2100      	movs	r1, #0
 8000190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	3301      	adds	r3, #1
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2b03      	cmp	r3, #3
 800019e:	dddb      	ble.n	8000158 <initStateForButton+0xc>
	 }
}
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000178 	.word	0x20000178
 80001b0:	20000188 	.word	0x20000188
 80001b4:	200001b8 	.word	0x200001b8
 80001b8:	20000168 	.word	0x20000168
 80001bc:	200001a8 	.word	0x200001a8
 80001c0:	20000198 	.word	0x20000198

080001c4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80001cc:	4a09      	ldr	r2, [pc, #36]	; (80001f4 <isButtonPressed+0x30>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d106      	bne.n	80001e6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80001d8:	4a06      	ldr	r2, [pc, #24]	; (80001f4 <isButtonPressed+0x30>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	2100      	movs	r1, #0
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <isButtonPressed+0x24>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	20000198 	.word	0x20000198

080001f8 <subKeyProcess>:

void subKeyProcess(int key_index) {
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000200:	4a04      	ldr	r2, [pc, #16]	; (8000214 <subKeyProcess+0x1c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2101      	movs	r1, #1
 8000206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800020a:	bf00      	nop
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	20000198 	.word	0x20000198

08000218 <getKeyInput>:

void getKeyInput() {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e076      	b.n	8000312 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000224:	4a3f      	ldr	r2, [pc, #252]	; (8000324 <getKeyInput+0x10c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	493e      	ldr	r1, [pc, #248]	; (8000328 <getKeyInput+0x110>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000234:	4a3d      	ldr	r2, [pc, #244]	; (800032c <getKeyInput+0x114>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023c:	4939      	ldr	r1, [pc, #228]	; (8000324 <getKeyInput+0x10c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000244:	4a3a      	ldr	r2, [pc, #232]	; (8000330 <getKeyInput+0x118>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024c:	4939      	ldr	r1, [pc, #228]	; (8000334 <getKeyInput+0x11c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000254:	4619      	mov	r1, r3
 8000256:	4610      	mov	r0, r2
 8000258:	f001 fcd2 	bl	8001c00 <HAL_GPIO_ReadPin>
 800025c:	4603      	mov	r3, r0
 800025e:	4619      	mov	r1, r3
 8000260:	4a32      	ldr	r2, [pc, #200]	; (800032c <getKeyInput+0x114>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000268:	4a2f      	ldr	r2, [pc, #188]	; (8000328 <getKeyInput+0x110>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000270:	492c      	ldr	r1, [pc, #176]	; (8000324 <getKeyInput+0x10c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000278:	429a      	cmp	r2, r3
 800027a:	d147      	bne.n	800030c <getKeyInput+0xf4>
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <getKeyInput+0x10c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000284:	4929      	ldr	r1, [pc, #164]	; (800032c <getKeyInput+0x114>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800028c:	429a      	cmp	r2, r3
 800028e:	d13d      	bne.n	800030c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 8000290:	4a29      	ldr	r2, [pc, #164]	; (8000338 <getKeyInput+0x120>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <getKeyInput+0x114>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d016      	beq.n	80002d2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80002a4:	4a21      	ldr	r2, [pc, #132]	; (800032c <getKeyInput+0x114>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ac:	4922      	ldr	r1, [pc, #136]	; (8000338 <getKeyInput+0x120>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <getKeyInput+0x114>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d125      	bne.n	800030c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ff99 	bl	80001f8 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80002c6:	4a1d      	ldr	r2, [pc, #116]	; (800033c <getKeyInput+0x124>)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	21c8      	movs	r1, #200	; 0xc8
 80002cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002d0:	e01c      	b.n	800030c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80002d2:	4a1a      	ldr	r2, [pc, #104]	; (800033c <getKeyInput+0x124>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	4917      	ldr	r1, [pc, #92]	; (800033c <getKeyInput+0x124>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <getKeyInput+0x124>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	dc0d      	bgt.n	800030c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <getKeyInput+0x114>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d102      	bne.n	8000302 <getKeyInput+0xea>
						subKeyProcess(i);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff7b 	bl	80001f8 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <getKeyInput+0x124>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	21c8      	movs	r1, #200	; 0xc8
 8000308:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b03      	cmp	r3, #3
 8000316:	dd85      	ble.n	8000224 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000188 	.word	0x20000188
 8000328:	20000178 	.word	0x20000178
 800032c:	200001b8 	.word	0x200001b8
 8000330:	20000008 	.word	0x20000008
 8000334:	20000000 	.word	0x20000000
 8000338:	20000168 	.word	0x20000168
 800033c:	200001a8 	.word	0x200001a8

08000340 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3b0a      	subs	r3, #10
 800034c:	2b0d      	cmp	r3, #13
 800034e:	f200 80fa 	bhi.w	8000546 <displayLed+0x206>
 8000352:	a201      	add	r2, pc, #4	; (adr r2, 8000358 <displayLed+0x18>)
 8000354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000358:	08000391 	.word	0x08000391
 800035c:	080003bd 	.word	0x080003bd
 8000360:	080003e9 	.word	0x080003e9
 8000364:	08000547 	.word	0x08000547
 8000368:	08000547 	.word	0x08000547
 800036c:	08000547 	.word	0x08000547
 8000370:	08000547 	.word	0x08000547
 8000374:	08000547 	.word	0x08000547
 8000378:	08000547 	.word	0x08000547
 800037c:	08000547 	.word	0x08000547
 8000380:	08000415 	.word	0x08000415
 8000384:	08000463 	.word	0x08000463
 8000388:	080004af 	.word	0x080004af
 800038c:	080004fb 	.word	0x080004fb
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000390:	2201      	movs	r2, #1
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4872      	ldr	r0, [pc, #456]	; (8000560 <displayLed+0x220>)
 8000398:	f001 fc49 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	4870      	ldr	r0, [pc, #448]	; (8000564 <displayLed+0x224>)
 80003a2:	f001 fc44 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2120      	movs	r1, #32
 80003aa:	486e      	ldr	r0, [pc, #440]	; (8000564 <displayLed+0x224>)
 80003ac:	f001 fc3f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2110      	movs	r1, #16
 80003b4:	486b      	ldr	r0, [pc, #428]	; (8000564 <displayLed+0x224>)
 80003b6:	f001 fc3a 	bl	8001c2e <HAL_GPIO_WritePin>
		break;
 80003ba:	e0cd      	b.n	8000558 <displayLed+0x218>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4867      	ldr	r0, [pc, #412]	; (8000560 <displayLed+0x220>)
 80003c4:	f001 fc33 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2108      	movs	r1, #8
 80003cc:	4865      	ldr	r0, [pc, #404]	; (8000564 <displayLed+0x224>)
 80003ce:	f001 fc2e 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2120      	movs	r1, #32
 80003d6:	4863      	ldr	r0, [pc, #396]	; (8000564 <displayLed+0x224>)
 80003d8:	f001 fc29 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	4860      	ldr	r0, [pc, #384]	; (8000564 <displayLed+0x224>)
 80003e2:	f001 fc24 	bl	8001c2e <HAL_GPIO_WritePin>
		break;
 80003e6:	e0b7      	b.n	8000558 <displayLed+0x218>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ee:	485c      	ldr	r0, [pc, #368]	; (8000560 <displayLed+0x220>)
 80003f0:	f001 fc1d 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80003f4:	2201      	movs	r2, #1
 80003f6:	2108      	movs	r1, #8
 80003f8:	485a      	ldr	r0, [pc, #360]	; (8000564 <displayLed+0x224>)
 80003fa:	f001 fc18 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4858      	ldr	r0, [pc, #352]	; (8000564 <displayLed+0x224>)
 8000404:	f001 fc13 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	4855      	ldr	r0, [pc, #340]	; (8000564 <displayLed+0x224>)
 800040e:	f001 fc0e 	bl	8001c2e <HAL_GPIO_WritePin>
		break;
 8000412:	e0a1      	b.n	8000558 <displayLed+0x218>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041a:	4851      	ldr	r0, [pc, #324]	; (8000560 <displayLed+0x220>)
 800041c:	f001 fc07 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2108      	movs	r1, #8
 8000424:	484f      	ldr	r0, [pc, #316]	; (8000564 <displayLed+0x224>)
 8000426:	f001 fc02 	bl	8001c2e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2120      	movs	r1, #32
 800042e:	484d      	ldr	r0, [pc, #308]	; (8000564 <displayLed+0x224>)
 8000430:	f001 fbfd 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2110      	movs	r1, #16
 8000438:	484a      	ldr	r0, [pc, #296]	; (8000564 <displayLed+0x224>)
 800043a:	f001 fbf8 	bl	8001c2e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 800043e:	4b4a      	ldr	r3, [pc, #296]	; (8000568 <displayLed+0x228>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b01      	cmp	r3, #1
 8000444:	f040 8081 	bne.w	800054a <displayLed+0x20a>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	4845      	ldr	r0, [pc, #276]	; (8000564 <displayLed+0x224>)
 8000450:	f001 fbed 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000454:	2201      	movs	r2, #1
 8000456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045a:	4841      	ldr	r0, [pc, #260]	; (8000560 <displayLed+0x220>)
 800045c:	f001 fbe7 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		break;
 8000460:	e073      	b.n	800054a <displayLed+0x20a>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000462:	2201      	movs	r2, #1
 8000464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000468:	483d      	ldr	r0, [pc, #244]	; (8000560 <displayLed+0x220>)
 800046a:	f001 fbe0 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 800046e:	2200      	movs	r2, #0
 8000470:	2108      	movs	r1, #8
 8000472:	483c      	ldr	r0, [pc, #240]	; (8000564 <displayLed+0x224>)
 8000474:	f001 fbdb 	bl	8001c2e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000478:	2201      	movs	r2, #1
 800047a:	2120      	movs	r1, #32
 800047c:	4839      	ldr	r0, [pc, #228]	; (8000564 <displayLed+0x224>)
 800047e:	f001 fbd6 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	2110      	movs	r1, #16
 8000486:	4837      	ldr	r0, [pc, #220]	; (8000564 <displayLed+0x224>)
 8000488:	f001 fbd1 	bl	8001c2e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <displayLed+0x228>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d15c      	bne.n	800054e <displayLed+0x20e>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800049a:	4832      	ldr	r0, [pc, #200]	; (8000564 <displayLed+0x224>)
 800049c:	f001 fbc7 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a6:	482e      	ldr	r0, [pc, #184]	; (8000560 <displayLed+0x220>)
 80004a8:	f001 fbc1 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		break;
 80004ac:	e04f      	b.n	800054e <displayLed+0x20e>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b4:	482a      	ldr	r0, [pc, #168]	; (8000560 <displayLed+0x220>)
 80004b6:	f001 fbba 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2108      	movs	r1, #8
 80004be:	4829      	ldr	r0, [pc, #164]	; (8000564 <displayLed+0x224>)
 80004c0:	f001 fbb5 	bl	8001c2e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2120      	movs	r1, #32
 80004c8:	4826      	ldr	r0, [pc, #152]	; (8000564 <displayLed+0x224>)
 80004ca:	f001 fbb0 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2110      	movs	r1, #16
 80004d2:	4824      	ldr	r0, [pc, #144]	; (8000564 <displayLed+0x224>)
 80004d4:	f001 fbab 	bl	8001c2e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <displayLed+0x228>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d138      	bne.n	8000552 <displayLed+0x212>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e6:	481f      	ldr	r0, [pc, #124]	; (8000564 <displayLed+0x224>)
 80004e8:	f001 fba1 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <displayLed+0x220>)
 80004f4:	f001 fb9b 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		break;
 80004f8:	e02b      	b.n	8000552 <displayLed+0x212>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <displayLed+0x220>)
 8000502:	f001 fb94 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2108      	movs	r1, #8
 800050a:	4816      	ldr	r0, [pc, #88]	; (8000564 <displayLed+0x224>)
 800050c:	f001 fb8f 	bl	8001c2e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2120      	movs	r1, #32
 8000514:	4813      	ldr	r0, [pc, #76]	; (8000564 <displayLed+0x224>)
 8000516:	f001 fb8a 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <displayLed+0x224>)
 8000520:	f001 fb85 	bl	8001c2e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <displayLed+0x228>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d114      	bne.n	8000556 <displayLed+0x216>
		// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000532:	480c      	ldr	r0, [pc, #48]	; (8000564 <displayLed+0x224>)
 8000534:	f001 fb7b 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <displayLed+0x220>)
 8000540:	f001 fb75 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		break;
 8000544:	e007      	b.n	8000556 <displayLed+0x216>

	default:
		break;
 8000546:	bf00      	nop
 8000548:	e006      	b.n	8000558 <displayLed+0x218>
		break;
 800054a:	bf00      	nop
 800054c:	e004      	b.n	8000558 <displayLed+0x218>
		break;
 800054e:	bf00      	nop
 8000550:	e002      	b.n	8000558 <displayLed+0x218>
		break;
 8000552:	bf00      	nop
 8000554:	e000      	b.n	8000558 <displayLed+0x218>
		break;
 8000556:	bf00      	nop
	}
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40010800 	.word	0x40010800
 8000564:	40010c00 	.word	0x40010c00
 8000568:	200000bc 	.word	0x200000bc

0800056c <switchMode2>:
 */

#include "fsm_automatic.h"


void switchMode2() {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <switchMode2+0x4c>)
 8000574:	4911      	ldr	r1, [pc, #68]	; (80005bc <switchMode2+0x50>)
 8000576:	4812      	ldr	r0, [pc, #72]	; (80005c0 <switchMode2+0x54>)
 8000578:	f003 f844 	bl	8003604 <siprintf>
 800057c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	b29a      	uxth	r2, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000586:	490e      	ldr	r1, [pc, #56]	; (80005c0 <switchMode2+0x54>)
 8000588:	480e      	ldr	r0, [pc, #56]	; (80005c4 <switchMode2+0x58>)
 800058a:	f002 fe89 	bl	80032a0 <HAL_UART_Transmit>
	status = RED_MAN;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <switchMode2+0x5c>)
 8000590:	220a      	movs	r2, #10
 8000592:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <switchMode2+0x60>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <switchMode2+0x64>)
 800059a:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 fdf7 	bl	8001190 <setTimer2>
	setTimer4(25);
 80005a2:	2019      	movs	r0, #25
 80005a4:	f000 fe08 	bl	80011b8 <setTimer4>
	statusPedestrian = PES_OFF;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <switchMode2+0x68>)
 80005aa:	221f      	movs	r2, #31
 80005ac:	601a      	str	r2, [r3, #0]
//	updateLedBufferVal(counter1/10, 2, counter1%10, 2);
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	08003e90 	.word	0x08003e90
 80005bc:	08003ea8 	.word	0x08003ea8
 80005c0:	200000c4 	.word	0x200000c4
 80005c4:	20000258 	.word	0x20000258
 80005c8:	200000b8 	.word	0x200000b8
 80005cc:	20000018 	.word	0x20000018
 80005d0:	200000b0 	.word	0x200000b0
 80005d4:	200000c0 	.word	0x200000c0

080005d8 <fsm_pedestrian>:

void fsm_pedestrian(){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <fsm_pedestrian+0x4c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b1e      	cmp	r3, #30
 80005e2:	d002      	beq.n	80005ea <fsm_pedestrian+0x12>
 80005e4:	2b1f      	cmp	r3, #31
 80005e6:	d004      	beq.n	80005f2 <fsm_pedestrian+0x1a>
		turnPedestrian_flag = 0;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	default:
		break;
 80005e8:	e013      	b.n	8000612 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 1;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <fsm_pedestrian+0x50>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
		break;
 80005f0:	e00f      	b.n	8000612 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 0;
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <fsm_pedestrian+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <fsm_pedestrian+0x54>)
 8000600:	f001 fb15 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <fsm_pedestrian+0x58>)
 800060c:	f001 fb0f 	bl	8001c2e <HAL_GPIO_WritePin>
		break;
 8000610:	bf00      	nop
	}

	if(timer6_flag == 1) {
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <fsm_pedestrian+0x5c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d102      	bne.n	8000620 <fsm_pedestrian+0x48>
		statusPedestrian = PES_OFF;
 800061a:	4b02      	ldr	r3, [pc, #8]	; (8000624 <fsm_pedestrian+0x4c>)
 800061c:	221f      	movs	r2, #31
 800061e:	601a      	str	r2, [r3, #0]
	}
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000c0 	.word	0x200000c0
 8000628:	200000bc 	.word	0x200000bc
 800062c:	40010c00 	.word	0x40010c00
 8000630:	40010800 	.word	0x40010800
 8000634:	20000154 	.word	0x20000154

08000638 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
	switch(status) {
 800063e:	4b8f      	ldr	r3, [pc, #572]	; (800087c <fsm_automatic_run+0x244>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	2b04      	cmp	r3, #4
 8000646:	f200 817a 	bhi.w	800093e <fsm_automatic_run+0x306>
 800064a:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <fsm_automatic_run+0x18>)
 800064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000650:	08000665 	.word	0x08000665
 8000654:	0800069f 	.word	0x0800069f
 8000658:	08000737 	.word	0x08000737
 800065c:	080007c3 	.word	0x080007c3
 8000660:	080008b5 	.word	0x080008b5
	case INIT:
		//turnOffLed();
		statusPedestrian = PES_OFF;
 8000664:	4b86      	ldr	r3, [pc, #536]	; (8000880 <fsm_automatic_run+0x248>)
 8000666:	221f      	movs	r2, #31
 8000668:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN2_AUTO;
 800066a:	4b84      	ldr	r3, [pc, #528]	; (800087c <fsm_automatic_run+0x244>)
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 8000670:	4b84      	ldr	r3, [pc, #528]	; (8000884 <fsm_automatic_run+0x24c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a84      	ldr	r2, [pc, #528]	; (8000888 <fsm_automatic_run+0x250>)
 8000676:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000678:	4b84      	ldr	r3, [pc, #528]	; (800088c <fsm_automatic_run+0x254>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a84      	ldr	r2, [pc, #528]	; (8000890 <fsm_automatic_run+0x258>)
 800067e:	6013      	str	r3, [r2, #0]


//		updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		setTimer1(greenTimer*100);
 8000680:	4b82      	ldr	r3, [pc, #520]	; (800088c <fsm_automatic_run+0x254>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2264      	movs	r2, #100	; 0x64
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fd6c 	bl	8001168 <setTimer1>
		setTimer2(100);
 8000690:	2064      	movs	r0, #100	; 0x64
 8000692:	f000 fd7d 	bl	8001190 <setTimer2>
		setTimer5(25);
 8000696:	2019      	movs	r0, #25
 8000698:	f000 fda2 	bl	80011e0 <setTimer5>
		break;
 800069c:	e158      	b.n	8000950 <fsm_automatic_run+0x318>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 800069e:	2014      	movs	r0, #20
 80006a0:	f7ff fe4e 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 80006a4:	4b7b      	ldr	r3, [pc, #492]	; (8000894 <fsm_automatic_run+0x25c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d11d      	bne.n	80006e8 <fsm_automatic_run+0xb0>
			int len= sprintf(str,"LED RED      = %d    LED GREEN    = %d\r\n",counter1,counter2);
 80006ac:	4b76      	ldr	r3, [pc, #472]	; (8000888 <fsm_automatic_run+0x250>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b77      	ldr	r3, [pc, #476]	; (8000890 <fsm_automatic_run+0x258>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4978      	ldr	r1, [pc, #480]	; (8000898 <fsm_automatic_run+0x260>)
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <fsm_automatic_run+0x264>)
 80006b8:	f002 ffa4 	bl	8003604 <siprintf>
 80006bc:	6038      	str	r0, [r7, #0]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	4975      	ldr	r1, [pc, #468]	; (800089c <fsm_automatic_run+0x264>)
 80006c8:	4875      	ldr	r0, [pc, #468]	; (80008a0 <fsm_automatic_run+0x268>)
 80006ca:	f002 fde9 	bl	80032a0 <HAL_UART_Transmit>
			setTimer2(100);
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f000 fd5e 	bl	8001190 <setTimer2>
			counter1--;
 80006d4:	4b6c      	ldr	r3, [pc, #432]	; (8000888 <fsm_automatic_run+0x250>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3b01      	subs	r3, #1
 80006da:	4a6b      	ldr	r2, [pc, #428]	; (8000888 <fsm_automatic_run+0x250>)
 80006dc:	6013      	str	r3, [r2, #0]
			counter2--;
 80006de:	4b6c      	ldr	r3, [pc, #432]	; (8000890 <fsm_automatic_run+0x258>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	4a6a      	ldr	r2, [pc, #424]	; (8000890 <fsm_automatic_run+0x258>)
 80006e6:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 80006e8:	4b6e      	ldr	r3, [pc, #440]	; (80008a4 <fsm_automatic_run+0x26c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d118      	bne.n	8000722 <fsm_automatic_run+0xea>
			status = RED1_YELLOW2_AUTO;
 80006f0:	4b62      	ldr	r3, [pc, #392]	; (800087c <fsm_automatic_run+0x244>)
 80006f2:	2203      	movs	r2, #3
 80006f4:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 80006f6:	4b63      	ldr	r3, [pc, #396]	; (8000884 <fsm_automatic_run+0x24c>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	4b64      	ldr	r3, [pc, #400]	; (800088c <fsm_automatic_run+0x254>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	2264      	movs	r2, #100	; 0x64
 8000702:	fb02 f303 	mul.w	r3, r2, r3
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fd2e 	bl	8001168 <setTimer1>
			counter1 = redTimer-greenTimer;
 800070c:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <fsm_automatic_run+0x24c>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b5e      	ldr	r3, [pc, #376]	; (800088c <fsm_automatic_run+0x254>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	4a5c      	ldr	r2, [pc, #368]	; (8000888 <fsm_automatic_run+0x250>)
 8000718:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 800071a:	4b63      	ldr	r3, [pc, #396]	; (80008a8 <fsm_automatic_run+0x270>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a5c      	ldr	r2, [pc, #368]	; (8000890 <fsm_automatic_run+0x258>)
 8000720:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(isButtonPressed(0)) {
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff fd4e 	bl	80001c4 <isButtonPressed>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	f000 8109 	beq.w	8000942 <fsm_automatic_run+0x30a>
			switchMode2();
 8000730:	f7ff ff1c 	bl	800056c <switchMode2>
		}

		break;
 8000734:	e105      	b.n	8000942 <fsm_automatic_run+0x30a>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 8000736:	2015      	movs	r0, #21
 8000738:	f7ff fe02 	bl	8000340 <displayLed>
		if(timer2_flag == 1) {
 800073c:	4b55      	ldr	r3, [pc, #340]	; (8000894 <fsm_automatic_run+0x25c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d11d      	bne.n	8000780 <fsm_automatic_run+0x148>
			int len= sprintf(str,"LED RED      = %d    LED YELLOW   = %d\r\n",counter1,counter2);
 8000744:	4b50      	ldr	r3, [pc, #320]	; (8000888 <fsm_automatic_run+0x250>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b51      	ldr	r3, [pc, #324]	; (8000890 <fsm_automatic_run+0x258>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4957      	ldr	r1, [pc, #348]	; (80008ac <fsm_automatic_run+0x274>)
 800074e:	4853      	ldr	r0, [pc, #332]	; (800089c <fsm_automatic_run+0x264>)
 8000750:	f002 ff58 	bl	8003604 <siprintf>
 8000754:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	494f      	ldr	r1, [pc, #316]	; (800089c <fsm_automatic_run+0x264>)
 8000760:	484f      	ldr	r0, [pc, #316]	; (80008a0 <fsm_automatic_run+0x268>)
 8000762:	f002 fd9d 	bl	80032a0 <HAL_UART_Transmit>
			setTimer2(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f000 fd12 	bl	8001190 <setTimer2>
			counter1--;
 800076c:	4b46      	ldr	r3, [pc, #280]	; (8000888 <fsm_automatic_run+0x250>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3b01      	subs	r3, #1
 8000772:	4a45      	ldr	r2, [pc, #276]	; (8000888 <fsm_automatic_run+0x250>)
 8000774:	6013      	str	r3, [r2, #0]
			counter2--;
 8000776:	4b46      	ldr	r3, [pc, #280]	; (8000890 <fsm_automatic_run+0x258>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a44      	ldr	r2, [pc, #272]	; (8000890 <fsm_automatic_run+0x258>)
 800077e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 8000780:	4b48      	ldr	r3, [pc, #288]	; (80008a4 <fsm_automatic_run+0x26c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d112      	bne.n	80007ae <fsm_automatic_run+0x176>
			status = GREEN1_RED2_AUTO;
 8000788:	4b3c      	ldr	r3, [pc, #240]	; (800087c <fsm_automatic_run+0x244>)
 800078a:	2204      	movs	r2, #4
 800078c:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <fsm_automatic_run+0x254>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2264      	movs	r2, #100	; 0x64
 8000794:	fb02 f303 	mul.w	r3, r2, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fce5 	bl	8001168 <setTimer1>
			counter1 = greenTimer;
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <fsm_automatic_run+0x254>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a39      	ldr	r2, [pc, #228]	; (8000888 <fsm_automatic_run+0x250>)
 80007a4:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <fsm_automatic_run+0x24c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a39      	ldr	r2, [pc, #228]	; (8000890 <fsm_automatic_run+0x258>)
 80007ac:	6013      	str	r3, [r2, #0]
		}
//		if (isButtonPressed(3)) {
//					turnPedestrianLight = 1;
//				}

		if(isButtonPressed(0)) {
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fd08 	bl	80001c4 <isButtonPressed>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 80c5 	beq.w	8000946 <fsm_automatic_run+0x30e>
			switchMode2();
 80007bc:	f7ff fed6 	bl	800056c <switchMode2>
		}
		break;
 80007c0:	e0c1      	b.n	8000946 <fsm_automatic_run+0x30e>
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 80007c2:	2016      	movs	r0, #22
 80007c4:	f7ff fdbc 	bl	8000340 <displayLed>
		if (isButtonPressed(3)) {
 80007c8:	2003      	movs	r0, #3
 80007ca:	f7ff fcfb 	bl	80001c4 <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00b      	beq.n	80007ec <fsm_automatic_run+0x1b4>
//			statusPedestrian = RED_ON;
//			setTimer6(redTimer*100);
			statusPedestrian = PES_ON;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <fsm_automatic_run+0x248>)
 80007d6:	221e      	movs	r2, #30
 80007d8:	601a      	str	r2, [r3, #0]
			setTimer6((3*redTimer)*100);
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <fsm_automatic_run+0x24c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007e2:	fb02 f303 	mul.w	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fd0e 	bl	8001208 <setTimer6>
		}

		if(timer2_flag == 1) {
 80007ec:	4b29      	ldr	r3, [pc, #164]	; (8000894 <fsm_automatic_run+0x25c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d11d      	bne.n	8000830 <fsm_automatic_run+0x1f8>
			int len= sprintf(str,"LED GREEN    = %d    LED RED      = %d\r\n",counter1,counter2);
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <fsm_automatic_run+0x250>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <fsm_automatic_run+0x258>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	492c      	ldr	r1, [pc, #176]	; (80008b0 <fsm_automatic_run+0x278>)
 80007fe:	4827      	ldr	r0, [pc, #156]	; (800089c <fsm_automatic_run+0x264>)
 8000800:	f002 ff00 	bl	8003604 <siprintf>
 8000804:	60b8      	str	r0, [r7, #8]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	b29a      	uxth	r2, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	4923      	ldr	r1, [pc, #140]	; (800089c <fsm_automatic_run+0x264>)
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <fsm_automatic_run+0x268>)
 8000812:	f002 fd45 	bl	80032a0 <HAL_UART_Transmit>
			setTimer2(100);
 8000816:	2064      	movs	r0, #100	; 0x64
 8000818:	f000 fcba 	bl	8001190 <setTimer2>
			counter1--;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <fsm_automatic_run+0x250>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3b01      	subs	r3, #1
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <fsm_automatic_run+0x250>)
 8000824:	6013      	str	r3, [r2, #0]
			counter2--;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <fsm_automatic_run+0x258>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	4a18      	ldr	r2, [pc, #96]	; (8000890 <fsm_automatic_run+0x258>)
 800082e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <fsm_automatic_run+0x26c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d118      	bne.n	800086a <fsm_automatic_run+0x232>
			status = YELLOW1_RED2_AUTO;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <fsm_automatic_run+0x244>)
 800083a:	2205      	movs	r2, #5
 800083c:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <fsm_automatic_run+0x24c>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <fsm_automatic_run+0x254>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	2264      	movs	r2, #100	; 0x64
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fc8a 	bl	8001168 <setTimer1>
			counter1 = yellowTimer;
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <fsm_automatic_run+0x270>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <fsm_automatic_run+0x250>)
 800085a:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <fsm_automatic_run+0x24c>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <fsm_automatic_run+0x254>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <fsm_automatic_run+0x258>)
 8000868:	6013      	str	r3, [r2, #0]
//		if (isButtonPressed(3)) {
//			turnPedestrianLight = 1;
//		}


		if(isButtonPressed(0)) {
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff fcaa 	bl	80001c4 <isButtonPressed>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d069      	beq.n	800094a <fsm_automatic_run+0x312>
			switchMode2();
 8000876:	f7ff fe79 	bl	800056c <switchMode2>
		}
		break;
 800087a:	e066      	b.n	800094a <fsm_automatic_run+0x312>
 800087c:	200000b8 	.word	0x200000b8
 8000880:	200000c0 	.word	0x200000c0
 8000884:	20000018 	.word	0x20000018
 8000888:	200000b0 	.word	0x200000b0
 800088c:	20000020 	.word	0x20000020
 8000890:	200000b4 	.word	0x200000b4
 8000894:	20000134 	.word	0x20000134
 8000898:	08003eb0 	.word	0x08003eb0
 800089c:	200000c4 	.word	0x200000c4
 80008a0:	20000258 	.word	0x20000258
 80008a4:	2000012c 	.word	0x2000012c
 80008a8:	2000001c 	.word	0x2000001c
 80008ac:	08003edc 	.word	0x08003edc
 80008b0:	08003f08 	.word	0x08003f08
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 80008b4:	2017      	movs	r0, #23
 80008b6:	f7ff fd43 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <fsm_automatic_run+0x320>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d11d      	bne.n	80008fe <fsm_automatic_run+0x2c6>
			int len= sprintf(str,"LED YELLOW   = %d    LED RED      = %d\r\n",counter1,counter2);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <fsm_automatic_run+0x324>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <fsm_automatic_run+0x328>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4926      	ldr	r1, [pc, #152]	; (8000964 <fsm_automatic_run+0x32c>)
 80008cc:	4826      	ldr	r0, [pc, #152]	; (8000968 <fsm_automatic_run+0x330>)
 80008ce:	f002 fe99 	bl	8003604 <siprintf>
 80008d2:	60f8      	str	r0, [r7, #12]
			 HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	4922      	ldr	r1, [pc, #136]	; (8000968 <fsm_automatic_run+0x330>)
 80008de:	4823      	ldr	r0, [pc, #140]	; (800096c <fsm_automatic_run+0x334>)
 80008e0:	f002 fcde 	bl	80032a0 <HAL_UART_Transmit>
			setTimer2(100);
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	f000 fc53 	bl	8001190 <setTimer2>
			counter1--;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <fsm_automatic_run+0x324>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <fsm_automatic_run+0x324>)
 80008f2:	6013      	str	r3, [r2, #0]
			counter2--;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <fsm_automatic_run+0x328>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	4a19      	ldr	r2, [pc, #100]	; (8000960 <fsm_automatic_run+0x328>)
 80008fc:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(counter1/10, counter2/10, counter1%10, counter2%10);
		}

		if(timer1_flag == 1) {
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <fsm_automatic_run+0x338>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d112      	bne.n	800092c <fsm_automatic_run+0x2f4>
			status = RED1_GREEN2_AUTO;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <fsm_automatic_run+0x33c>)
 8000908:	2202      	movs	r2, #2
 800090a:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <fsm_automatic_run+0x340>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2264      	movs	r2, #100	; 0x64
 8000912:	fb02 f303 	mul.w	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 fc26 	bl	8001168 <setTimer1>
			counter1 = redTimer;
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <fsm_automatic_run+0x344>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a0e      	ldr	r2, [pc, #56]	; (800095c <fsm_automatic_run+0x324>)
 8000922:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <fsm_automatic_run+0x340>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <fsm_automatic_run+0x328>)
 800092a:	6013      	str	r3, [r2, #0]
		}
//		if (isButtonPressed(3)) {
//			turnPedestrianLight = 1;
//		}

		if(isButtonPressed(0)) {
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff fc49 	bl	80001c4 <isButtonPressed>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00a      	beq.n	800094e <fsm_automatic_run+0x316>
			switchMode2();
 8000938:	f7ff fe18 	bl	800056c <switchMode2>
		}
		break;
 800093c:	e007      	b.n	800094e <fsm_automatic_run+0x316>
	default:
		break;
 800093e:	bf00      	nop
 8000940:	e006      	b.n	8000950 <fsm_automatic_run+0x318>
		break;
 8000942:	bf00      	nop
 8000944:	e004      	b.n	8000950 <fsm_automatic_run+0x318>
		break;
 8000946:	bf00      	nop
 8000948:	e002      	b.n	8000950 <fsm_automatic_run+0x318>
		break;
 800094a:	bf00      	nop
 800094c:	e000      	b.n	8000950 <fsm_automatic_run+0x318>
		break;
 800094e:	bf00      	nop
	}
};
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000134 	.word	0x20000134
 800095c:	200000b0 	.word	0x200000b0
 8000960:	200000b4 	.word	0x200000b4
 8000964:	08003f34 	.word	0x08003f34
 8000968:	200000c4 	.word	0x200000c4
 800096c:	20000258 	.word	0x20000258
 8000970:	2000012c 	.word	0x2000012c
 8000974:	200000b8 	.word	0x200000b8
 8000978:	20000020 	.word	0x20000020
 800097c:	20000018 	.word	0x20000018

08000980 <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <switchMode3+0x24>)
 8000986:	220b      	movs	r2, #11
 8000988:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <switchMode3+0x28>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a07      	ldr	r2, [pc, #28]	; (80009ac <switchMode3+0x2c>)
 8000990:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000992:	2064      	movs	r0, #100	; 0x64
 8000994:	f000 fbfc 	bl	8001190 <setTimer2>
	setTimer4(25);
 8000998:	2019      	movs	r0, #25
 800099a:	f000 fc0d 	bl	80011b8 <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000b8 	.word	0x200000b8
 80009a8:	2000001c 	.word	0x2000001c
 80009ac:	200000b0 	.word	0x200000b0

080009b0 <switchMode4>:

void switchMode4() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <switchMode4+0x24>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <switchMode4+0x28>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <switchMode4+0x2c>)
 80009c0:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 80009c2:	2064      	movs	r0, #100	; 0x64
 80009c4:	f000 fbe4 	bl	8001190 <setTimer2>
	setTimer4(25);
 80009c8:	2019      	movs	r0, #25
 80009ca:	f000 fbf5 	bl	80011b8 <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000b8 	.word	0x200000b8
 80009d8:	20000020 	.word	0x20000020
 80009dc:	200000b0 	.word	0x200000b0

080009e0 <fsm_manual_run>:

void fsm_manual_run() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
	switch(status) {
 80009e6:	4b8f      	ldr	r3, [pc, #572]	; (8000c24 <fsm_manual_run+0x244>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	3b0a      	subs	r3, #10
 80009ec:	2b05      	cmp	r3, #5
 80009ee:	f200 8184 	bhi.w	8000cfa <fsm_manual_run+0x31a>
 80009f2:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <fsm_manual_run+0x18>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a11 	.word	0x08000a11
 80009fc:	08000af7 	.word	0x08000af7
 8000a00:	08000be1 	.word	0x08000be1
 8000a04:	08000a53 	.word	0x08000a53
 8000a08:	08000b39 	.word	0x08000b39
 8000a0c:	08000c55 	.word	0x08000c55

	case RED_MAN:
		displayLed(RED_MAN);
 8000a10:	200a      	movs	r0, #10
 8000a12:	f7ff fc95 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000a16:	4b84      	ldr	r3, [pc, #528]	; (8000c28 <fsm_manual_run+0x248>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d102      	bne.n	8000a24 <fsm_manual_run+0x44>
			setTimer2(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f000 fbb6 	bl	8001190 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff fbcd 	bl	80001c4 <isButtonPressed>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <fsm_manual_run+0x54>
			switchMode3();
 8000a30:	f7ff ffa6 	bl	8000980 <switchMode3>
		}

		if(isButtonPressed(1)) {
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fbc5 	bl	80001c4 <isButtonPressed>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 815e 	beq.w	8000cfe <fsm_manual_run+0x31e>
			status = RED_MAN_MODIFY;
 8000a42:	4b78      	ldr	r3, [pc, #480]	; (8000c24 <fsm_manual_run+0x244>)
 8000a44:	220d      	movs	r2, #13
 8000a46:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 8000a48:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <fsm_manual_run+0x24c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a78      	ldr	r2, [pc, #480]	; (8000c30 <fsm_manual_run+0x250>)
 8000a4e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 8000a50:	e155      	b.n	8000cfe <fsm_manual_run+0x31e>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f7ff fc74 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff fbb3 	bl	80001c4 <isButtonPressed>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <fsm_manual_run+0x8a>
			status = RED_MAN;
 8000a64:	4b6f      	ldr	r3, [pc, #444]	; (8000c24 <fsm_manual_run+0x244>)
 8000a66:	220a      	movs	r2, #10
 8000a68:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fbaa 	bl	80001c4 <isButtonPressed>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d01b      	beq.n	8000aae <fsm_manual_run+0xce>
			timerMan++;
 8000a76:	4b6e      	ldr	r3, [pc, #440]	; (8000c30 <fsm_manual_run+0x250>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a6c      	ldr	r2, [pc, #432]	; (8000c30 <fsm_manual_run+0x250>)
 8000a7e:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 8000a80:	4b6b      	ldr	r3, [pc, #428]	; (8000c30 <fsm_manual_run+0x250>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	496b      	ldr	r1, [pc, #428]	; (8000c34 <fsm_manual_run+0x254>)
 8000a88:	486b      	ldr	r0, [pc, #428]	; (8000c38 <fsm_manual_run+0x258>)
 8000a8a:	f002 fdbb 	bl	8003604 <siprintf>
 8000a8e:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a98:	4967      	ldr	r1, [pc, #412]	; (8000c38 <fsm_manual_run+0x258>)
 8000a9a:	4868      	ldr	r0, [pc, #416]	; (8000c3c <fsm_manual_run+0x25c>)
 8000a9c:	f002 fc00 	bl	80032a0 <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 8000aa0:	4b63      	ldr	r3, [pc, #396]	; (8000c30 <fsm_manual_run+0x250>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b63      	cmp	r3, #99	; 0x63
 8000aa6:	dd02      	ble.n	8000aae <fsm_manual_run+0xce>
 8000aa8:	4b61      	ldr	r3, [pc, #388]	; (8000c30 <fsm_manual_run+0x250>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff fb88 	bl	80001c4 <isButtonPressed>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 8123 	beq.w	8000d02 <fsm_manual_run+0x322>
			status = INIT;
 8000abc:	4b59      	ldr	r3, [pc, #356]	; (8000c24 <fsm_manual_run+0x244>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 8000ac2:	4a5f      	ldr	r2, [pc, #380]	; (8000c40 <fsm_manual_run+0x260>)
 8000ac4:	495f      	ldr	r1, [pc, #380]	; (8000c44 <fsm_manual_run+0x264>)
 8000ac6:	485c      	ldr	r0, [pc, #368]	; (8000c38 <fsm_manual_run+0x258>)
 8000ac8:	f002 fd9c 	bl	8003604 <siprintf>
 8000acc:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	4958      	ldr	r1, [pc, #352]	; (8000c38 <fsm_manual_run+0x258>)
 8000ad8:	4858      	ldr	r0, [pc, #352]	; (8000c3c <fsm_manual_run+0x25c>)
 8000ada:	f002 fbe1 	bl	80032a0 <HAL_UART_Transmit>
			redTimer = timerMan;
 8000ade:	4b54      	ldr	r3, [pc, #336]	; (8000c30 <fsm_manual_run+0x250>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a52      	ldr	r2, [pc, #328]	; (8000c2c <fsm_manual_run+0x24c>)
 8000ae4:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 8000ae6:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <fsm_manual_run+0x24c>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <fsm_manual_run+0x268>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	4a56      	ldr	r2, [pc, #344]	; (8000c4c <fsm_manual_run+0x26c>)
 8000af2:	6013      	str	r3, [r2, #0]
		}

		break;
 8000af4:	e105      	b.n	8000d02 <fsm_manual_run+0x322>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 8000af6:	200b      	movs	r0, #11
 8000af8:	f7ff fc22 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <fsm_manual_run+0x248>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d102      	bne.n	8000b0a <fsm_manual_run+0x12a>
			setTimer2(100);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f000 fb43 	bl	8001190 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f7ff fb5a 	bl	80001c4 <isButtonPressed>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <fsm_manual_run+0x13a>
			switchMode4();
 8000b16:	f7ff ff4b 	bl	80009b0 <switchMode4>
		}

		if(isButtonPressed(1)) {
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fb52 	bl	80001c4 <isButtonPressed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80ef 	beq.w	8000d06 <fsm_manual_run+0x326>
			status = YELLOW_MAN_MODIFY;
 8000b28:	4b3e      	ldr	r3, [pc, #248]	; (8000c24 <fsm_manual_run+0x244>)
 8000b2a:	220e      	movs	r2, #14
 8000b2c:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 8000b2e:	4b46      	ldr	r3, [pc, #280]	; (8000c48 <fsm_manual_run+0x268>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a3f      	ldr	r2, [pc, #252]	; (8000c30 <fsm_manual_run+0x250>)
 8000b34:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 8000b36:	e0e6      	b.n	8000d06 <fsm_manual_run+0x326>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f7ff fc01 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f7ff fb40 	bl	80001c4 <isButtonPressed>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d002      	beq.n	8000b50 <fsm_manual_run+0x170>
			status = YELLOW_MAN;
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <fsm_manual_run+0x244>)
 8000b4c:	220b      	movs	r2, #11
 8000b4e:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fb37 	bl	80001c4 <isButtonPressed>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d01d      	beq.n	8000b98 <fsm_manual_run+0x1b8>
			timerMan++;
 8000b5c:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <fsm_manual_run+0x250>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	3301      	adds	r3, #1
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <fsm_manual_run+0x250>)
 8000b64:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 8000b66:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <fsm_manual_run+0x250>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4938      	ldr	r1, [pc, #224]	; (8000c50 <fsm_manual_run+0x270>)
 8000b6e:	4832      	ldr	r0, [pc, #200]	; (8000c38 <fsm_manual_run+0x258>)
 8000b70:	f002 fd48 	bl	8003604 <siprintf>
 8000b74:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	492e      	ldr	r1, [pc, #184]	; (8000c38 <fsm_manual_run+0x258>)
 8000b80:	482e      	ldr	r0, [pc, #184]	; (8000c3c <fsm_manual_run+0x25c>)
 8000b82:	f002 fb8d 	bl	80032a0 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <fsm_manual_run+0x250>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <fsm_manual_run+0x24c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	db02      	blt.n	8000b98 <fsm_manual_run+0x1b8>
 8000b92:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <fsm_manual_run+0x250>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f7ff fb13 	bl	80001c4 <isButtonPressed>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	f000 80b2 	beq.w	8000d0a <fsm_manual_run+0x32a>
			status = INIT;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <fsm_manual_run+0x244>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 8000bac:	4a24      	ldr	r2, [pc, #144]	; (8000c40 <fsm_manual_run+0x260>)
 8000bae:	4925      	ldr	r1, [pc, #148]	; (8000c44 <fsm_manual_run+0x264>)
 8000bb0:	4821      	ldr	r0, [pc, #132]	; (8000c38 <fsm_manual_run+0x258>)
 8000bb2:	f002 fd27 	bl	8003604 <siprintf>
 8000bb6:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc0:	491d      	ldr	r1, [pc, #116]	; (8000c38 <fsm_manual_run+0x258>)
 8000bc2:	481e      	ldr	r0, [pc, #120]	; (8000c3c <fsm_manual_run+0x25c>)
 8000bc4:	f002 fb6c 	bl	80032a0 <HAL_UART_Transmit>
			yellowTimer = timerMan;
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <fsm_manual_run+0x250>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <fsm_manual_run+0x268>)
 8000bce:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <fsm_manual_run+0x24c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <fsm_manual_run+0x268>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <fsm_manual_run+0x26c>)
 8000bdc:	6013      	str	r3, [r2, #0]
		}
		break;
 8000bde:	e094      	b.n	8000d0a <fsm_manual_run+0x32a>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8000be0:	200c      	movs	r0, #12
 8000be2:	f7ff fbad 	bl	8000340 <displayLed>

		if(timer2_flag == 1) {
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <fsm_manual_run+0x248>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d102      	bne.n	8000bf4 <fsm_manual_run+0x214>
			setTimer2(100);
 8000bee:	2064      	movs	r0, #100	; 0x64
 8000bf0:	f000 face 	bl	8001190 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fae5 	bl	80001c4 <isButtonPressed>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <fsm_manual_run+0x226>
			status = INIT;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <fsm_manual_run+0x244>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fadc 	bl	80001c4 <isButtonPressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d07d      	beq.n	8000d0e <fsm_manual_run+0x32e>
			status = GREEN_MAN_MODIFY;
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <fsm_manual_run+0x244>)
 8000c14:	220f      	movs	r2, #15
 8000c16:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <fsm_manual_run+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <fsm_manual_run+0x250>)
 8000c1e:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 8000c20:	e075      	b.n	8000d0e <fsm_manual_run+0x32e>
 8000c22:	bf00      	nop
 8000c24:	200000b8 	.word	0x200000b8
 8000c28:	20000134 	.word	0x20000134
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	20000158 	.word	0x20000158
 8000c34:	08003f60 	.word	0x08003f60
 8000c38:	200000c4 	.word	0x200000c4
 8000c3c:	20000258 	.word	0x20000258
 8000c40:	08003f74 	.word	0x08003f74
 8000c44:	08003f88 	.word	0x08003f88
 8000c48:	2000001c 	.word	0x2000001c
 8000c4c:	20000020 	.word	0x20000020
 8000c50:	08003f90 	.word	0x08003f90
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8000c54:	200c      	movs	r0, #12
 8000c56:	f7ff fb73 	bl	8000340 <displayLed>

		if(isButtonPressed(0)) {
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f7ff fab2 	bl	80001c4 <isButtonPressed>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <fsm_manual_run+0x28c>
			status = GREEN_MAN;
 8000c66:	4b2d      	ldr	r3, [pc, #180]	; (8000d1c <fsm_manual_run+0x33c>)
 8000c68:	220c      	movs	r2, #12
 8000c6a:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff faa9 	bl	80001c4 <isButtonPressed>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d01d      	beq.n	8000cb4 <fsm_manual_run+0x2d4>
			timerMan++;
 8000c78:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <fsm_manual_run+0x340>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <fsm_manual_run+0x340>)
 8000c80:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <fsm_manual_run+0x340>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	461a      	mov	r2, r3
 8000c88:	4926      	ldr	r1, [pc, #152]	; (8000d24 <fsm_manual_run+0x344>)
 8000c8a:	4827      	ldr	r0, [pc, #156]	; (8000d28 <fsm_manual_run+0x348>)
 8000c8c:	f002 fcba 	bl	8003604 <siprintf>
 8000c90:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	4923      	ldr	r1, [pc, #140]	; (8000d28 <fsm_manual_run+0x348>)
 8000c9c:	4823      	ldr	r0, [pc, #140]	; (8000d2c <fsm_manual_run+0x34c>)
 8000c9e:	f002 faff 	bl	80032a0 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <fsm_manual_run+0x340>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <fsm_manual_run+0x350>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	db02      	blt.n	8000cb4 <fsm_manual_run+0x2d4>
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <fsm_manual_run+0x340>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f7ff fa85 	bl	80001c4 <isButtonPressed>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d028      	beq.n	8000d12 <fsm_manual_run+0x332>
			status = INIT;
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <fsm_manual_run+0x33c>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <fsm_manual_run+0x354>)
 8000cc8:	491b      	ldr	r1, [pc, #108]	; (8000d38 <fsm_manual_run+0x358>)
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <fsm_manual_run+0x348>)
 8000ccc:	f002 fc9a 	bl	8003604 <siprintf>
 8000cd0:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	4913      	ldr	r1, [pc, #76]	; (8000d28 <fsm_manual_run+0x348>)
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <fsm_manual_run+0x34c>)
 8000cde:	f002 fadf 	bl	80032a0 <HAL_UART_Transmit>
			greenTimer = timerMan;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <fsm_manual_run+0x340>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a15      	ldr	r2, [pc, #84]	; (8000d3c <fsm_manual_run+0x35c>)
 8000ce8:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <fsm_manual_run+0x350>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <fsm_manual_run+0x35c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <fsm_manual_run+0x360>)
 8000cf6:	6013      	str	r3, [r2, #0]
		}
		break;
 8000cf8:	e00b      	b.n	8000d12 <fsm_manual_run+0x332>
	default:
		break;
 8000cfa:	bf00      	nop
 8000cfc:	e00a      	b.n	8000d14 <fsm_manual_run+0x334>
		break;
 8000cfe:	bf00      	nop
 8000d00:	e008      	b.n	8000d14 <fsm_manual_run+0x334>
		break;
 8000d02:	bf00      	nop
 8000d04:	e006      	b.n	8000d14 <fsm_manual_run+0x334>
		break;
 8000d06:	bf00      	nop
 8000d08:	e004      	b.n	8000d14 <fsm_manual_run+0x334>
		break;
 8000d0a:	bf00      	nop
 8000d0c:	e002      	b.n	8000d14 <fsm_manual_run+0x334>
		break;
 8000d0e:	bf00      	nop
 8000d10:	e000      	b.n	8000d14 <fsm_manual_run+0x334>
		break;
 8000d12:	bf00      	nop
	}
};
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000b8 	.word	0x200000b8
 8000d20:	20000158 	.word	0x20000158
 8000d24:	08003fa4 	.word	0x08003fa4
 8000d28:	200000c4 	.word	0x200000c4
 8000d2c:	20000258 	.word	0x20000258
 8000d30:	20000018 	.word	0x20000018
 8000d34:	08003f74 	.word	0x08003f74
 8000d38:	08003f88 	.word	0x08003f88
 8000d3c:	20000020 	.word	0x20000020
 8000d40:	2000001c 	.word	0x2000001c

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 fc66 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f81c 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 f94c 	bl	8000fec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d54:	f000 f920 	bl	8000f98 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000d58:	f000 f858 	bl	8000e0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d5c:	f000 f8a4 	bl	8000ea8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8000d60:	4807      	ldr	r0, [pc, #28]	; (8000d80 <main+0x3c>)
 8000d62:	f001 fbfd 	bl	8002560 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 8000d66:	f7ff f9f1 	bl	800014c <initStateForButton>
  status = INIT;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <main+0x40>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8000d70:	f7ff fc62 	bl	8000638 <fsm_automatic_run>
	  fsm_manual_run();
 8000d74:	f7ff fe34 	bl	80009e0 <fsm_manual_run>
	  fsm_pedestrian();
 8000d78:	f7ff fc2e 	bl	80005d8 <fsm_pedestrian>
  {
 8000d7c:	e7f8      	b.n	8000d70 <main+0x2c>
 8000d7e:	bf00      	nop
 8000d80:	20000210 	.word	0x20000210
 8000d84:	200000b8 	.word	0x200000b8

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f002 fc2c 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2310      	movs	r3, #16
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dbe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f107 0318 	add.w	r3, r7, #24
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 ff6b 	bl	8001ca4 <HAL_RCC_OscConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000dd4:	f000 f9c2 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd8:	230f      	movs	r3, #15
 8000dda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2102      	movs	r1, #2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 f9d6 	bl	80021a4 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000dfe:	f000 f9ad 	bl	800115c <Error_Handler>
  }
}
 8000e02:	bf00      	nop
 8000e04:	3740      	adds	r7, #64	; 0x40
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	463b      	mov	r3, r7
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e32:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e40:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e52:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e54:	f001 fb34 	bl	80024c0 <HAL_TIM_Base_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e5e:	f000 f97d 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e70:	f001 fdea 	bl	8002a48 <HAL_TIM_ConfigClockSource>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e7a:	f000 f96f 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <MX_TIM2_Init+0x98>)
 8000e8c:	f002 f948 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e96:	f000 f961 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000210 	.word	0x20000210

08000ea8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	f107 0320 	add.w	r3, r7, #32
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000eda:	4a2e      	ldr	r2, [pc, #184]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000ee0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ee4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 624;
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000eee:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000ef2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b26      	ldr	r3, [pc, #152]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f00:	4823      	ldr	r0, [pc, #140]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000f02:	f001 fadd 	bl	80024c0 <HAL_TIM_Base_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f0c:	f000 f926 	bl	800115c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481c      	ldr	r0, [pc, #112]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000f1e:	f001 fd93 	bl	8002a48 <HAL_TIM_ConfigClockSource>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f28:	f000 f918 	bl	800115c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f2c:	4818      	ldr	r0, [pc, #96]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000f2e:	f001 fb69 	bl	8002604 <HAL_TIM_PWM_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f38:	f000 f910 	bl	800115c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4811      	ldr	r0, [pc, #68]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000f4c:	f002 f8e8 	bl	8003120 <HAL_TIMEx_MasterConfigSynchronization>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f56:	f000 f901 	bl	800115c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	; 0x60
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000f72:	f001 fca7 	bl	80028c4 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f7c:	f000 f8ee 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <MX_TIM3_Init+0xe8>)
 8000f82:	f000 fa3d 	bl	8001400 <HAL_TIM_MspPostInit>

}
 8000f86:	bf00      	nop
 8000f88:	3738      	adds	r7, #56	; 0x38
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200001c8 	.word	0x200001c8
 8000f94:	40000400 	.word	0x40000400

08000f98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_USART2_UART_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	f002 f916 	bl	8003200 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f000 f8bf 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000258 	.word	0x20000258
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <MX_GPIO_Init+0x144>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	4a4a      	ldr	r2, [pc, #296]	; (8001130 <MX_GPIO_Init+0x144>)
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	6193      	str	r3, [r2, #24]
 800100c:	4b48      	ldr	r3, [pc, #288]	; (8001130 <MX_GPIO_Init+0x144>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b45      	ldr	r3, [pc, #276]	; (8001130 <MX_GPIO_Init+0x144>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a44      	ldr	r2, [pc, #272]	; (8001130 <MX_GPIO_Init+0x144>)
 800101e:	f043 0320 	orr.w	r3, r3, #32
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b42      	ldr	r3, [pc, #264]	; (8001130 <MX_GPIO_Init+0x144>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0320 	and.w	r3, r3, #32
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <MX_GPIO_Init+0x144>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a3e      	ldr	r2, [pc, #248]	; (8001130 <MX_GPIO_Init+0x144>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <MX_GPIO_Init+0x144>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b39      	ldr	r3, [pc, #228]	; (8001130 <MX_GPIO_Init+0x144>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a38      	ldr	r2, [pc, #224]	; (8001130 <MX_GPIO_Init+0x144>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <MX_GPIO_Init+0x144>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001066:	4833      	ldr	r0, [pc, #204]	; (8001134 <MX_GPIO_Init+0x148>)
 8001068:	f000 fde1 	bl	8001c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001072:	4831      	ldr	r0, [pc, #196]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001074:	f000 fddb 	bl	8001c2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	4b2f      	ldr	r3, [pc, #188]	; (800113c <MX_GPIO_Init+0x150>)
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	482c      	ldr	r0, [pc, #176]	; (8001140 <MX_GPIO_Init+0x154>)
 800108e:	f000 fc33 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 8001092:	2301      	movs	r3, #1
 8001094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	4619      	mov	r1, r3
 80010a4:	4823      	ldr	r0, [pc, #140]	; (8001134 <MX_GPIO_Init+0x148>)
 80010a6:	f000 fc27 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 80010aa:	2312      	movs	r3, #18
 80010ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4619      	mov	r1, r3
 80010bc:	481d      	ldr	r0, [pc, #116]	; (8001134 <MX_GPIO_Init+0x148>)
 80010be:	f000 fc1b 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 80010c2:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80010c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	4619      	mov	r1, r3
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <MX_GPIO_Init+0x148>)
 80010dc:	f000 fc0c 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 80010e0:	2301      	movs	r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0310 	add.w	r3, r7, #16
 80010f0:	4619      	mov	r1, r3
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_GPIO_Init+0x14c>)
 80010f4:	f000 fc00 	bl	80018f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80010f8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80010fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2302      	movs	r3, #2
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <MX_GPIO_Init+0x14c>)
 8001112:	f000 fbf1 	bl	80018f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2028      	movs	r0, #40	; 0x28
 800111c:	f000 fbb5 	bl	800188a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001120:	2028      	movs	r0, #40	; 0x28
 8001122:	f000 fbce 	bl	80018c2 <HAL_NVIC_EnableIRQ>

}
 8001126:	bf00      	nop
 8001128:	3720      	adds	r7, #32
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000
 8001134:	40010800 	.word	0x40010800
 8001138:	40010c00 	.word	0x40010c00
 800113c:	10110000 	.word	0x10110000
 8001140:	40011000 	.word	0x40011000

08001144 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	 timerRun();
 800114c:	f000 f870 	bl	8001230 <timerRun>
	 getKeyInput();
 8001150:	f7ff f862 	bl	8000218 <getKeyInput>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	e7fe      	b.n	8001164 <Error_Handler+0x8>
	...

08001168 <setTimer1>:
int timer6_counter = 0;
int timer6_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001170:	4a05      	ldr	r2, [pc, #20]	; (8001188 <setTimer1+0x20>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <setTimer1+0x24>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000128 	.word	0x20000128
 800118c:	2000012c 	.word	0x2000012c

08001190 <setTimer2>:

void setTimer2(int duration) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001198:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <setTimer2+0x20>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <setTimer2+0x24>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000130 	.word	0x20000130
 80011b4:	20000134 	.word	0x20000134

080011b8 <setTimer4>:
void setTimer3(int duration) {
	timer3_counter = duration;
	timer3_flag = 0;
}

void setTimer4(int duration) {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 80011c0:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <setTimer4+0x20>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80011c6:	4b05      	ldr	r3, [pc, #20]	; (80011dc <setTimer4+0x24>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000140 	.word	0x20000140
 80011dc:	20000144 	.word	0x20000144

080011e0 <setTimer5>:

void setTimer5(int duration) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <setTimer5+0x20>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <setTimer5+0x24>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000148 	.word	0x20000148
 8001204:	2000014c 	.word	0x2000014c

08001208 <setTimer6>:
void setTimer6(int duration) {
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 8001210:	4a05      	ldr	r2, [pc, #20]	; (8001228 <setTimer6+0x20>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <setTimer6+0x24>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000150 	.word	0x20000150
 800122c:	20000154 	.word	0x20000154

08001230 <timerRun>:
void timerRun() {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <timerRun+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	dd0b      	ble.n	8001254 <timerRun+0x24>
		timer1_counter--;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <timerRun+0xcc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3b01      	subs	r3, #1
 8001242:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <timerRun+0xcc>)
 8001244:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <timerRun+0xcc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	dc02      	bgt.n	8001254 <timerRun+0x24>
			timer1_flag = 1;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <timerRun+0xd0>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <timerRun+0xd4>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	dd0b      	ble.n	8001274 <timerRun+0x44>
		timer2_counter--;
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <timerRun+0xd4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <timerRun+0xd4>)
 8001264:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <timerRun+0xd4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	dc02      	bgt.n	8001274 <timerRun+0x44>
			timer2_flag = 1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <timerRun+0xd8>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <timerRun+0xdc>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	dd0b      	ble.n	8001294 <timerRun+0x64>
		timer3_counter--;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <timerRun+0xdc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <timerRun+0xdc>)
 8001284:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <timerRun+0xdc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dc02      	bgt.n	8001294 <timerRun+0x64>
			timer3_flag = 1;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <timerRun+0xe0>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <timerRun+0xe4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	dd0b      	ble.n	80012b4 <timerRun+0x84>
		timer4_counter--;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <timerRun+0xe4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <timerRun+0xe4>)
 80012a4:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <timerRun+0xe4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc02      	bgt.n	80012b4 <timerRun+0x84>
			timer4_flag = 1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <timerRun+0xe8>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 80012b4:	4b19      	ldr	r3, [pc, #100]	; (800131c <timerRun+0xec>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dd0b      	ble.n	80012d4 <timerRun+0xa4>
		timer5_counter--;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <timerRun+0xec>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <timerRun+0xec>)
 80012c4:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <timerRun+0xec>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	dc02      	bgt.n	80012d4 <timerRun+0xa4>
			timer5_flag = 1;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <timerRun+0xf0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0) {
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <timerRun+0xf4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd0b      	ble.n	80012f4 <timerRun+0xc4>
			timer6_counter--;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <timerRun+0xf4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4a10      	ldr	r2, [pc, #64]	; (8001324 <timerRun+0xf4>)
 80012e4:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0) {
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <timerRun+0xf4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dc02      	bgt.n	80012f4 <timerRun+0xc4>
				timer6_flag = 1;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <timerRun+0xf8>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
			}
	}
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000128 	.word	0x20000128
 8001300:	2000012c 	.word	0x2000012c
 8001304:	20000130 	.word	0x20000130
 8001308:	20000134 	.word	0x20000134
 800130c:	20000138 	.word	0x20000138
 8001310:	2000013c 	.word	0x2000013c
 8001314:	20000140 	.word	0x20000140
 8001318:	20000144 	.word	0x20000144
 800131c:	20000148 	.word	0x20000148
 8001320:	2000014c 	.word	0x2000014c
 8001324:	20000150 	.word	0x20000150
 8001328:	20000154 	.word	0x20000154

0800132c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_MspInit+0x5c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_MspInit+0x5c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x5c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x5c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x60>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_MspInit+0x60>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d114      	bne.n	80013cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_TIM_Base_MspInit+0x68>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4a14      	ldr	r2, [pc, #80]	; (80013f8 <HAL_TIM_Base_MspInit+0x68>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	61d3      	str	r3, [r2, #28]
 80013ae:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_TIM_Base_MspInit+0x68>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201c      	movs	r0, #28
 80013c0:	f000 fa63 	bl	800188a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013c4:	201c      	movs	r0, #28
 80013c6:	f000 fa7c 	bl	80018c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ca:	e010      	b.n	80013ee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x6c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10b      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_TIM_Base_MspInit+0x68>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_TIM_Base_MspInit+0x68>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_TIM_Base_MspInit+0x68>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40000400 	.word	0x40000400

08001400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <HAL_TIM_MspPostInit+0x58>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d117      	bne.n	8001450 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_TIM_MspPostInit+0x5c>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a0d      	ldr	r2, [pc, #52]	; (800145c <HAL_TIM_MspPostInit+0x5c>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_TIM_MspPostInit+0x5c>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 8001438:	2340      	movs	r3, #64	; 0x40
 800143a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2302      	movs	r3, #2
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0310 	add.w	r3, r7, #16
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <HAL_TIM_MspPostInit+0x60>)
 800144c:	f000 fa54 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40000400 	.word	0x40000400
 800145c:	40021000 	.word	0x40021000
 8001460:	40010800 	.word	0x40010800

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <HAL_UART_MspInit+0x70>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d123      	bne.n	80014cc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <HAL_UART_MspInit+0x74>)
 8001486:	69db      	ldr	r3, [r3, #28]
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_UART_MspInit+0x74>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	61d3      	str	r3, [r2, #28]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_UART_MspInit+0x74>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_UART_MspInit+0x74>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_UART_MspInit+0x74>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_UART_MspInit+0x74>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014b4:	230c      	movs	r3, #12
 80014b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2302      	movs	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_MspInit+0x78>)
 80014c8:	f000 fa16 	bl	80018f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40010800 	.word	0x40010800

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <NMI_Handler+0x4>

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001526:	f000 f8bd 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM2_IRQHandler+0x10>)
 8001536:	f001 f8bd 	bl	80026b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000210 	.word	0x20000210

08001544 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800154c:	f000 fb88 	bl	8001c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f002 f80c 	bl	80035a0 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20005000 	.word	0x20005000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	2000015c 	.word	0x2000015c
 80015bc:	200002b8 	.word	0x200002b8

080015c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015cc:	f7ff fff8 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015d2:	490c      	ldr	r1, [pc, #48]	; (8001604 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015d4:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a09      	ldr	r2, [pc, #36]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015e8:	4c09      	ldr	r4, [pc, #36]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015f6:	f001 ffd9 	bl	80035ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fa:	f7ff fba3 	bl	8000d44 <main>
  bx lr
 80015fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001608:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 800160c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001610:	200002b4 	.word	0x200002b4

08001614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_2_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x28>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x28>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f923 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fe7a 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f93b 	bl	80018de <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f903 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000024 	.word	0x20000024
 800169c:	2000002c 	.word	0x2000002c
 80016a0:	20000028 	.word	0x20000028

080016a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_IncTick+0x1c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_IncTick+0x20>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_IncTick+0x20>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	2000002c 	.word	0x2000002c
 80016c4:	200002a0 	.word	0x200002a0

080016c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <HAL_GetTick+0x10>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	200002a0 	.word	0x200002a0

080016dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f8:	4013      	ands	r3, r2
 80016fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800170c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <__NVIC_SetPriorityGrouping+0x44>)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	60d3      	str	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <__NVIC_GetPriorityGrouping+0x18>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	0a1b      	lsrs	r3, r3, #8
 800172e:	f003 0307 	and.w	r3, r3, #7
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0b      	blt.n	800176a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f003 021f 	and.w	r2, r3, #31
 8001758:	4906      	ldr	r1, [pc, #24]	; (8001774 <__NVIC_EnableIRQ+0x34>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	2001      	movs	r0, #1
 8001762:	fa00 f202 	lsl.w	r2, r0, r2
 8001766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff90 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff2d 	bl	80016dc <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff42 	bl	8001724 <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff90 	bl	80017cc <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5f 	bl	8001778 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff35 	bl	8001740 <__NVIC_EnableIRQ>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffa2 	bl	8001830 <SysTick_Config>
 80018ec:	4603      	mov	r3, r0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b08b      	sub	sp, #44	; 0x2c
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e169      	b.n	8001be0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800190c:	2201      	movs	r2, #1
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	429a      	cmp	r2, r3
 8001926:	f040 8158 	bne.w	8001bda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4a9a      	ldr	r2, [pc, #616]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d05e      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001934:	4a98      	ldr	r2, [pc, #608]	; (8001b98 <HAL_GPIO_Init+0x2a0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d875      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 800193a:	4a98      	ldr	r2, [pc, #608]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d058      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001940:	4a96      	ldr	r2, [pc, #600]	; (8001b9c <HAL_GPIO_Init+0x2a4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d86f      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 8001946:	4a96      	ldr	r2, [pc, #600]	; (8001ba0 <HAL_GPIO_Init+0x2a8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d052      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 800194c:	4a94      	ldr	r2, [pc, #592]	; (8001ba0 <HAL_GPIO_Init+0x2a8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d869      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 8001952:	4a94      	ldr	r2, [pc, #592]	; (8001ba4 <HAL_GPIO_Init+0x2ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d04c      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001958:	4a92      	ldr	r2, [pc, #584]	; (8001ba4 <HAL_GPIO_Init+0x2ac>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d863      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 800195e:	4a92      	ldr	r2, [pc, #584]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d046      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
 8001964:	4a90      	ldr	r2, [pc, #576]	; (8001ba8 <HAL_GPIO_Init+0x2b0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d85d      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 800196a:	2b12      	cmp	r3, #18
 800196c:	d82a      	bhi.n	80019c4 <HAL_GPIO_Init+0xcc>
 800196e:	2b12      	cmp	r3, #18
 8001970:	d859      	bhi.n	8001a26 <HAL_GPIO_Init+0x12e>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <HAL_GPIO_Init+0x80>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	080019f3 	.word	0x080019f3
 800197c:	080019cd 	.word	0x080019cd
 8001980:	080019df 	.word	0x080019df
 8001984:	08001a21 	.word	0x08001a21
 8001988:	08001a27 	.word	0x08001a27
 800198c:	08001a27 	.word	0x08001a27
 8001990:	08001a27 	.word	0x08001a27
 8001994:	08001a27 	.word	0x08001a27
 8001998:	08001a27 	.word	0x08001a27
 800199c:	08001a27 	.word	0x08001a27
 80019a0:	08001a27 	.word	0x08001a27
 80019a4:	08001a27 	.word	0x08001a27
 80019a8:	08001a27 	.word	0x08001a27
 80019ac:	08001a27 	.word	0x08001a27
 80019b0:	08001a27 	.word	0x08001a27
 80019b4:	08001a27 	.word	0x08001a27
 80019b8:	08001a27 	.word	0x08001a27
 80019bc:	080019d5 	.word	0x080019d5
 80019c0:	080019e9 	.word	0x080019e9
 80019c4:	4a79      	ldr	r2, [pc, #484]	; (8001bac <HAL_GPIO_Init+0x2b4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ca:	e02c      	b.n	8001a26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e029      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	3304      	adds	r3, #4
 80019da:	623b      	str	r3, [r7, #32]
          break;
 80019dc:	e024      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	3308      	adds	r3, #8
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e01f      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	330c      	adds	r3, #12
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e01a      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019fa:	2304      	movs	r3, #4
 80019fc:	623b      	str	r3, [r7, #32]
          break;
 80019fe:	e013      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a08:	2308      	movs	r3, #8
 8001a0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	611a      	str	r2, [r3, #16]
          break;
 8001a12:	e009      	b.n	8001a28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a14:	2308      	movs	r3, #8
 8001a16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	615a      	str	r2, [r3, #20]
          break;
 8001a1e:	e003      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a20:	2300      	movs	r3, #0
 8001a22:	623b      	str	r3, [r7, #32]
          break;
 8001a24:	e000      	b.n	8001a28 <HAL_GPIO_Init+0x130>
          break;
 8001a26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2bff      	cmp	r3, #255	; 0xff
 8001a2c:	d801      	bhi.n	8001a32 <HAL_GPIO_Init+0x13a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	e001      	b.n	8001a36 <HAL_GPIO_Init+0x13e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2bff      	cmp	r3, #255	; 0xff
 8001a3c:	d802      	bhi.n	8001a44 <HAL_GPIO_Init+0x14c>
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	e002      	b.n	8001a4a <HAL_GPIO_Init+0x152>
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	3b08      	subs	r3, #8
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	210f      	movs	r1, #15
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	fa01 f303 	lsl.w	r3, r1, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	6a39      	ldr	r1, [r7, #32]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	fa01 f303 	lsl.w	r3, r1, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 80b1 	beq.w	8001bda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a4c      	ldr	r2, [pc, #304]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b4a      	ldr	r3, [pc, #296]	; (8001bb0 <HAL_GPIO_Init+0x2b8>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a90:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2bc>)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	220f      	movs	r2, #15
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a40      	ldr	r2, [pc, #256]	; (8001bb8 <HAL_GPIO_Init+0x2c0>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d013      	beq.n	8001ae4 <HAL_GPIO_Init+0x1ec>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a3f      	ldr	r2, [pc, #252]	; (8001bbc <HAL_GPIO_Init+0x2c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_GPIO_Init+0x1e8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3e      	ldr	r2, [pc, #248]	; (8001bc0 <HAL_GPIO_Init+0x2c8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d007      	beq.n	8001adc <HAL_GPIO_Init+0x1e4>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3d      	ldr	r2, [pc, #244]	; (8001bc4 <HAL_GPIO_Init+0x2cc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d101      	bne.n	8001ad8 <HAL_GPIO_Init+0x1e0>
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e006      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001ad8:	2304      	movs	r3, #4
 8001ada:	e004      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001adc:	2302      	movs	r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_GPIO_Init+0x1ee>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	0092      	lsls	r2, r2, #2
 8001aee:	4093      	lsls	r3, r2
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001af6:	492f      	ldr	r1, [pc, #188]	; (8001bb4 <HAL_GPIO_Init+0x2bc>)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	089b      	lsrs	r3, r3, #2
 8001afc:	3302      	adds	r3, #2
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d006      	beq.n	8001b1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	492c      	ldr	r1, [pc, #176]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	4928      	ldr	r1, [pc, #160]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b38:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4922      	ldr	r1, [pc, #136]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	60cb      	str	r3, [r1, #12]
 8001b44:	e006      	b.n	8001b54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b46:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	491e      	ldr	r1, [pc, #120]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4918      	ldr	r1, [pc, #96]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4914      	ldr	r1, [pc, #80]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b78:	4013      	ands	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d021      	beq.n	8001bcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	490e      	ldr	r1, [pc, #56]	; (8001bc8 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e021      	b.n	8001bda <HAL_GPIO_Init+0x2e2>
 8001b96:	bf00      	nop
 8001b98:	10320000 	.word	0x10320000
 8001b9c:	10310000 	.word	0x10310000
 8001ba0:	10220000 	.word	0x10220000
 8001ba4:	10210000 	.word	0x10210000
 8001ba8:	10120000 	.word	0x10120000
 8001bac:	10110000 	.word	0x10110000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40011400 	.word	0x40011400
 8001bc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_GPIO_Init+0x304>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4909      	ldr	r1, [pc, #36]	; (8001bfc <HAL_GPIO_Init+0x304>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	3301      	adds	r3, #1
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f47f ae8e 	bne.w	800190c <HAL_GPIO_Init+0x14>
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	372c      	adds	r7, #44	; 0x2c
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c44:	887a      	ldrh	r2, [r7, #2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	041a      	lsls	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	611a      	str	r2, [r3, #16]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d006      	beq.n	8001c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f806 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40010400 	.word	0x40010400

08001c90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e26c      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8087 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc4:	4b92      	ldr	r3, [pc, #584]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d00c      	beq.n	8001cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd0:	4b8f      	ldr	r3, [pc, #572]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 030c 	and.w	r3, r3, #12
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d112      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5e>
 8001cdc:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d10b      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cea:	4b89      	ldr	r3, [pc, #548]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d06c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x12c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d168      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e246      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x76>
 8001d0c:	4b80      	ldr	r3, [pc, #512]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a7f      	ldr	r2, [pc, #508]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	e02e      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x98>
 8001d22:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e01d      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0xbc>
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a71      	ldr	r2, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5c:	6013      	str	r3, [r2, #0]
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0xd4>
 8001d60:	4b6b      	ldr	r3, [pc, #428]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a6a      	ldr	r2, [pc, #424]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a67      	ldr	r2, [pc, #412]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d013      	beq.n	8001da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7ff fca2 	bl	80016c8 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff fc9e 	bl	80016c8 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e1fa      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0xe4>
 8001da6:	e014      	b.n	8001dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc8e 	bl	80016c8 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff fc8a 	bl	80016c8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1e6      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x10c>
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d063      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dde:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00b      	beq.n	8001e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dea:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d11c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x18c>
 8001df6:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d116      	bne.n	8001e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e02:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_RCC_OscConfig+0x176>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e1ba      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4939      	ldr	r1, [pc, #228]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2e:	e03a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e38:	4b36      	ldr	r3, [pc, #216]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fc43 	bl	80016c8 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff fc3f 	bl	80016c8 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e19b      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f0      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4927      	ldr	r1, [pc, #156]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e015      	b.n	8001ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff fc22 	bl	80016c8 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff fc1e 	bl	80016c8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e17a      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03a      	beq.n	8001f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d019      	beq.n	8001eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fc02 	bl	80016c8 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fbfe 	bl	80016c8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e15a      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f000 facc 	bl	8002484 <RCC_Delay>
 8001eec:	e01c      	b.n	8001f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fbe8 	bl	80016c8 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efa:	e00f      	b.n	8001f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff fbe4 	bl	80016c8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d908      	bls.n	8001f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e140      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	42420000 	.word	0x42420000
 8001f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	4b9e      	ldr	r3, [pc, #632]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1e9      	bne.n	8001efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80a6 	beq.w	8002082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f3a:	4b97      	ldr	r3, [pc, #604]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10d      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	4b94      	ldr	r3, [pc, #592]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4a93      	ldr	r2, [pc, #588]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f50:	61d3      	str	r3, [r2, #28]
 8001f52:	4b91      	ldr	r3, [pc, #580]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	4b8e      	ldr	r3, [pc, #568]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d118      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6e:	4b8b      	ldr	r3, [pc, #556]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a8a      	ldr	r2, [pc, #552]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fba5 	bl	80016c8 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f82:	f7ff fba1 	bl	80016c8 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0fd      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f94:	4b81      	ldr	r3, [pc, #516]	; (800219c <HAL_RCC_OscConfig+0x4f8>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x312>
 8001fa8:	4b7b      	ldr	r3, [pc, #492]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a7a      	ldr	r2, [pc, #488]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	6213      	str	r3, [r2, #32]
 8001fb4:	e02d      	b.n	8002012 <HAL_RCC_OscConfig+0x36e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001fbe:	4b76      	ldr	r3, [pc, #472]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a75      	ldr	r2, [pc, #468]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b73      	ldr	r3, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a72      	ldr	r2, [pc, #456]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
 8001fd6:	e01c      	b.n	8002012 <HAL_RCC_OscConfig+0x36e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d10c      	bne.n	8001ffa <HAL_RCC_OscConfig+0x356>
 8001fe0:	4b6d      	ldr	r3, [pc, #436]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a6c      	ldr	r2, [pc, #432]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a69      	ldr	r2, [pc, #420]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	e00b      	b.n	8002012 <HAL_RCC_OscConfig+0x36e>
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a66      	ldr	r2, [pc, #408]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6213      	str	r3, [r2, #32]
 8002006:	4b64      	ldr	r3, [pc, #400]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	4a63      	ldr	r2, [pc, #396]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800200c:	f023 0304 	bic.w	r3, r3, #4
 8002010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d015      	beq.n	8002046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201a:	f7ff fb55 	bl	80016c8 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7ff fb51 	bl	80016c8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0ab      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	4b57      	ldr	r3, [pc, #348]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ee      	beq.n	8002022 <HAL_RCC_OscConfig+0x37e>
 8002044:	e014      	b.n	8002070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff fb3f 	bl	80016c8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204e:	f7ff fb3b 	bl	80016c8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	f241 3288 	movw	r2, #5000	; 0x1388
 800205c:	4293      	cmp	r3, r2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e095      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002064:	4b4c      	ldr	r3, [pc, #304]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1ee      	bne.n	800204e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d105      	bne.n	8002082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002076:	4b48      	ldr	r3, [pc, #288]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a47      	ldr	r2, [pc, #284]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8081 	beq.w	800218e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208c:	4b42      	ldr	r3, [pc, #264]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 030c 	and.w	r3, r3, #12
 8002094:	2b08      	cmp	r3, #8
 8002096:	d061      	beq.n	800215c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d146      	bne.n	800212e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_OscConfig+0x4fc>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fb0f 	bl	80016c8 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff fb0b 	bl	80016c8 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e067      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c0:	4b35      	ldr	r3, [pc, #212]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d108      	bne.n	80020e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d6:	4b30      	ldr	r3, [pc, #192]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	492d      	ldr	r1, [pc, #180]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a19      	ldr	r1, [r3, #32]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	430b      	orrs	r3, r1
 80020fa:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <HAL_RCC_OscConfig+0x4fc>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fadf 	bl	80016c8 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fadb 	bl	80016c8 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e037      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x46a>
 800212c:	e02f      	b.n	800218e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_RCC_OscConfig+0x4fc>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fac8 	bl	80016c8 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fac4 	bl	80016c8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e020      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x498>
 800215a:	e018      	b.n	800218e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e013      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000
 800219c:	40007000 	.word	0x40007000
 80021a0:	42420060 	.word	0x42420060

080021a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0d0      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d910      	bls.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 0207 	bic.w	r2, r3, #7
 80021ce:	4965      	ldr	r1, [pc, #404]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0b8      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d020      	beq.n	8002236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002200:	4b59      	ldr	r3, [pc, #356]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a58      	ldr	r2, [pc, #352]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800220a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002218:	4b53      	ldr	r3, [pc, #332]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4a52      	ldr	r2, [pc, #328]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	494d      	ldr	r1, [pc, #308]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d040      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e07f      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e073      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06b      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f023 0203 	bic.w	r2, r3, #3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4936      	ldr	r1, [pc, #216]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002294:	f7ff fa18 	bl	80016c8 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229c:	f7ff fa14 	bl	80016c8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e053      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 020c 	and.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1eb      	bne.n	800229c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c4:	4b27      	ldr	r3, [pc, #156]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d210      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e032      	b.n	800235a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4916      	ldr	r1, [pc, #88]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490e      	ldr	r1, [pc, #56]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002332:	f000 f821 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	4a09      	ldr	r2, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1cc>)
 800234c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_ClockConfig+0x1d0>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f976 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40022000 	.word	0x40022000
 8002368:	40021000 	.word	0x40021000
 800236c:	08003fb8 	.word	0x08003fb8
 8002370:	20000024 	.word	0x20000024
 8002374:	20000028 	.word	0x20000028

08002378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	2300      	movs	r3, #0
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d002      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x30>
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d003      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x36>
 80023a6:	e027      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	613b      	str	r3, [r7, #16]
      break;
 80023ac:	e027      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0c9b      	lsrs	r3, r3, #18
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d010      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_RCC_GetSysClockFreq+0x94>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	0c5b      	lsrs	r3, r3, #17
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023da:	fb02 f203 	mul.w	r2, r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e004      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a0c      	ldr	r2, [pc, #48]	; (800241c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	613b      	str	r3, [r7, #16]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCC_GetSysClockFreq+0x98>)
 80023fa:	613b      	str	r3, [r7, #16]
      break;
 80023fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fe:	693b      	ldr	r3, [r7, #16]
}
 8002400:	4618      	mov	r0, r3
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	08003fd0 	.word	0x08003fd0
 8002418:	08003fe0 	.word	0x08003fe0
 800241c:	003d0900 	.word	0x003d0900

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_RCC_GetHCLKFreq+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000024 	.word	0x20000024

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff2 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	08003fc8 	.word	0x08003fc8

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffde 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0adb      	lsrs	r3, r3, #11
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4903      	ldr	r1, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	08003fc8 	.word	0x08003fc8

08002484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <RCC_Delay+0x34>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <RCC_Delay+0x38>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0a5b      	lsrs	r3, r3, #9
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024a0:	bf00      	nop
  }
  while (Delay --);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	60fa      	str	r2, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f9      	bne.n	80024a0 <RCC_Delay+0x1c>
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	20000024 	.word	0x20000024
 80024bc:	10624dd3 	.word	0x10624dd3

080024c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e041      	b.n	8002556 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fe ff52 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	4619      	mov	r1, r3
 80024fe:	4610      	mov	r0, r2
 8002500:	f000 fb8e 	bl	8002c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d001      	beq.n	8002578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e03a      	b.n	80025ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0201 	orr.w	r2, r2, #1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00e      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x58>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d009      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x58>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a14      	ldr	r2, [pc, #80]	; (80025fc <HAL_TIM_Base_Start_IT+0x9c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d004      	beq.n	80025b8 <HAL_TIM_Base_Start_IT+0x58>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <HAL_TIM_Base_Start_IT+0xa0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b06      	cmp	r3, #6
 80025c8:	d010      	beq.n	80025ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025da:	e007      	b.n	80025ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40000400 	.word	0x40000400
 8002600:	40000800 	.word	0x40000800

08002604 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e041      	b.n	800269a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f839 	bl	80026a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 faec 	bl	8002c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0202 	mvn.w	r2, #2
 80026e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fa76 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fa69 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fa78 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0204 	mvn.w	r2, #4
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa4c 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa3f 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fa4e 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b08      	cmp	r3, #8
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b08      	cmp	r3, #8
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0208 	mvn.w	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa22 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa15 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa24 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b10      	cmp	r3, #16
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b10      	cmp	r3, #16
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0210 	mvn.w	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2208      	movs	r2, #8
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f9f8 	bl	8002be8 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f9eb 	bl	8002bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f9fa 	bl	8002bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b01      	cmp	r3, #1
 8002818:	d10e      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b01      	cmp	r3, #1
 8002826:	d107      	bne.n	8002838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0201 	mvn.w	r2, #1
 8002830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fc86 	bl	8001144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002842:	2b80      	cmp	r3, #128	; 0x80
 8002844:	d10e      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d107      	bne.n	8002864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fcc5 	bl	80031ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d10e      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d107      	bne.n	8002890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f9be 	bl	8002c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0220 	mvn.w	r2, #32
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fc90 	bl	80031dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028de:	2302      	movs	r3, #2
 80028e0:	e0ae      	b.n	8002a40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	f200 809f 	bhi.w	8002a30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	0800292d 	.word	0x0800292d
 80028fc:	08002a31 	.word	0x08002a31
 8002900:	08002a31 	.word	0x08002a31
 8002904:	08002a31 	.word	0x08002a31
 8002908:	0800296d 	.word	0x0800296d
 800290c:	08002a31 	.word	0x08002a31
 8002910:	08002a31 	.word	0x08002a31
 8002914:	08002a31 	.word	0x08002a31
 8002918:	080029af 	.word	0x080029af
 800291c:	08002a31 	.word	0x08002a31
 8002920:	08002a31 	.word	0x08002a31
 8002924:	08002a31 	.word	0x08002a31
 8002928:	080029ef 	.word	0x080029ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f9d6 	bl	8002ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0208 	orr.w	r2, r2, #8
 8002946:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6999      	ldr	r1, [r3, #24]
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	619a      	str	r2, [r3, #24]
      break;
 800296a:	e064      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fa1c 	bl	8002db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6999      	ldr	r1, [r3, #24]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	021a      	lsls	r2, r3, #8
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	619a      	str	r2, [r3, #24]
      break;
 80029ac:	e043      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fa65 	bl	8002e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0208 	orr.w	r2, r2, #8
 80029c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0204 	bic.w	r2, r2, #4
 80029d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69d9      	ldr	r1, [r3, #28]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	61da      	str	r2, [r3, #28]
      break;
 80029ec:	e023      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 faaf 	bl	8002f58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69d9      	ldr	r1, [r3, #28]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	61da      	str	r2, [r3, #28]
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	75fb      	strb	r3, [r7, #23]
      break;
 8002a34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_TIM_ConfigClockSource+0x1c>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e0b4      	b.n	8002bce <HAL_TIM_ConfigClockSource+0x186>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9c:	d03e      	beq.n	8002b1c <HAL_TIM_ConfigClockSource+0xd4>
 8002a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa2:	f200 8087 	bhi.w	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aaa:	f000 8086 	beq.w	8002bba <HAL_TIM_ConfigClockSource+0x172>
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab2:	d87f      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b70      	cmp	r3, #112	; 0x70
 8002ab6:	d01a      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0xa6>
 8002ab8:	2b70      	cmp	r3, #112	; 0x70
 8002aba:	d87b      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d050      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x11a>
 8002ac0:	2b60      	cmp	r3, #96	; 0x60
 8002ac2:	d877      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac4:	2b50      	cmp	r3, #80	; 0x50
 8002ac6:	d03c      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0xfa>
 8002ac8:	2b50      	cmp	r3, #80	; 0x50
 8002aca:	d873      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d058      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x13a>
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d86f      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad4:	2b30      	cmp	r3, #48	; 0x30
 8002ad6:	d064      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ad8:	2b30      	cmp	r3, #48	; 0x30
 8002ada:	d86b      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d060      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d867      	bhi.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d05c      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d05a      	beq.n	8002ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8002aec:	e062      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f000 faf0 	bl	80030e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	609a      	str	r2, [r3, #8]
      break;
 8002b1a:	e04f      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	6899      	ldr	r1, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f000 fad9 	bl	80030e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b3e:	609a      	str	r2, [r3, #8]
      break;
 8002b40:	e03c      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f000 fa50 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2150      	movs	r1, #80	; 0x50
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 faa7 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002b60:	e02c      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 fa6e 	bl	8003050 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2160      	movs	r1, #96	; 0x60
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fa97 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002b80:	e01c      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	6859      	ldr	r1, [r3, #4]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f000 fa30 	bl	8002ff4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2140      	movs	r1, #64	; 0x40
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa87 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002ba0:	e00c      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f000 fa7e 	bl	80030ae <TIM_ITRx_SetConfig>
      break;
 8002bb2:	e003      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	e000      	b.n	8002bbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	b083      	sub	sp, #12
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
	...

08002c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a29      	ldr	r2, [pc, #164]	; (8002cd8 <TIM_Base_SetConfig+0xb8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00b      	beq.n	8002c50 <TIM_Base_SetConfig+0x30>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3e:	d007      	beq.n	8002c50 <TIM_Base_SetConfig+0x30>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <TIM_Base_SetConfig+0xbc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d003      	beq.n	8002c50 <TIM_Base_SetConfig+0x30>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <TIM_Base_SetConfig+0xc0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d108      	bne.n	8002c62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <TIM_Base_SetConfig+0xb8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0x62>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <TIM_Base_SetConfig+0xbc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0x62>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <TIM_Base_SetConfig+0xc0>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <TIM_Base_SetConfig+0xb8>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d103      	bne.n	8002cc8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	615a      	str	r2, [r3, #20]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 0201 	bic.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0303 	bic.w	r3, r3, #3
 8002d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f023 0302 	bic.w	r3, r3, #2
 8002d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	; (8002dac <TIM_OC1_SetConfig+0xc8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d10c      	bne.n	8002d5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f023 0308 	bic.w	r3, r3, #8
 8002d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <TIM_OC1_SetConfig+0xc8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d111      	bne.n	8002d86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	621a      	str	r2, [r3, #32]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00

08002db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f023 0210 	bic.w	r2, r3, #16
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0320 	bic.w	r3, r3, #32
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <TIM_OC2_SetConfig+0xd0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d10d      	bne.n	8002e2c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <TIM_OC2_SetConfig+0xd0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d113      	bne.n	8002e5c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	621a      	str	r2, [r3, #32]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	40012c00 	.word	0x40012c00

08002e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1d      	ldr	r2, [pc, #116]	; (8002f54 <TIM_OC3_SetConfig+0xd0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10d      	bne.n	8002efe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <TIM_OC3_SetConfig+0xd0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d113      	bne.n	8002f2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	621a      	str	r2, [r3, #32]
}
 8002f48:	bf00      	nop
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40012c00 	.word	0x40012c00

08002f58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	031b      	lsls	r3, r3, #12
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <TIM_OC4_SetConfig+0x98>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d109      	bne.n	8002fcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	019b      	lsls	r3, r3, #6
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	40012c00 	.word	0x40012c00

08002ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 030a 	bic.w	r3, r3, #10
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	bf00      	nop
 8003048:	371c      	adds	r7, #28
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0210 	bic.w	r2, r3, #16
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800307a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	031b      	lsls	r3, r3, #12
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800308c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b085      	sub	sp, #20
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f043 0307 	orr.w	r3, r3, #7
 80030d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	021a      	lsls	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	431a      	orrs	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4313      	orrs	r3, r2
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	609a      	str	r2, [r3, #8]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003134:	2302      	movs	r3, #2
 8003136:	e046      	b.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a16      	ldr	r2, [pc, #88]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00e      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d009      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a10      	ldr	r2, [pc, #64]	; (80031d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10c      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800

080031dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e042      	b.n	8003298 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe f91c 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f91d 	bl	8003484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	691a      	ldr	r2, [r3, #16]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	; 0x28
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d16d      	bne.n	800339c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_UART_Transmit+0x2c>
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e066      	b.n	800339e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2221      	movs	r2, #33	; 0x21
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032de:	f7fe f9f3 	bl	80016c8 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	88fa      	ldrh	r2, [r7, #6]
 80032ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f8:	d108      	bne.n	800330c <HAL_UART_Transmit+0x6c>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	e003      	b.n	8003314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003314:	e02a      	b.n	800336c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f840 	bl	80033a6 <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e036      	b.n	800339e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3302      	adds	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e007      	b.n	800335e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1cf      	bne.n	8003316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2140      	movs	r1, #64	; 0x40
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f810 	bl	80033a6 <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b090      	sub	sp, #64	; 0x40
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b6:	e050      	b.n	800345a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d04c      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033c6:	f7fe f97f 	bl	80016c8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d241      	bcs.n	800345a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	330c      	adds	r3, #12
 80033dc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033f6:	637a      	str	r2, [r7, #52]	; 0x34
 80033f8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3314      	adds	r3, #20
 8003410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	613b      	str	r3, [r7, #16]
   return(result);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800342a:	623a      	str	r2, [r7, #32]
 800342c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	69f9      	ldr	r1, [r7, #28]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	61bb      	str	r3, [r7, #24]
   return(result);
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e5      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e00f      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	429a      	cmp	r2, r3
 8003476:	d09f      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3740      	adds	r7, #64	; 0x40
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034be:	f023 030c 	bic.w	r3, r3, #12
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2c      	ldr	r2, [pc, #176]	; (8003598 <UART_SetConfig+0x114>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d103      	bne.n	80034f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7fe ffb6 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	e002      	b.n	80034fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7fe ff9e 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009a      	lsls	r2, r3, #2
 8003504:	441a      	add	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <UART_SetConfig+0x118>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	0119      	lsls	r1, r3, #4
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	009a      	lsls	r2, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003530:	4b1a      	ldr	r3, [pc, #104]	; (800359c <UART_SetConfig+0x118>)
 8003532:	fba3 0302 	umull	r0, r3, r3, r2
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	3332      	adds	r3, #50	; 0x32
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <UART_SetConfig+0x118>)
 8003546:	fba2 2303 	umull	r2, r3, r2, r3
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003550:	4419      	add	r1, r3
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b0c      	ldr	r3, [pc, #48]	; (800359c <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	; 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	; 0x32
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	440a      	add	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013800 	.word	0x40013800
 800359c:	51eb851f 	.word	0x51eb851f

080035a0 <__errno>:
 80035a0:	4b01      	ldr	r3, [pc, #4]	; (80035a8 <__errno+0x8>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000030 	.word	0x20000030

080035ac <__libc_init_array>:
 80035ac:	b570      	push	{r4, r5, r6, lr}
 80035ae:	2600      	movs	r6, #0
 80035b0:	4d0c      	ldr	r5, [pc, #48]	; (80035e4 <__libc_init_array+0x38>)
 80035b2:	4c0d      	ldr	r4, [pc, #52]	; (80035e8 <__libc_init_array+0x3c>)
 80035b4:	1b64      	subs	r4, r4, r5
 80035b6:	10a4      	asrs	r4, r4, #2
 80035b8:	42a6      	cmp	r6, r4
 80035ba:	d109      	bne.n	80035d0 <__libc_init_array+0x24>
 80035bc:	f000 fc5c 	bl	8003e78 <_init>
 80035c0:	2600      	movs	r6, #0
 80035c2:	4d0a      	ldr	r5, [pc, #40]	; (80035ec <__libc_init_array+0x40>)
 80035c4:	4c0a      	ldr	r4, [pc, #40]	; (80035f0 <__libc_init_array+0x44>)
 80035c6:	1b64      	subs	r4, r4, r5
 80035c8:	10a4      	asrs	r4, r4, #2
 80035ca:	42a6      	cmp	r6, r4
 80035cc:	d105      	bne.n	80035da <__libc_init_array+0x2e>
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
 80035d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d4:	4798      	blx	r3
 80035d6:	3601      	adds	r6, #1
 80035d8:	e7ee      	b.n	80035b8 <__libc_init_array+0xc>
 80035da:	f855 3b04 	ldr.w	r3, [r5], #4
 80035de:	4798      	blx	r3
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7f2      	b.n	80035ca <__libc_init_array+0x1e>
 80035e4:	08004018 	.word	0x08004018
 80035e8:	08004018 	.word	0x08004018
 80035ec:	08004018 	.word	0x08004018
 80035f0:	0800401c 	.word	0x0800401c

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <siprintf>:
 8003604:	b40e      	push	{r1, r2, r3}
 8003606:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800360a:	b500      	push	{lr}
 800360c:	b09c      	sub	sp, #112	; 0x70
 800360e:	ab1d      	add	r3, sp, #116	; 0x74
 8003610:	9002      	str	r0, [sp, #8]
 8003612:	9006      	str	r0, [sp, #24]
 8003614:	9107      	str	r1, [sp, #28]
 8003616:	9104      	str	r1, [sp, #16]
 8003618:	4808      	ldr	r0, [pc, #32]	; (800363c <siprintf+0x38>)
 800361a:	4909      	ldr	r1, [pc, #36]	; (8003640 <siprintf+0x3c>)
 800361c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003620:	9105      	str	r1, [sp, #20]
 8003622:	6800      	ldr	r0, [r0, #0]
 8003624:	a902      	add	r1, sp, #8
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	f000 f868 	bl	80036fc <_svfiprintf_r>
 800362c:	2200      	movs	r2, #0
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	701a      	strb	r2, [r3, #0]
 8003632:	b01c      	add	sp, #112	; 0x70
 8003634:	f85d eb04 	ldr.w	lr, [sp], #4
 8003638:	b003      	add	sp, #12
 800363a:	4770      	bx	lr
 800363c:	20000030 	.word	0x20000030
 8003640:	ffff0208 	.word	0xffff0208

08003644 <__ssputs_r>:
 8003644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003648:	688e      	ldr	r6, [r1, #8]
 800364a:	4682      	mov	sl, r0
 800364c:	429e      	cmp	r6, r3
 800364e:	460c      	mov	r4, r1
 8003650:	4690      	mov	r8, r2
 8003652:	461f      	mov	r7, r3
 8003654:	d838      	bhi.n	80036c8 <__ssputs_r+0x84>
 8003656:	898a      	ldrh	r2, [r1, #12]
 8003658:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800365c:	d032      	beq.n	80036c4 <__ssputs_r+0x80>
 800365e:	6825      	ldr	r5, [r4, #0]
 8003660:	6909      	ldr	r1, [r1, #16]
 8003662:	3301      	adds	r3, #1
 8003664:	eba5 0901 	sub.w	r9, r5, r1
 8003668:	6965      	ldr	r5, [r4, #20]
 800366a:	444b      	add	r3, r9
 800366c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003670:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003674:	106d      	asrs	r5, r5, #1
 8003676:	429d      	cmp	r5, r3
 8003678:	bf38      	it	cc
 800367a:	461d      	movcc	r5, r3
 800367c:	0553      	lsls	r3, r2, #21
 800367e:	d531      	bpl.n	80036e4 <__ssputs_r+0xa0>
 8003680:	4629      	mov	r1, r5
 8003682:	f000 fb53 	bl	8003d2c <_malloc_r>
 8003686:	4606      	mov	r6, r0
 8003688:	b950      	cbnz	r0, 80036a0 <__ssputs_r+0x5c>
 800368a:	230c      	movs	r3, #12
 800368c:	f04f 30ff 	mov.w	r0, #4294967295
 8003690:	f8ca 3000 	str.w	r3, [sl]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	464a      	mov	r2, r9
 80036a2:	6921      	ldr	r1, [r4, #16]
 80036a4:	f000 face 	bl	8003c44 <memcpy>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	6126      	str	r6, [r4, #16]
 80036b6:	444e      	add	r6, r9
 80036b8:	6026      	str	r6, [r4, #0]
 80036ba:	463e      	mov	r6, r7
 80036bc:	6165      	str	r5, [r4, #20]
 80036be:	eba5 0509 	sub.w	r5, r5, r9
 80036c2:	60a5      	str	r5, [r4, #8]
 80036c4:	42be      	cmp	r6, r7
 80036c6:	d900      	bls.n	80036ca <__ssputs_r+0x86>
 80036c8:	463e      	mov	r6, r7
 80036ca:	4632      	mov	r2, r6
 80036cc:	4641      	mov	r1, r8
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	f000 fac6 	bl	8003c60 <memmove>
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	1b9b      	subs	r3, r3, r6
 80036da:	4432      	add	r2, r6
 80036dc:	2000      	movs	r0, #0
 80036de:	60a3      	str	r3, [r4, #8]
 80036e0:	6022      	str	r2, [r4, #0]
 80036e2:	e7db      	b.n	800369c <__ssputs_r+0x58>
 80036e4:	462a      	mov	r2, r5
 80036e6:	f000 fb7b 	bl	8003de0 <_realloc_r>
 80036ea:	4606      	mov	r6, r0
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1e1      	bne.n	80036b4 <__ssputs_r+0x70>
 80036f0:	4650      	mov	r0, sl
 80036f2:	6921      	ldr	r1, [r4, #16]
 80036f4:	f000 face 	bl	8003c94 <_free_r>
 80036f8:	e7c7      	b.n	800368a <__ssputs_r+0x46>
	...

080036fc <_svfiprintf_r>:
 80036fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003700:	4698      	mov	r8, r3
 8003702:	898b      	ldrh	r3, [r1, #12]
 8003704:	4607      	mov	r7, r0
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	460d      	mov	r5, r1
 800370a:	4614      	mov	r4, r2
 800370c:	b09d      	sub	sp, #116	; 0x74
 800370e:	d50e      	bpl.n	800372e <_svfiprintf_r+0x32>
 8003710:	690b      	ldr	r3, [r1, #16]
 8003712:	b963      	cbnz	r3, 800372e <_svfiprintf_r+0x32>
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	f000 fb09 	bl	8003d2c <_malloc_r>
 800371a:	6028      	str	r0, [r5, #0]
 800371c:	6128      	str	r0, [r5, #16]
 800371e:	b920      	cbnz	r0, 800372a <_svfiprintf_r+0x2e>
 8003720:	230c      	movs	r3, #12
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	f04f 30ff 	mov.w	r0, #4294967295
 8003728:	e0d1      	b.n	80038ce <_svfiprintf_r+0x1d2>
 800372a:	2340      	movs	r3, #64	; 0x40
 800372c:	616b      	str	r3, [r5, #20]
 800372e:	2300      	movs	r3, #0
 8003730:	9309      	str	r3, [sp, #36]	; 0x24
 8003732:	2320      	movs	r3, #32
 8003734:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003738:	2330      	movs	r3, #48	; 0x30
 800373a:	f04f 0901 	mov.w	r9, #1
 800373e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003742:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038e8 <_svfiprintf_r+0x1ec>
 8003746:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800374a:	4623      	mov	r3, r4
 800374c:	469a      	mov	sl, r3
 800374e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003752:	b10a      	cbz	r2, 8003758 <_svfiprintf_r+0x5c>
 8003754:	2a25      	cmp	r2, #37	; 0x25
 8003756:	d1f9      	bne.n	800374c <_svfiprintf_r+0x50>
 8003758:	ebba 0b04 	subs.w	fp, sl, r4
 800375c:	d00b      	beq.n	8003776 <_svfiprintf_r+0x7a>
 800375e:	465b      	mov	r3, fp
 8003760:	4622      	mov	r2, r4
 8003762:	4629      	mov	r1, r5
 8003764:	4638      	mov	r0, r7
 8003766:	f7ff ff6d 	bl	8003644 <__ssputs_r>
 800376a:	3001      	adds	r0, #1
 800376c:	f000 80aa 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003772:	445a      	add	r2, fp
 8003774:	9209      	str	r2, [sp, #36]	; 0x24
 8003776:	f89a 3000 	ldrb.w	r3, [sl]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a2 	beq.w	80038c4 <_svfiprintf_r+0x1c8>
 8003780:	2300      	movs	r3, #0
 8003782:	f04f 32ff 	mov.w	r2, #4294967295
 8003786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800378a:	f10a 0a01 	add.w	sl, sl, #1
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	9307      	str	r3, [sp, #28]
 8003792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003796:	931a      	str	r3, [sp, #104]	; 0x68
 8003798:	4654      	mov	r4, sl
 800379a:	2205      	movs	r2, #5
 800379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a0:	4851      	ldr	r0, [pc, #324]	; (80038e8 <_svfiprintf_r+0x1ec>)
 80037a2:	f000 fa41 	bl	8003c28 <memchr>
 80037a6:	9a04      	ldr	r2, [sp, #16]
 80037a8:	b9d8      	cbnz	r0, 80037e2 <_svfiprintf_r+0xe6>
 80037aa:	06d0      	lsls	r0, r2, #27
 80037ac:	bf44      	itt	mi
 80037ae:	2320      	movmi	r3, #32
 80037b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b4:	0711      	lsls	r1, r2, #28
 80037b6:	bf44      	itt	mi
 80037b8:	232b      	movmi	r3, #43	; 0x2b
 80037ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037be:	f89a 3000 	ldrb.w	r3, [sl]
 80037c2:	2b2a      	cmp	r3, #42	; 0x2a
 80037c4:	d015      	beq.n	80037f2 <_svfiprintf_r+0xf6>
 80037c6:	4654      	mov	r4, sl
 80037c8:	2000      	movs	r0, #0
 80037ca:	f04f 0c0a 	mov.w	ip, #10
 80037ce:	9a07      	ldr	r2, [sp, #28]
 80037d0:	4621      	mov	r1, r4
 80037d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037d6:	3b30      	subs	r3, #48	; 0x30
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d94e      	bls.n	800387a <_svfiprintf_r+0x17e>
 80037dc:	b1b0      	cbz	r0, 800380c <_svfiprintf_r+0x110>
 80037de:	9207      	str	r2, [sp, #28]
 80037e0:	e014      	b.n	800380c <_svfiprintf_r+0x110>
 80037e2:	eba0 0308 	sub.w	r3, r0, r8
 80037e6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ea:	4313      	orrs	r3, r2
 80037ec:	46a2      	mov	sl, r4
 80037ee:	9304      	str	r3, [sp, #16]
 80037f0:	e7d2      	b.n	8003798 <_svfiprintf_r+0x9c>
 80037f2:	9b03      	ldr	r3, [sp, #12]
 80037f4:	1d19      	adds	r1, r3, #4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	9103      	str	r1, [sp, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	bfbb      	ittet	lt
 80037fe:	425b      	neglt	r3, r3
 8003800:	f042 0202 	orrlt.w	r2, r2, #2
 8003804:	9307      	strge	r3, [sp, #28]
 8003806:	9307      	strlt	r3, [sp, #28]
 8003808:	bfb8      	it	lt
 800380a:	9204      	strlt	r2, [sp, #16]
 800380c:	7823      	ldrb	r3, [r4, #0]
 800380e:	2b2e      	cmp	r3, #46	; 0x2e
 8003810:	d10c      	bne.n	800382c <_svfiprintf_r+0x130>
 8003812:	7863      	ldrb	r3, [r4, #1]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d135      	bne.n	8003884 <_svfiprintf_r+0x188>
 8003818:	9b03      	ldr	r3, [sp, #12]
 800381a:	3402      	adds	r4, #2
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	9203      	str	r2, [sp, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	bfb8      	it	lt
 8003826:	f04f 33ff 	movlt.w	r3, #4294967295
 800382a:	9305      	str	r3, [sp, #20]
 800382c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038f8 <_svfiprintf_r+0x1fc>
 8003830:	2203      	movs	r2, #3
 8003832:	4650      	mov	r0, sl
 8003834:	7821      	ldrb	r1, [r4, #0]
 8003836:	f000 f9f7 	bl	8003c28 <memchr>
 800383a:	b140      	cbz	r0, 800384e <_svfiprintf_r+0x152>
 800383c:	2340      	movs	r3, #64	; 0x40
 800383e:	eba0 000a 	sub.w	r0, r0, sl
 8003842:	fa03 f000 	lsl.w	r0, r3, r0
 8003846:	9b04      	ldr	r3, [sp, #16]
 8003848:	3401      	adds	r4, #1
 800384a:	4303      	orrs	r3, r0
 800384c:	9304      	str	r3, [sp, #16]
 800384e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003852:	2206      	movs	r2, #6
 8003854:	4825      	ldr	r0, [pc, #148]	; (80038ec <_svfiprintf_r+0x1f0>)
 8003856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800385a:	f000 f9e5 	bl	8003c28 <memchr>
 800385e:	2800      	cmp	r0, #0
 8003860:	d038      	beq.n	80038d4 <_svfiprintf_r+0x1d8>
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <_svfiprintf_r+0x1f4>)
 8003864:	bb1b      	cbnz	r3, 80038ae <_svfiprintf_r+0x1b2>
 8003866:	9b03      	ldr	r3, [sp, #12]
 8003868:	3307      	adds	r3, #7
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	3308      	adds	r3, #8
 8003870:	9303      	str	r3, [sp, #12]
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003874:	4433      	add	r3, r6
 8003876:	9309      	str	r3, [sp, #36]	; 0x24
 8003878:	e767      	b.n	800374a <_svfiprintf_r+0x4e>
 800387a:	460c      	mov	r4, r1
 800387c:	2001      	movs	r0, #1
 800387e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003882:	e7a5      	b.n	80037d0 <_svfiprintf_r+0xd4>
 8003884:	2300      	movs	r3, #0
 8003886:	f04f 0c0a 	mov.w	ip, #10
 800388a:	4619      	mov	r1, r3
 800388c:	3401      	adds	r4, #1
 800388e:	9305      	str	r3, [sp, #20]
 8003890:	4620      	mov	r0, r4
 8003892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003896:	3a30      	subs	r2, #48	; 0x30
 8003898:	2a09      	cmp	r2, #9
 800389a:	d903      	bls.n	80038a4 <_svfiprintf_r+0x1a8>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0c5      	beq.n	800382c <_svfiprintf_r+0x130>
 80038a0:	9105      	str	r1, [sp, #20]
 80038a2:	e7c3      	b.n	800382c <_svfiprintf_r+0x130>
 80038a4:	4604      	mov	r4, r0
 80038a6:	2301      	movs	r3, #1
 80038a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80038ac:	e7f0      	b.n	8003890 <_svfiprintf_r+0x194>
 80038ae:	ab03      	add	r3, sp, #12
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462a      	mov	r2, r5
 80038b4:	4638      	mov	r0, r7
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <_svfiprintf_r+0x1f8>)
 80038b8:	a904      	add	r1, sp, #16
 80038ba:	f3af 8000 	nop.w
 80038be:	1c42      	adds	r2, r0, #1
 80038c0:	4606      	mov	r6, r0
 80038c2:	d1d6      	bne.n	8003872 <_svfiprintf_r+0x176>
 80038c4:	89ab      	ldrh	r3, [r5, #12]
 80038c6:	065b      	lsls	r3, r3, #25
 80038c8:	f53f af2c 	bmi.w	8003724 <_svfiprintf_r+0x28>
 80038cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ce:	b01d      	add	sp, #116	; 0x74
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d4:	ab03      	add	r3, sp, #12
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	462a      	mov	r2, r5
 80038da:	4638      	mov	r0, r7
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <_svfiprintf_r+0x1f8>)
 80038de:	a904      	add	r1, sp, #16
 80038e0:	f000 f87c 	bl	80039dc <_printf_i>
 80038e4:	e7eb      	b.n	80038be <_svfiprintf_r+0x1c2>
 80038e6:	bf00      	nop
 80038e8:	08003fe2 	.word	0x08003fe2
 80038ec:	08003fec 	.word	0x08003fec
 80038f0:	00000000 	.word	0x00000000
 80038f4:	08003645 	.word	0x08003645
 80038f8:	08003fe8 	.word	0x08003fe8

080038fc <_printf_common>:
 80038fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003900:	4616      	mov	r6, r2
 8003902:	4699      	mov	r9, r3
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	4607      	mov	r7, r0
 800390a:	4293      	cmp	r3, r2
 800390c:	bfb8      	it	lt
 800390e:	4613      	movlt	r3, r2
 8003910:	6033      	str	r3, [r6, #0]
 8003912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003916:	460c      	mov	r4, r1
 8003918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800391c:	b10a      	cbz	r2, 8003922 <_printf_common+0x26>
 800391e:	3301      	adds	r3, #1
 8003920:	6033      	str	r3, [r6, #0]
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	0699      	lsls	r1, r3, #26
 8003926:	bf42      	ittt	mi
 8003928:	6833      	ldrmi	r3, [r6, #0]
 800392a:	3302      	addmi	r3, #2
 800392c:	6033      	strmi	r3, [r6, #0]
 800392e:	6825      	ldr	r5, [r4, #0]
 8003930:	f015 0506 	ands.w	r5, r5, #6
 8003934:	d106      	bne.n	8003944 <_printf_common+0x48>
 8003936:	f104 0a19 	add.w	sl, r4, #25
 800393a:	68e3      	ldr	r3, [r4, #12]
 800393c:	6832      	ldr	r2, [r6, #0]
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	42ab      	cmp	r3, r5
 8003942:	dc28      	bgt.n	8003996 <_printf_common+0x9a>
 8003944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003948:	1e13      	subs	r3, r2, #0
 800394a:	6822      	ldr	r2, [r4, #0]
 800394c:	bf18      	it	ne
 800394e:	2301      	movne	r3, #1
 8003950:	0692      	lsls	r2, r2, #26
 8003952:	d42d      	bmi.n	80039b0 <_printf_common+0xb4>
 8003954:	4649      	mov	r1, r9
 8003956:	4638      	mov	r0, r7
 8003958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800395c:	47c0      	blx	r8
 800395e:	3001      	adds	r0, #1
 8003960:	d020      	beq.n	80039a4 <_printf_common+0xa8>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	68e5      	ldr	r5, [r4, #12]
 8003966:	f003 0306 	and.w	r3, r3, #6
 800396a:	2b04      	cmp	r3, #4
 800396c:	bf18      	it	ne
 800396e:	2500      	movne	r5, #0
 8003970:	6832      	ldr	r2, [r6, #0]
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	68a3      	ldr	r3, [r4, #8]
 8003978:	bf08      	it	eq
 800397a:	1aad      	subeq	r5, r5, r2
 800397c:	6922      	ldr	r2, [r4, #16]
 800397e:	bf08      	it	eq
 8003980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003984:	4293      	cmp	r3, r2
 8003986:	bfc4      	itt	gt
 8003988:	1a9b      	subgt	r3, r3, r2
 800398a:	18ed      	addgt	r5, r5, r3
 800398c:	341a      	adds	r4, #26
 800398e:	42b5      	cmp	r5, r6
 8003990:	d11a      	bne.n	80039c8 <_printf_common+0xcc>
 8003992:	2000      	movs	r0, #0
 8003994:	e008      	b.n	80039a8 <_printf_common+0xac>
 8003996:	2301      	movs	r3, #1
 8003998:	4652      	mov	r2, sl
 800399a:	4649      	mov	r1, r9
 800399c:	4638      	mov	r0, r7
 800399e:	47c0      	blx	r8
 80039a0:	3001      	adds	r0, #1
 80039a2:	d103      	bne.n	80039ac <_printf_common+0xb0>
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	3501      	adds	r5, #1
 80039ae:	e7c4      	b.n	800393a <_printf_common+0x3e>
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	18e1      	adds	r1, r4, r3
 80039b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039be:	4422      	add	r2, r4
 80039c0:	3302      	adds	r3, #2
 80039c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c6:	e7c5      	b.n	8003954 <_printf_common+0x58>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4622      	mov	r2, r4
 80039cc:	4649      	mov	r1, r9
 80039ce:	4638      	mov	r0, r7
 80039d0:	47c0      	blx	r8
 80039d2:	3001      	adds	r0, #1
 80039d4:	d0e6      	beq.n	80039a4 <_printf_common+0xa8>
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7d9      	b.n	800398e <_printf_common+0x92>
	...

080039dc <_printf_i>:
 80039dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	460c      	mov	r4, r1
 80039e2:	7e27      	ldrb	r7, [r4, #24]
 80039e4:	4691      	mov	r9, r2
 80039e6:	2f78      	cmp	r7, #120	; 0x78
 80039e8:	4680      	mov	r8, r0
 80039ea:	469a      	mov	sl, r3
 80039ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039f2:	d807      	bhi.n	8003a04 <_printf_i+0x28>
 80039f4:	2f62      	cmp	r7, #98	; 0x62
 80039f6:	d80a      	bhi.n	8003a0e <_printf_i+0x32>
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	f000 80d9 	beq.w	8003bb0 <_printf_i+0x1d4>
 80039fe:	2f58      	cmp	r7, #88	; 0x58
 8003a00:	f000 80a4 	beq.w	8003b4c <_printf_i+0x170>
 8003a04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a0c:	e03a      	b.n	8003a84 <_printf_i+0xa8>
 8003a0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a12:	2b15      	cmp	r3, #21
 8003a14:	d8f6      	bhi.n	8003a04 <_printf_i+0x28>
 8003a16:	a001      	add	r0, pc, #4	; (adr r0, 8003a1c <_printf_i+0x40>)
 8003a18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a1c:	08003a75 	.word	0x08003a75
 8003a20:	08003a89 	.word	0x08003a89
 8003a24:	08003a05 	.word	0x08003a05
 8003a28:	08003a05 	.word	0x08003a05
 8003a2c:	08003a05 	.word	0x08003a05
 8003a30:	08003a05 	.word	0x08003a05
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a05 	.word	0x08003a05
 8003a3c:	08003a05 	.word	0x08003a05
 8003a40:	08003a05 	.word	0x08003a05
 8003a44:	08003a05 	.word	0x08003a05
 8003a48:	08003b97 	.word	0x08003b97
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003b79 	.word	0x08003b79
 8003a54:	08003a05 	.word	0x08003a05
 8003a58:	08003a05 	.word	0x08003a05
 8003a5c:	08003bb9 	.word	0x08003bb9
 8003a60:	08003a05 	.word	0x08003a05
 8003a64:	08003ab9 	.word	0x08003ab9
 8003a68:	08003a05 	.word	0x08003a05
 8003a6c:	08003a05 	.word	0x08003a05
 8003a70:	08003b81 	.word	0x08003b81
 8003a74:	680b      	ldr	r3, [r1, #0]
 8003a76:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	600a      	str	r2, [r1, #0]
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0a4      	b.n	8003bd2 <_printf_i+0x1f6>
 8003a88:	6825      	ldr	r5, [r4, #0]
 8003a8a:	6808      	ldr	r0, [r1, #0]
 8003a8c:	062e      	lsls	r6, r5, #24
 8003a8e:	f100 0304 	add.w	r3, r0, #4
 8003a92:	d50a      	bpl.n	8003aaa <_printf_i+0xce>
 8003a94:	6805      	ldr	r5, [r0, #0]
 8003a96:	600b      	str	r3, [r1, #0]
 8003a98:	2d00      	cmp	r5, #0
 8003a9a:	da03      	bge.n	8003aa4 <_printf_i+0xc8>
 8003a9c:	232d      	movs	r3, #45	; 0x2d
 8003a9e:	426d      	negs	r5, r5
 8003aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa4:	230a      	movs	r3, #10
 8003aa6:	485e      	ldr	r0, [pc, #376]	; (8003c20 <_printf_i+0x244>)
 8003aa8:	e019      	b.n	8003ade <_printf_i+0x102>
 8003aaa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003aae:	6805      	ldr	r5, [r0, #0]
 8003ab0:	600b      	str	r3, [r1, #0]
 8003ab2:	bf18      	it	ne
 8003ab4:	b22d      	sxthne	r5, r5
 8003ab6:	e7ef      	b.n	8003a98 <_printf_i+0xbc>
 8003ab8:	680b      	ldr	r3, [r1, #0]
 8003aba:	6825      	ldr	r5, [r4, #0]
 8003abc:	1d18      	adds	r0, r3, #4
 8003abe:	6008      	str	r0, [r1, #0]
 8003ac0:	0628      	lsls	r0, r5, #24
 8003ac2:	d501      	bpl.n	8003ac8 <_printf_i+0xec>
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	e002      	b.n	8003ace <_printf_i+0xf2>
 8003ac8:	0669      	lsls	r1, r5, #25
 8003aca:	d5fb      	bpl.n	8003ac4 <_printf_i+0xe8>
 8003acc:	881d      	ldrh	r5, [r3, #0]
 8003ace:	2f6f      	cmp	r7, #111	; 0x6f
 8003ad0:	bf0c      	ite	eq
 8003ad2:	2308      	moveq	r3, #8
 8003ad4:	230a      	movne	r3, #10
 8003ad6:	4852      	ldr	r0, [pc, #328]	; (8003c20 <_printf_i+0x244>)
 8003ad8:	2100      	movs	r1, #0
 8003ada:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ade:	6866      	ldr	r6, [r4, #4]
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	bfa8      	it	ge
 8003ae4:	6821      	ldrge	r1, [r4, #0]
 8003ae6:	60a6      	str	r6, [r4, #8]
 8003ae8:	bfa4      	itt	ge
 8003aea:	f021 0104 	bicge.w	r1, r1, #4
 8003aee:	6021      	strge	r1, [r4, #0]
 8003af0:	b90d      	cbnz	r5, 8003af6 <_printf_i+0x11a>
 8003af2:	2e00      	cmp	r6, #0
 8003af4:	d04d      	beq.n	8003b92 <_printf_i+0x1b6>
 8003af6:	4616      	mov	r6, r2
 8003af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003afc:	fb03 5711 	mls	r7, r3, r1, r5
 8003b00:	5dc7      	ldrb	r7, [r0, r7]
 8003b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b06:	462f      	mov	r7, r5
 8003b08:	42bb      	cmp	r3, r7
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	d9f4      	bls.n	8003af8 <_printf_i+0x11c>
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d10b      	bne.n	8003b2a <_printf_i+0x14e>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	07df      	lsls	r7, r3, #31
 8003b16:	d508      	bpl.n	8003b2a <_printf_i+0x14e>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	6861      	ldr	r1, [r4, #4]
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	bfde      	ittt	le
 8003b20:	2330      	movle	r3, #48	; 0x30
 8003b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b2a:	1b92      	subs	r2, r2, r6
 8003b2c:	6122      	str	r2, [r4, #16]
 8003b2e:	464b      	mov	r3, r9
 8003b30:	4621      	mov	r1, r4
 8003b32:	4640      	mov	r0, r8
 8003b34:	f8cd a000 	str.w	sl, [sp]
 8003b38:	aa03      	add	r2, sp, #12
 8003b3a:	f7ff fedf 	bl	80038fc <_printf_common>
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d14c      	bne.n	8003bdc <_printf_i+0x200>
 8003b42:	f04f 30ff 	mov.w	r0, #4294967295
 8003b46:	b004      	add	sp, #16
 8003b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4c:	4834      	ldr	r0, [pc, #208]	; (8003c20 <_printf_i+0x244>)
 8003b4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b52:	680e      	ldr	r6, [r1, #0]
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b5a:	061f      	lsls	r7, r3, #24
 8003b5c:	600e      	str	r6, [r1, #0]
 8003b5e:	d514      	bpl.n	8003b8a <_printf_i+0x1ae>
 8003b60:	07d9      	lsls	r1, r3, #31
 8003b62:	bf44      	itt	mi
 8003b64:	f043 0320 	orrmi.w	r3, r3, #32
 8003b68:	6023      	strmi	r3, [r4, #0]
 8003b6a:	b91d      	cbnz	r5, 8003b74 <_printf_i+0x198>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f023 0320 	bic.w	r3, r3, #32
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	2310      	movs	r3, #16
 8003b76:	e7af      	b.n	8003ad8 <_printf_i+0xfc>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	2378      	movs	r3, #120	; 0x78
 8003b82:	4828      	ldr	r0, [pc, #160]	; (8003c24 <_printf_i+0x248>)
 8003b84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b88:	e7e3      	b.n	8003b52 <_printf_i+0x176>
 8003b8a:	065e      	lsls	r6, r3, #25
 8003b8c:	bf48      	it	mi
 8003b8e:	b2ad      	uxthmi	r5, r5
 8003b90:	e7e6      	b.n	8003b60 <_printf_i+0x184>
 8003b92:	4616      	mov	r6, r2
 8003b94:	e7bb      	b.n	8003b0e <_printf_i+0x132>
 8003b96:	680b      	ldr	r3, [r1, #0]
 8003b98:	6826      	ldr	r6, [r4, #0]
 8003b9a:	1d1d      	adds	r5, r3, #4
 8003b9c:	6960      	ldr	r0, [r4, #20]
 8003b9e:	600d      	str	r5, [r1, #0]
 8003ba0:	0635      	lsls	r5, r6, #24
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	d501      	bpl.n	8003baa <_printf_i+0x1ce>
 8003ba6:	6018      	str	r0, [r3, #0]
 8003ba8:	e002      	b.n	8003bb0 <_printf_i+0x1d4>
 8003baa:	0671      	lsls	r1, r6, #25
 8003bac:	d5fb      	bpl.n	8003ba6 <_printf_i+0x1ca>
 8003bae:	8018      	strh	r0, [r3, #0]
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	4616      	mov	r6, r2
 8003bb4:	6123      	str	r3, [r4, #16]
 8003bb6:	e7ba      	b.n	8003b2e <_printf_i+0x152>
 8003bb8:	680b      	ldr	r3, [r1, #0]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	600a      	str	r2, [r1, #0]
 8003bbe:	681e      	ldr	r6, [r3, #0]
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	f000 f82f 	bl	8003c28 <memchr>
 8003bca:	b108      	cbz	r0, 8003bd0 <_printf_i+0x1f4>
 8003bcc:	1b80      	subs	r0, r0, r6
 8003bce:	6060      	str	r0, [r4, #4]
 8003bd0:	6863      	ldr	r3, [r4, #4]
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bda:	e7a8      	b.n	8003b2e <_printf_i+0x152>
 8003bdc:	4632      	mov	r2, r6
 8003bde:	4649      	mov	r1, r9
 8003be0:	4640      	mov	r0, r8
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	47d0      	blx	sl
 8003be6:	3001      	adds	r0, #1
 8003be8:	d0ab      	beq.n	8003b42 <_printf_i+0x166>
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	079b      	lsls	r3, r3, #30
 8003bee:	d413      	bmi.n	8003c18 <_printf_i+0x23c>
 8003bf0:	68e0      	ldr	r0, [r4, #12]
 8003bf2:	9b03      	ldr	r3, [sp, #12]
 8003bf4:	4298      	cmp	r0, r3
 8003bf6:	bfb8      	it	lt
 8003bf8:	4618      	movlt	r0, r3
 8003bfa:	e7a4      	b.n	8003b46 <_printf_i+0x16a>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4632      	mov	r2, r6
 8003c00:	4649      	mov	r1, r9
 8003c02:	4640      	mov	r0, r8
 8003c04:	47d0      	blx	sl
 8003c06:	3001      	adds	r0, #1
 8003c08:	d09b      	beq.n	8003b42 <_printf_i+0x166>
 8003c0a:	3501      	adds	r5, #1
 8003c0c:	68e3      	ldr	r3, [r4, #12]
 8003c0e:	9903      	ldr	r1, [sp, #12]
 8003c10:	1a5b      	subs	r3, r3, r1
 8003c12:	42ab      	cmp	r3, r5
 8003c14:	dcf2      	bgt.n	8003bfc <_printf_i+0x220>
 8003c16:	e7eb      	b.n	8003bf0 <_printf_i+0x214>
 8003c18:	2500      	movs	r5, #0
 8003c1a:	f104 0619 	add.w	r6, r4, #25
 8003c1e:	e7f5      	b.n	8003c0c <_printf_i+0x230>
 8003c20:	08003ff3 	.word	0x08003ff3
 8003c24:	08004004 	.word	0x08004004

08003c28 <memchr>:
 8003c28:	4603      	mov	r3, r0
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	b2c9      	uxtb	r1, r1
 8003c2e:	4402      	add	r2, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	d101      	bne.n	8003c3a <memchr+0x12>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e003      	b.n	8003c42 <memchr+0x1a>
 8003c3a:	7804      	ldrb	r4, [r0, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	428c      	cmp	r4, r1
 8003c40:	d1f6      	bne.n	8003c30 <memchr+0x8>
 8003c42:	bd10      	pop	{r4, pc}

08003c44 <memcpy>:
 8003c44:	440a      	add	r2, r1
 8003c46:	4291      	cmp	r1, r2
 8003c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c4c:	d100      	bne.n	8003c50 <memcpy+0xc>
 8003c4e:	4770      	bx	lr
 8003c50:	b510      	push	{r4, lr}
 8003c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c5c:	d1f9      	bne.n	8003c52 <memcpy+0xe>
 8003c5e:	bd10      	pop	{r4, pc}

08003c60 <memmove>:
 8003c60:	4288      	cmp	r0, r1
 8003c62:	b510      	push	{r4, lr}
 8003c64:	eb01 0402 	add.w	r4, r1, r2
 8003c68:	d902      	bls.n	8003c70 <memmove+0x10>
 8003c6a:	4284      	cmp	r4, r0
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	d807      	bhi.n	8003c80 <memmove+0x20>
 8003c70:	1e43      	subs	r3, r0, #1
 8003c72:	42a1      	cmp	r1, r4
 8003c74:	d008      	beq.n	8003c88 <memmove+0x28>
 8003c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c7e:	e7f8      	b.n	8003c72 <memmove+0x12>
 8003c80:	4601      	mov	r1, r0
 8003c82:	4402      	add	r2, r0
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d100      	bne.n	8003c8a <memmove+0x2a>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c92:	e7f7      	b.n	8003c84 <memmove+0x24>

08003c94 <_free_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d043      	beq.n	8003d24 <_free_r+0x90>
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f0c      	subs	r4, r1, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	18e4      	addlt	r4, r4, r3
 8003ca8:	f000 f8d0 	bl	8003e4c <__malloc_lock>
 8003cac:	4a1e      	ldr	r2, [pc, #120]	; (8003d28 <_free_r+0x94>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	b933      	cbnz	r3, 8003cc2 <_free_r+0x2e>
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	6014      	str	r4, [r2, #0]
 8003cb8:	4628      	mov	r0, r5
 8003cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbe:	f000 b8cb 	b.w	8003e58 <__malloc_unlock>
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	d90a      	bls.n	8003cdc <_free_r+0x48>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	1862      	adds	r2, r4, r1
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bf01      	itttt	eq
 8003cce:	681a      	ldreq	r2, [r3, #0]
 8003cd0:	685b      	ldreq	r3, [r3, #4]
 8003cd2:	1852      	addeq	r2, r2, r1
 8003cd4:	6022      	streq	r2, [r4, #0]
 8003cd6:	6063      	str	r3, [r4, #4]
 8003cd8:	6004      	str	r4, [r0, #0]
 8003cda:	e7ed      	b.n	8003cb8 <_free_r+0x24>
 8003cdc:	461a      	mov	r2, r3
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	b10b      	cbz	r3, 8003ce6 <_free_r+0x52>
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	d9fa      	bls.n	8003cdc <_free_r+0x48>
 8003ce6:	6811      	ldr	r1, [r2, #0]
 8003ce8:	1850      	adds	r0, r2, r1
 8003cea:	42a0      	cmp	r0, r4
 8003cec:	d10b      	bne.n	8003d06 <_free_r+0x72>
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	4401      	add	r1, r0
 8003cf2:	1850      	adds	r0, r2, r1
 8003cf4:	4283      	cmp	r3, r0
 8003cf6:	6011      	str	r1, [r2, #0]
 8003cf8:	d1de      	bne.n	8003cb8 <_free_r+0x24>
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4401      	add	r1, r0
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	6053      	str	r3, [r2, #4]
 8003d04:	e7d8      	b.n	8003cb8 <_free_r+0x24>
 8003d06:	d902      	bls.n	8003d0e <_free_r+0x7a>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	602b      	str	r3, [r5, #0]
 8003d0c:	e7d4      	b.n	8003cb8 <_free_r+0x24>
 8003d0e:	6820      	ldr	r0, [r4, #0]
 8003d10:	1821      	adds	r1, r4, r0
 8003d12:	428b      	cmp	r3, r1
 8003d14:	bf01      	itttt	eq
 8003d16:	6819      	ldreq	r1, [r3, #0]
 8003d18:	685b      	ldreq	r3, [r3, #4]
 8003d1a:	1809      	addeq	r1, r1, r0
 8003d1c:	6021      	streq	r1, [r4, #0]
 8003d1e:	6063      	str	r3, [r4, #4]
 8003d20:	6054      	str	r4, [r2, #4]
 8003d22:	e7c9      	b.n	8003cb8 <_free_r+0x24>
 8003d24:	bd38      	pop	{r3, r4, r5, pc}
 8003d26:	bf00      	nop
 8003d28:	20000160 	.word	0x20000160

08003d2c <_malloc_r>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	1ccd      	adds	r5, r1, #3
 8003d30:	f025 0503 	bic.w	r5, r5, #3
 8003d34:	3508      	adds	r5, #8
 8003d36:	2d0c      	cmp	r5, #12
 8003d38:	bf38      	it	cc
 8003d3a:	250c      	movcc	r5, #12
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	4606      	mov	r6, r0
 8003d40:	db01      	blt.n	8003d46 <_malloc_r+0x1a>
 8003d42:	42a9      	cmp	r1, r5
 8003d44:	d903      	bls.n	8003d4e <_malloc_r+0x22>
 8003d46:	230c      	movs	r3, #12
 8003d48:	6033      	str	r3, [r6, #0]
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d4e:	f000 f87d 	bl	8003e4c <__malloc_lock>
 8003d52:	4921      	ldr	r1, [pc, #132]	; (8003dd8 <_malloc_r+0xac>)
 8003d54:	680a      	ldr	r2, [r1, #0]
 8003d56:	4614      	mov	r4, r2
 8003d58:	b99c      	cbnz	r4, 8003d82 <_malloc_r+0x56>
 8003d5a:	4f20      	ldr	r7, [pc, #128]	; (8003ddc <_malloc_r+0xb0>)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b923      	cbnz	r3, 8003d6a <_malloc_r+0x3e>
 8003d60:	4621      	mov	r1, r4
 8003d62:	4630      	mov	r0, r6
 8003d64:	f000 f862 	bl	8003e2c <_sbrk_r>
 8003d68:	6038      	str	r0, [r7, #0]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	f000 f85d 	bl	8003e2c <_sbrk_r>
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	d123      	bne.n	8003dbe <_malloc_r+0x92>
 8003d76:	230c      	movs	r3, #12
 8003d78:	4630      	mov	r0, r6
 8003d7a:	6033      	str	r3, [r6, #0]
 8003d7c:	f000 f86c 	bl	8003e58 <__malloc_unlock>
 8003d80:	e7e3      	b.n	8003d4a <_malloc_r+0x1e>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	1b5b      	subs	r3, r3, r5
 8003d86:	d417      	bmi.n	8003db8 <_malloc_r+0x8c>
 8003d88:	2b0b      	cmp	r3, #11
 8003d8a:	d903      	bls.n	8003d94 <_malloc_r+0x68>
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	441c      	add	r4, r3
 8003d90:	6025      	str	r5, [r4, #0]
 8003d92:	e004      	b.n	8003d9e <_malloc_r+0x72>
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	42a2      	cmp	r2, r4
 8003d98:	bf0c      	ite	eq
 8003d9a:	600b      	streq	r3, [r1, #0]
 8003d9c:	6053      	strne	r3, [r2, #4]
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f000 f85a 	bl	8003e58 <__malloc_unlock>
 8003da4:	f104 000b 	add.w	r0, r4, #11
 8003da8:	1d23      	adds	r3, r4, #4
 8003daa:	f020 0007 	bic.w	r0, r0, #7
 8003dae:	1ac2      	subs	r2, r0, r3
 8003db0:	d0cc      	beq.n	8003d4c <_malloc_r+0x20>
 8003db2:	1a1b      	subs	r3, r3, r0
 8003db4:	50a3      	str	r3, [r4, r2]
 8003db6:	e7c9      	b.n	8003d4c <_malloc_r+0x20>
 8003db8:	4622      	mov	r2, r4
 8003dba:	6864      	ldr	r4, [r4, #4]
 8003dbc:	e7cc      	b.n	8003d58 <_malloc_r+0x2c>
 8003dbe:	1cc4      	adds	r4, r0, #3
 8003dc0:	f024 0403 	bic.w	r4, r4, #3
 8003dc4:	42a0      	cmp	r0, r4
 8003dc6:	d0e3      	beq.n	8003d90 <_malloc_r+0x64>
 8003dc8:	1a21      	subs	r1, r4, r0
 8003dca:	4630      	mov	r0, r6
 8003dcc:	f000 f82e 	bl	8003e2c <_sbrk_r>
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d1dd      	bne.n	8003d90 <_malloc_r+0x64>
 8003dd4:	e7cf      	b.n	8003d76 <_malloc_r+0x4a>
 8003dd6:	bf00      	nop
 8003dd8:	20000160 	.word	0x20000160
 8003ddc:	20000164 	.word	0x20000164

08003de0 <_realloc_r>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	4607      	mov	r7, r0
 8003de4:	4614      	mov	r4, r2
 8003de6:	460e      	mov	r6, r1
 8003de8:	b921      	cbnz	r1, 8003df4 <_realloc_r+0x14>
 8003dea:	4611      	mov	r1, r2
 8003dec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003df0:	f7ff bf9c 	b.w	8003d2c <_malloc_r>
 8003df4:	b922      	cbnz	r2, 8003e00 <_realloc_r+0x20>
 8003df6:	f7ff ff4d 	bl	8003c94 <_free_r>
 8003dfa:	4625      	mov	r5, r4
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e00:	f000 f830 	bl	8003e64 <_malloc_usable_size_r>
 8003e04:	42a0      	cmp	r0, r4
 8003e06:	d20f      	bcs.n	8003e28 <_realloc_r+0x48>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff ff8e 	bl	8003d2c <_malloc_r>
 8003e10:	4605      	mov	r5, r0
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0f2      	beq.n	8003dfc <_realloc_r+0x1c>
 8003e16:	4631      	mov	r1, r6
 8003e18:	4622      	mov	r2, r4
 8003e1a:	f7ff ff13 	bl	8003c44 <memcpy>
 8003e1e:	4631      	mov	r1, r6
 8003e20:	4638      	mov	r0, r7
 8003e22:	f7ff ff37 	bl	8003c94 <_free_r>
 8003e26:	e7e9      	b.n	8003dfc <_realloc_r+0x1c>
 8003e28:	4635      	mov	r5, r6
 8003e2a:	e7e7      	b.n	8003dfc <_realloc_r+0x1c>

08003e2c <_sbrk_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4d05      	ldr	r5, [pc, #20]	; (8003e48 <_sbrk_r+0x1c>)
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	602b      	str	r3, [r5, #0]
 8003e38:	f7fd fb8c 	bl	8001554 <_sbrk>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_sbrk_r+0x1a>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_sbrk_r+0x1a>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	200002a4 	.word	0x200002a4

08003e4c <__malloc_lock>:
 8003e4c:	4801      	ldr	r0, [pc, #4]	; (8003e54 <__malloc_lock+0x8>)
 8003e4e:	f000 b811 	b.w	8003e74 <__retarget_lock_acquire_recursive>
 8003e52:	bf00      	nop
 8003e54:	200002ac 	.word	0x200002ac

08003e58 <__malloc_unlock>:
 8003e58:	4801      	ldr	r0, [pc, #4]	; (8003e60 <__malloc_unlock+0x8>)
 8003e5a:	f000 b80c 	b.w	8003e76 <__retarget_lock_release_recursive>
 8003e5e:	bf00      	nop
 8003e60:	200002ac 	.word	0x200002ac

08003e64 <_malloc_usable_size_r>:
 8003e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e68:	1f18      	subs	r0, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfbc      	itt	lt
 8003e6e:	580b      	ldrlt	r3, [r1, r0]
 8003e70:	18c0      	addlt	r0, r0, r3
 8003e72:	4770      	bx	lr

08003e74 <__retarget_lock_acquire_recursive>:
 8003e74:	4770      	bx	lr

08003e76 <__retarget_lock_release_recursive>:
 8003e76:	4770      	bx	lr

08003e78 <_init>:
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	bf00      	nop
 8003e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7e:	bc08      	pop	{r3}
 8003e80:	469e      	mov	lr, r3
 8003e82:	4770      	bx	lr

08003e84 <_fini>:
 8003e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e86:	bf00      	nop
 8003e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8a:	bc08      	pop	{r3}
 8003e8c:	469e      	mov	lr, r3
 8003e8e:	4770      	bx	lr
