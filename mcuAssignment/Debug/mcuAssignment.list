
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005224  08005224  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005224  08005224  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005224  08005224  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005228  08005228  00015228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800522c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000094  080052c0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080052c0  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013324  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e0  00000000  00000000  000333e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00035bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000368f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e85  00000000  00000000  00037508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010360  00000000  00000000  0005038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b514  00000000  00000000  000606ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ebc01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a10  00000000  00000000  000ebc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	08005084 	.word	0x08005084

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	08005084 	.word	0x08005084

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e020      	b.n	80007aa <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <initStateForButton+0x60>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2101      	movs	r1, #1
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <initStateForButton+0x64>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2101      	movs	r1, #1
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <initStateForButton+0x68>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2101      	movs	r1, #1
 8000782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <initStateForButton+0x6c>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2101      	movs	r1, #1
 800078c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <initStateForButton+0x70>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	21c8      	movs	r1, #200	; 0xc8
 8000796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <initStateForButton+0x74>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2100      	movs	r1, #0
 80007a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dddb      	ble.n	8000768 <initStateForButton+0xc>
	 }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000164 	.word	0x20000164
 80007c0:	20000174 	.word	0x20000174
 80007c4:	200001a4 	.word	0x200001a4
 80007c8:	20000154 	.word	0x20000154
 80007cc:	20000194 	.word	0x20000194
 80007d0:	20000184 	.word	0x20000184

080007d4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <isButtonPressed+0x30>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d106      	bne.n	80007f6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <isButtonPressed+0x30>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2100      	movs	r1, #0
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e000      	b.n	80007f8 <isButtonPressed+0x24>
	}
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000184 	.word	0x20000184

08000808 <subKeyProcess>:

void subKeyProcess(int key_index) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <subKeyProcess+0x1c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2101      	movs	r1, #1
 8000816:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000184 	.word	0x20000184

08000828 <getKeyInput>:

void getKeyInput() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e076      	b.n	8000922 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000834:	4a3f      	ldr	r2, [pc, #252]	; (8000934 <getKeyInput+0x10c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	493e      	ldr	r1, [pc, #248]	; (8000938 <getKeyInput+0x110>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000844:	4a3d      	ldr	r2, [pc, #244]	; (800093c <getKeyInput+0x114>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	4939      	ldr	r1, [pc, #228]	; (8000934 <getKeyInput+0x10c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000854:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <getKeyInput+0x118>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085c:	4939      	ldr	r1, [pc, #228]	; (8000944 <getKeyInput+0x11c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f001 fdb6 	bl	80023d8 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	4a32      	ldr	r2, [pc, #200]	; (800093c <getKeyInput+0x114>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <getKeyInput+0x110>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000880:	492c      	ldr	r1, [pc, #176]	; (8000934 <getKeyInput+0x10c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000888:	429a      	cmp	r2, r3
 800088a:	d147      	bne.n	800091c <getKeyInput+0xf4>
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <getKeyInput+0x10c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000894:	4929      	ldr	r1, [pc, #164]	; (800093c <getKeyInput+0x114>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	d13d      	bne.n	800091c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <getKeyInput+0x120>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a8:	4924      	ldr	r1, [pc, #144]	; (800093c <getKeyInput+0x114>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d016      	beq.n	80008e2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <getKeyInput+0x114>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008bc:	4922      	ldr	r1, [pc, #136]	; (8000948 <getKeyInput+0x120>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <getKeyInput+0x114>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d125      	bne.n	800091c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff99 	bl	8000808 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <getKeyInput+0x124>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	21c8      	movs	r1, #200	; 0xc8
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008e0:	e01c      	b.n	800091c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <getKeyInput+0x124>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4917      	ldr	r1, [pc, #92]	; (800094c <getKeyInput+0x124>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <getKeyInput+0x124>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dc0d      	bgt.n	800091c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <getKeyInput+0x114>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <getKeyInput+0xea>
						subKeyProcess(i);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff7b 	bl	8000808 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <getKeyInput+0x124>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	21c8      	movs	r1, #200	; 0xc8
 8000918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b03      	cmp	r3, #3
 8000926:	dd85      	ble.n	8000834 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000174 	.word	0x20000174
 8000938:	20000164 	.word	0x20000164
 800093c:	200001a4 	.word	0x200001a4
 8000940:	20000008 	.word	0x20000008
 8000944:	20000000 	.word	0x20000000
 8000948:	20000154 	.word	0x20000154
 800094c:	20000194 	.word	0x20000194

08000950 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b0a      	subs	r3, #10
 800095c:	2b0d      	cmp	r3, #13
 800095e:	f200 80fa 	bhi.w	8000b56 <displayLed+0x206>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <displayLed+0x18>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009cd 	.word	0x080009cd
 8000970:	080009f9 	.word	0x080009f9
 8000974:	08000b57 	.word	0x08000b57
 8000978:	08000b57 	.word	0x08000b57
 800097c:	08000b57 	.word	0x08000b57
 8000980:	08000b57 	.word	0x08000b57
 8000984:	08000b57 	.word	0x08000b57
 8000988:	08000b57 	.word	0x08000b57
 800098c:	08000b57 	.word	0x08000b57
 8000990:	08000a25 	.word	0x08000a25
 8000994:	08000a73 	.word	0x08000a73
 8000998:	08000abf 	.word	0x08000abf
 800099c:	08000b0b 	.word	0x08000b0b
	switch(led_index) {
	case RED_MAN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a6:	4872      	ldr	r0, [pc, #456]	; (8000b70 <displayLed+0x220>)
 80009a8:	f001 fd2d 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <displayLed+0x224>)
 80009b2:	f001 fd28 	bl	8002406 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2120      	movs	r1, #32
 80009ba:	486e      	ldr	r0, [pc, #440]	; (8000b74 <displayLed+0x224>)
 80009bc:	f001 fd23 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	486b      	ldr	r0, [pc, #428]	; (8000b74 <displayLed+0x224>)
 80009c6:	f001 fd1e 	bl	8002406 <HAL_GPIO_WritePin>
		break;
 80009ca:	e0cd      	b.n	8000b68 <displayLed+0x218>
	case YELLOW_MAN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	4867      	ldr	r0, [pc, #412]	; (8000b70 <displayLed+0x220>)
 80009d4:	f001 fd17 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2108      	movs	r1, #8
 80009dc:	4865      	ldr	r0, [pc, #404]	; (8000b74 <displayLed+0x224>)
 80009de:	f001 fd12 	bl	8002406 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4863      	ldr	r0, [pc, #396]	; (8000b74 <displayLed+0x224>)
 80009e8:	f001 fd0d 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	4860      	ldr	r0, [pc, #384]	; (8000b74 <displayLed+0x224>)
 80009f2:	f001 fd08 	bl	8002406 <HAL_GPIO_WritePin>
		break;
 80009f6:	e0b7      	b.n	8000b68 <displayLed+0x218>
	case GREEN_MAN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <displayLed+0x220>)
 8000a00:	f001 fd01 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	485a      	ldr	r0, [pc, #360]	; (8000b74 <displayLed+0x224>)
 8000a0a:	f001 fcfc 	bl	8002406 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4858      	ldr	r0, [pc, #352]	; (8000b74 <displayLed+0x224>)
 8000a14:	f001 fcf7 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4855      	ldr	r0, [pc, #340]	; (8000b74 <displayLed+0x224>)
 8000a1e:	f001 fcf2 	bl	8002406 <HAL_GPIO_WritePin>
		break;
 8000a22:	e0a1      	b.n	8000b68 <displayLed+0x218>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4851      	ldr	r0, [pc, #324]	; (8000b70 <displayLed+0x220>)
 8000a2c:	f001 fceb 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	484f      	ldr	r0, [pc, #316]	; (8000b74 <displayLed+0x224>)
 8000a36:	f001 fce6 	bl	8002406 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <displayLed+0x224>)
 8000a40:	f001 fce1 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	484a      	ldr	r0, [pc, #296]	; (8000b74 <displayLed+0x224>)
 8000a4a:	f001 fcdc 	bl	8002406 <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <displayLed+0x228>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	f040 8081 	bne.w	8000b5a <displayLed+0x20a>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <displayLed+0x224>)
 8000a60:	f001 fcd1 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4841      	ldr	r0, [pc, #260]	; (8000b70 <displayLed+0x220>)
 8000a6c:	f001 fccb 	bl	8002406 <HAL_GPIO_WritePin>
		}
		break;
 8000a70:	e073      	b.n	8000b5a <displayLed+0x20a>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	483d      	ldr	r0, [pc, #244]	; (8000b70 <displayLed+0x220>)
 8000a7a:	f001 fcc4 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	483c      	ldr	r0, [pc, #240]	; (8000b74 <displayLed+0x224>)
 8000a84:	f001 fcbf 	bl	8002406 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <displayLed+0x224>)
 8000a8e:	f001 fcba 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2110      	movs	r1, #16
 8000a96:	4837      	ldr	r0, [pc, #220]	; (8000b74 <displayLed+0x224>)
 8000a98:	f001 fcb5 	bl	8002406 <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <displayLed+0x228>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d15c      	bne.n	8000b5e <displayLed+0x20e>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4832      	ldr	r0, [pc, #200]	; (8000b74 <displayLed+0x224>)
 8000aac:	f001 fcab 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	482e      	ldr	r0, [pc, #184]	; (8000b70 <displayLed+0x220>)
 8000ab8:	f001 fca5 	bl	8002406 <HAL_GPIO_WritePin>
		}
		break;
 8000abc:	e04f      	b.n	8000b5e <displayLed+0x20e>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	482a      	ldr	r0, [pc, #168]	; (8000b70 <displayLed+0x220>)
 8000ac6:	f001 fc9e 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	4829      	ldr	r0, [pc, #164]	; (8000b74 <displayLed+0x224>)
 8000ad0:	f001 fc99 	bl	8002406 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4826      	ldr	r0, [pc, #152]	; (8000b74 <displayLed+0x224>)
 8000ada:	f001 fc94 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4824      	ldr	r0, [pc, #144]	; (8000b74 <displayLed+0x224>)
 8000ae4:	f001 fc8f 	bl	8002406 <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <displayLed+0x228>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d138      	bne.n	8000b62 <displayLed+0x212>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	481f      	ldr	r0, [pc, #124]	; (8000b74 <displayLed+0x224>)
 8000af8:	f001 fc85 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <displayLed+0x220>)
 8000b04:	f001 fc7f 	bl	8002406 <HAL_GPIO_WritePin>
		}
		break;
 8000b08:	e02b      	b.n	8000b62 <displayLed+0x212>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4817      	ldr	r0, [pc, #92]	; (8000b70 <displayLed+0x220>)
 8000b12:	f001 fc78 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4816      	ldr	r0, [pc, #88]	; (8000b74 <displayLed+0x224>)
 8000b1c:	f001 fc73 	bl	8002406 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2120      	movs	r1, #32
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <displayLed+0x224>)
 8000b26:	f001 fc6e 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <displayLed+0x224>)
 8000b30:	f001 fc69 	bl	8002406 <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <displayLed+0x228>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d114      	bne.n	8000b66 <displayLed+0x216>
		// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <displayLed+0x224>)
 8000b44:	f001 fc5f 	bl	8002406 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <displayLed+0x220>)
 8000b50:	f001 fc59 	bl	8002406 <HAL_GPIO_WritePin>
		}
		break;
 8000b54:	e007      	b.n	8000b66 <displayLed+0x216>

	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e006      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e004      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e002      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b66:	bf00      	nop
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	200000bc 	.word	0x200000bc

08000b7c <switchMode2>:
 *      Author: Asus
 */

#include "fsm_automatic.h"

void switchMode2() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <switchMode2+0x38>)
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <switchMode2+0x3c>)
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <switchMode2+0x40>)
 8000b88:	f003 fe42 	bl	8004810 <siprintf>
 8000b8c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	4909      	ldr	r1, [pc, #36]	; (8000bbc <switchMode2+0x40>)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <switchMode2+0x44>)
 8000b9a:	f003 f833 	bl	8003c04 <HAL_UART_Transmit>
	status = RED_MAN;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <switchMode2+0x48>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	601a      	str	r2, [r3, #0]
	statusPedestrian = PES_OFF;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <switchMode2+0x4c>)
 8000ba6:	221f      	movs	r2, #31
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	0800509c 	.word	0x0800509c
 8000bb8:	080050b4 	.word	0x080050b4
 8000bbc:	200000c8 	.word	0x200000c8
 8000bc0:	20000244 	.word	0x20000244
 8000bc4:	200000b8 	.word	0x200000b8
 8000bc8:	200000c0 	.word	0x200000c0
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <buzzer_activate>:

void buzzer_activate(int value1, int value2) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value1);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	441a      	add	r2, r3
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <buzzer_activate+0x68>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <buzzer_activate+0x68>)
 8000bf4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*value2));
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd22 	bl	8000648 <__aeabi_i2d>
 8000c04:	a30a      	add	r3, pc, #40	; (adr r3, 8000c30 <buzzer_activate+0x60>)
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f7ff faa1 	bl	8000150 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4909      	ldr	r1, [pc, #36]	; (8000c38 <buzzer_activate+0x68>)
 8000c14:	680c      	ldr	r4, [r1, #0]
 8000c16:	4610      	mov	r0, r2
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f7ff fd7f 	bl	800071c <__aeabi_d2uiz>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	33333333 	.word	0x33333333
 8000c34:	3fe33333 	.word	0x3fe33333
 8000c38:	200001b4 	.word	0x200001b4

08000c3c <fsm_pedestrian>:

void fsm_pedestrian(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <fsm_pedestrian+0x4c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b1e      	cmp	r3, #30
 8000c46:	d002      	beq.n	8000c4e <fsm_pedestrian+0x12>
 8000c48:	2b1f      	cmp	r3, #31
 8000c4a:	d004      	beq.n	8000c56 <fsm_pedestrian+0x1a>
		turnPedestrian_flag = 0;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	default:
		break;
 8000c4c:	e013      	b.n	8000c76 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 1;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <fsm_pedestrian+0x50>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
		break;
 8000c54:	e00f      	b.n	8000c76 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 0;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <fsm_pedestrian+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <fsm_pedestrian+0x54>)
 8000c64:	f001 fbcf 	bl	8002406 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <fsm_pedestrian+0x58>)
 8000c70:	f001 fbc9 	bl	8002406 <HAL_GPIO_WritePin>
		break;
 8000c74:	bf00      	nop
	}

	if(timer3_flag == 1) {
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <fsm_pedestrian+0x5c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d102      	bne.n	8000c84 <fsm_pedestrian+0x48>
		statusPedestrian = PES_OFF;
 8000c7e:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <fsm_pedestrian+0x4c>)
 8000c80:	221f      	movs	r2, #31
 8000c82:	601a      	str	r2, [r3, #0]
	}
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000c0 	.word	0x200000c0
 8000c8c:	200000bc 	.word	0x200000bc
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40010800 	.word	0x40010800
 8000c98:	20000140 	.word	0x20000140

08000c9c <fsm_automatic_run>:

void fsm_automatic_run() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
	switch(status) {
 8000ca2:	4b87      	ldr	r3, [pc, #540]	; (8000ec0 <fsm_automatic_run+0x224>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	f200 81f3 	bhi.w	8001094 <fsm_automatic_run+0x3f8>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <fsm_automatic_run+0x18>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000cfd 	.word	0x08000cfd
 8000cbc:	08000de5 	.word	0x08000de5
 8000cc0:	08000f01 	.word	0x08000f01
 8000cc4:	08000fe7 	.word	0x08000fe7
	case INIT:
		statusPedestrian = PES_OFF;
 8000cc8:	4b7e      	ldr	r3, [pc, #504]	; (8000ec4 <fsm_automatic_run+0x228>)
 8000cca:	221f      	movs	r2, #31
 8000ccc:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN2_AUTO;
 8000cce:	4b7c      	ldr	r3, [pc, #496]	; (8000ec0 <fsm_automatic_run+0x224>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 8000cd4:	4b7c      	ldr	r3, [pc, #496]	; (8000ec8 <fsm_automatic_run+0x22c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7c      	ldr	r2, [pc, #496]	; (8000ecc <fsm_automatic_run+0x230>)
 8000cda:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000cdc:	4b7c      	ldr	r3, [pc, #496]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7c      	ldr	r2, [pc, #496]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000ce2:	6013      	str	r3, [r2, #0]

		setTimer1(greenTimer*100);
 8000ce4:	4b7a      	ldr	r3, [pc, #488]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2264      	movs	r2, #100	; 0x64
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 fdc6 	bl	8001880 <setTimer1>
		setTimer2(100);
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f000 fdd7 	bl	80018a8 <setTimer2>
		break;
 8000cfa:	e1d4      	b.n	80010a6 <fsm_automatic_run+0x40a>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 8000cfc:	2014      	movs	r0, #20
 8000cfe:	f7ff fe27 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000d02:	4b75      	ldr	r3, [pc, #468]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d13d      	bne.n	8000d86 <fsm_automatic_run+0xea>
			int len= sprintf(str,"LED RED      = %d    LED GREEN    = %d\r\n",counter1,counter2);
 8000d0a:	4b70      	ldr	r3, [pc, #448]	; (8000ecc <fsm_automatic_run+0x230>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b71      	ldr	r3, [pc, #452]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4972      	ldr	r1, [pc, #456]	; (8000edc <fsm_automatic_run+0x240>)
 8000d14:	4872      	ldr	r0, [pc, #456]	; (8000ee0 <fsm_automatic_run+0x244>)
 8000d16:	f003 fd7b 	bl	8004810 <siprintf>
 8000d1a:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	496e      	ldr	r1, [pc, #440]	; (8000ee0 <fsm_automatic_run+0x244>)
 8000d26:	486f      	ldr	r0, [pc, #444]	; (8000ee4 <fsm_automatic_run+0x248>)
 8000d28:	f002 ff6c 	bl	8003c04 <HAL_UART_Transmit>
			setTimer2(100);
 8000d2c:	2064      	movs	r0, #100	; 0x64
 8000d2e:	f000 fdbb 	bl	80018a8 <setTimer2>
			counter1--;
 8000d32:	4b66      	ldr	r3, [pc, #408]	; (8000ecc <fsm_automatic_run+0x230>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a64      	ldr	r2, [pc, #400]	; (8000ecc <fsm_automatic_run+0x230>)
 8000d3a:	6013      	str	r3, [r2, #0]
			counter2--;
 8000d3c:	4b65      	ldr	r3, [pc, #404]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a64      	ldr	r2, [pc, #400]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000d44:	6013      	str	r3, [r2, #0]
			if(turnPedestrian_flag == 1) {
 8000d46:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <fsm_automatic_run+0x24c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d115      	bne.n	8000d7a <fsm_automatic_run+0xde>
				buzzer_activate(value_buzzer, value_buzzer);
 8000d4e:	4b67      	ldr	r3, [pc, #412]	; (8000eec <fsm_automatic_run+0x250>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a66      	ldr	r2, [pc, #408]	; (8000eec <fsm_automatic_run+0x250>)
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff39 	bl	8000bd0 <buzzer_activate>
				value_buzzer = value_buzzer - BUZZER_MAX_VALUE/(greenTimer+yellowTimer);
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b63      	ldr	r3, [pc, #396]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a62      	ldr	r2, [pc, #392]	; (8000ef4 <fsm_automatic_run+0x258>)
 8000d6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d6e:	4b5f      	ldr	r3, [pc, #380]	; (8000eec <fsm_automatic_run+0x250>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a5d      	ldr	r2, [pc, #372]	; (8000eec <fsm_automatic_run+0x250>)
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e005      	b.n	8000d86 <fsm_automatic_run+0xea>
			}
			else buzzer_activate(value_buzzer, 0);
 8000d7a:	4b5c      	ldr	r3, [pc, #368]	; (8000eec <fsm_automatic_run+0x250>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff25 	bl	8000bd0 <buzzer_activate>
		}

		if(timer1_flag == 1) {
 8000d86:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <fsm_automatic_run+0x25c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d118      	bne.n	8000dc0 <fsm_automatic_run+0x124>
			status = RED1_YELLOW2_AUTO;
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <fsm_automatic_run+0x224>)
 8000d90:	2203      	movs	r2, #3
 8000d92:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000d94:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <fsm_automatic_run+0x22c>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b4d      	ldr	r3, [pc, #308]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2264      	movs	r2, #100	; 0x64
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fd6b 	bl	8001880 <setTimer1>
			counter1 = redTimer-greenTimer;
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <fsm_automatic_run+0x22c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <fsm_automatic_run+0x230>)
 8000db6:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 8000db8:	4b4d      	ldr	r3, [pc, #308]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a45      	ldr	r2, [pc, #276]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000dbe:	6013      	str	r3, [r2, #0]
		}
		if(turnPedestrian_flag) {
 8000dc0:	4b49      	ldr	r3, [pc, #292]	; (8000ee8 <fsm_automatic_run+0x24c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <fsm_automatic_run+0x134>
			isButtonPressed(0);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff fd03 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}

		break;
 8000dce:	e163      	b.n	8001098 <fsm_automatic_run+0x3fc>
		else if(isButtonPressed(0)) {
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fcff 	bl	80007d4 <isButtonPressed>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 815d 	beq.w	8001098 <fsm_automatic_run+0x3fc>
			switchMode2();
 8000dde:	f7ff fecd 	bl	8000b7c <switchMode2>
		break;
 8000de2:	e159      	b.n	8001098 <fsm_automatic_run+0x3fc>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 8000de4:	2015      	movs	r0, #21
 8000de6:	f7ff fdb3 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d13d      	bne.n	8000e6e <fsm_automatic_run+0x1d2>
			int len= sprintf(str,"LED RED      = %d    LED YELLOW   = %d\r\n",counter1,counter2);
 8000df2:	4b36      	ldr	r3, [pc, #216]	; (8000ecc <fsm_automatic_run+0x230>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b37      	ldr	r3, [pc, #220]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4940      	ldr	r1, [pc, #256]	; (8000efc <fsm_automatic_run+0x260>)
 8000dfc:	4838      	ldr	r0, [pc, #224]	; (8000ee0 <fsm_automatic_run+0x244>)
 8000dfe:	f003 fd07 	bl	8004810 <siprintf>
 8000e02:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	b29a      	uxth	r2, r3
 8000e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0c:	4934      	ldr	r1, [pc, #208]	; (8000ee0 <fsm_automatic_run+0x244>)
 8000e0e:	4835      	ldr	r0, [pc, #212]	; (8000ee4 <fsm_automatic_run+0x248>)
 8000e10:	f002 fef8 	bl	8003c04 <HAL_UART_Transmit>
			setTimer2(100);
 8000e14:	2064      	movs	r0, #100	; 0x64
 8000e16:	f000 fd47 	bl	80018a8 <setTimer2>
			counter1--;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ecc <fsm_automatic_run+0x230>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <fsm_automatic_run+0x230>)
 8000e22:	6013      	str	r3, [r2, #0]
			counter2--;
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	4a2a      	ldr	r2, [pc, #168]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000e2c:	6013      	str	r3, [r2, #0]
			if(turnPedestrian_flag == 1) {
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <fsm_automatic_run+0x24c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d115      	bne.n	8000e62 <fsm_automatic_run+0x1c6>
				buzzer_activate(value_buzzer, value_buzzer);
 8000e36:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <fsm_automatic_run+0x250>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a2c      	ldr	r2, [pc, #176]	; (8000eec <fsm_automatic_run+0x250>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fec5 	bl	8000bd0 <buzzer_activate>
				value_buzzer = value_buzzer - BUZZER_MAX_VALUE/(greenTimer+yellowTimer);
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b29      	ldr	r3, [pc, #164]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <fsm_automatic_run+0x258>)
 8000e52:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <fsm_automatic_run+0x250>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a23      	ldr	r2, [pc, #140]	; (8000eec <fsm_automatic_run+0x250>)
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e005      	b.n	8000e6e <fsm_automatic_run+0x1d2>
			}
			else buzzer_activate(value_buzzer, 0);
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <fsm_automatic_run+0x250>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff feb1 	bl	8000bd0 <buzzer_activate>
		}

		if(timer1_flag == 1) {
 8000e6e:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <fsm_automatic_run+0x25c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d112      	bne.n	8000e9c <fsm_automatic_run+0x200>
			status = GREEN1_RED2_AUTO;
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <fsm_automatic_run+0x224>)
 8000e78:	2204      	movs	r2, #4
 8000e7a:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2264      	movs	r2, #100	; 0x64
 8000e82:	fb02 f303 	mul.w	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fcfa 	bl	8001880 <setTimer1>
			counter1 = greenTimer;
 8000e8c:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <fsm_automatic_run+0x230>)
 8000e92:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <fsm_automatic_run+0x22c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000e9a:	6013      	str	r3, [r2, #0]
		}

		if(turnPedestrian_flag) {
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <fsm_automatic_run+0x24c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <fsm_automatic_run+0x210>
			isButtonPressed(0);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fc95 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}
		break;
 8000eaa:	e0f7      	b.n	800109c <fsm_automatic_run+0x400>
		else if(isButtonPressed(0)) {
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff fc91 	bl	80007d4 <isButtonPressed>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80f1 	beq.w	800109c <fsm_automatic_run+0x400>
			switchMode2();
 8000eba:	f7ff fe5f 	bl	8000b7c <switchMode2>
		break;
 8000ebe:	e0ed      	b.n	800109c <fsm_automatic_run+0x400>
 8000ec0:	200000b8 	.word	0x200000b8
 8000ec4:	200000c0 	.word	0x200000c0
 8000ec8:	20000018 	.word	0x20000018
 8000ecc:	200000b0 	.word	0x200000b0
 8000ed0:	20000020 	.word	0x20000020
 8000ed4:	200000b4 	.word	0x200000b4
 8000ed8:	20000138 	.word	0x20000138
 8000edc:	080050bc 	.word	0x080050bc
 8000ee0:	200000c8 	.word	0x200000c8
 8000ee4:	20000244 	.word	0x20000244
 8000ee8:	200000bc 	.word	0x200000bc
 8000eec:	200000c4 	.word	0x200000c4
 8000ef0:	2000001c 	.word	0x2000001c
 8000ef4:	fffff830 	.word	0xfffff830
 8000ef8:	20000130 	.word	0x20000130
 8000efc:	080050e8 	.word	0x080050e8
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000f00:	2016      	movs	r0, #22
 8000f02:	f7ff fd25 	bl	8000950 <displayLed>
		if (isButtonPressed(3)) {
 8000f06:	2003      	movs	r0, #3
 8000f08:	f7ff fc64 	bl	80007d4 <isButtonPressed>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d00f      	beq.n	8000f32 <fsm_automatic_run+0x296>
			statusPedestrian = PES_ON;
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <fsm_automatic_run+0x414>)
 8000f14:	221e      	movs	r2, #30
 8000f16:	601a      	str	r2, [r3, #0]
			setTimer3((3*redTimer)*100);
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <fsm_automatic_run+0x418>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 fcd3 	bl	80018d0 <setTimer3>
			value_buzzer = BUZZER_MAX_VALUE;
 8000f2a:	4b63      	ldr	r3, [pc, #396]	; (80010b8 <fsm_automatic_run+0x41c>)
 8000f2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f30:	601a      	str	r2, [r3, #0]
		}

		if(turnPedestrian_flag == 1) {
 8000f32:	4b62      	ldr	r3, [pc, #392]	; (80010bc <fsm_automatic_run+0x420>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d105      	bne.n	8000f46 <fsm_automatic_run+0x2aa>
			buzzer_activate(value_buzzer, 0);
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <fsm_automatic_run+0x41c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fe45 	bl	8000bd0 <buzzer_activate>
		}

		if(timer2_flag == 1) {
 8000f46:	4b5e      	ldr	r3, [pc, #376]	; (80010c0 <fsm_automatic_run+0x424>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d11d      	bne.n	8000f8a <fsm_automatic_run+0x2ee>
			int len= sprintf(str,"LED GREEN    = %d    LED RED      = %d\r\n",counter1,counter2);
 8000f4e:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <fsm_automatic_run+0x428>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	495d      	ldr	r1, [pc, #372]	; (80010cc <fsm_automatic_run+0x430>)
 8000f58:	485d      	ldr	r0, [pc, #372]	; (80010d0 <fsm_automatic_run+0x434>)
 8000f5a:	f003 fc59 	bl	8004810 <siprintf>
 8000f5e:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f68:	4959      	ldr	r1, [pc, #356]	; (80010d0 <fsm_automatic_run+0x434>)
 8000f6a:	485a      	ldr	r0, [pc, #360]	; (80010d4 <fsm_automatic_run+0x438>)
 8000f6c:	f002 fe4a 	bl	8003c04 <HAL_UART_Transmit>
			setTimer2(100);
 8000f70:	2064      	movs	r0, #100	; 0x64
 8000f72:	f000 fc99 	bl	80018a8 <setTimer2>
			counter1--;
 8000f76:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <fsm_automatic_run+0x428>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	4a51      	ldr	r2, [pc, #324]	; (80010c4 <fsm_automatic_run+0x428>)
 8000f7e:	6013      	str	r3, [r2, #0]
			counter2--;
 8000f80:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000f88:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <fsm_automatic_run+0x43c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d118      	bne.n	8000fc4 <fsm_automatic_run+0x328>
			status = YELLOW1_RED2_AUTO;
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <fsm_automatic_run+0x440>)
 8000f94:	2205      	movs	r2, #5
 8000f96:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000f98:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <fsm_automatic_run+0x418>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <fsm_automatic_run+0x444>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fc69 	bl	8001880 <setTimer1>
			counter1 = yellowTimer;
 8000fae:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <fsm_automatic_run+0x448>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a44      	ldr	r2, [pc, #272]	; (80010c4 <fsm_automatic_run+0x428>)
 8000fb4:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <fsm_automatic_run+0x418>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <fsm_automatic_run+0x444>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a41      	ldr	r2, [pc, #260]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000fc2:	6013      	str	r3, [r2, #0]
		}

		if(turnPedestrian_flag) {
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <fsm_automatic_run+0x420>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <fsm_automatic_run+0x338>
			isButtonPressed(0);
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f7ff fc01 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}
		break;
 8000fd2:	e065      	b.n	80010a0 <fsm_automatic_run+0x404>
		else if(isButtonPressed(0)) {
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fbfd 	bl	80007d4 <isButtonPressed>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d05f      	beq.n	80010a0 <fsm_automatic_run+0x404>
			switchMode2();
 8000fe0:	f7ff fdcc 	bl	8000b7c <switchMode2>
		break;
 8000fe4:	e05c      	b.n	80010a0 <fsm_automatic_run+0x404>
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 8000fe6:	2017      	movs	r0, #23
 8000fe8:	f7ff fcb2 	bl	8000950 <displayLed>

		if(turnPedestrian_flag == 1) {
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <fsm_automatic_run+0x420>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d105      	bne.n	8001000 <fsm_automatic_run+0x364>
			buzzer_activate(value_buzzer, 0);
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <fsm_automatic_run+0x41c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fde8 	bl	8000bd0 <buzzer_activate>
		}
		if(timer2_flag == 1) {
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <fsm_automatic_run+0x424>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d11d      	bne.n	8001044 <fsm_automatic_run+0x3a8>
			int len= sprintf(str,"LED YELLOW   = %d    LED RED      = %d\r\n",counter1,counter2);
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <fsm_automatic_run+0x428>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <fsm_automatic_run+0x42c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4935      	ldr	r1, [pc, #212]	; (80010e8 <fsm_automatic_run+0x44c>)
 8001012:	482f      	ldr	r0, [pc, #188]	; (80010d0 <fsm_automatic_run+0x434>)
 8001014:	f003 fbfc 	bl	8004810 <siprintf>
 8001018:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	b29a      	uxth	r2, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	492b      	ldr	r1, [pc, #172]	; (80010d0 <fsm_automatic_run+0x434>)
 8001024:	482b      	ldr	r0, [pc, #172]	; (80010d4 <fsm_automatic_run+0x438>)
 8001026:	f002 fded 	bl	8003c04 <HAL_UART_Transmit>
			setTimer2(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f000 fc3c 	bl	80018a8 <setTimer2>
			counter1--;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <fsm_automatic_run+0x428>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a23      	ldr	r2, [pc, #140]	; (80010c4 <fsm_automatic_run+0x428>)
 8001038:	6013      	str	r3, [r2, #0]
			counter2--;
 800103a:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <fsm_automatic_run+0x42c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3b01      	subs	r3, #1
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <fsm_automatic_run+0x42c>)
 8001042:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <fsm_automatic_run+0x43c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d112      	bne.n	8001072 <fsm_automatic_run+0x3d6>
			status = RED1_GREEN2_AUTO;
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <fsm_automatic_run+0x440>)
 800104e:	2202      	movs	r2, #2
 8001050:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <fsm_automatic_run+0x444>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2264      	movs	r2, #100	; 0x64
 8001058:	fb02 f303 	mul.w	r3, r2, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fc0f 	bl	8001880 <setTimer1>
			counter1 = redTimer;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <fsm_automatic_run+0x418>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <fsm_automatic_run+0x428>)
 8001068:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 800106a:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <fsm_automatic_run+0x444>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <fsm_automatic_run+0x42c>)
 8001070:	6013      	str	r3, [r2, #0]
		}

		if(turnPedestrian_flag) {
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <fsm_automatic_run+0x420>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <fsm_automatic_run+0x3e6>
			isButtonPressed(0);
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fbaa 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}
		break;
 8001080:	e010      	b.n	80010a4 <fsm_automatic_run+0x408>
		else if(isButtonPressed(0)) {
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fba6 	bl	80007d4 <isButtonPressed>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00a      	beq.n	80010a4 <fsm_automatic_run+0x408>
			switchMode2();
 800108e:	f7ff fd75 	bl	8000b7c <switchMode2>
		break;
 8001092:	e007      	b.n	80010a4 <fsm_automatic_run+0x408>
	default:
		break;
 8001094:	bf00      	nop
 8001096:	e006      	b.n	80010a6 <fsm_automatic_run+0x40a>
		break;
 8001098:	bf00      	nop
 800109a:	e004      	b.n	80010a6 <fsm_automatic_run+0x40a>
		break;
 800109c:	bf00      	nop
 800109e:	e002      	b.n	80010a6 <fsm_automatic_run+0x40a>
		break;
 80010a0:	bf00      	nop
 80010a2:	e000      	b.n	80010a6 <fsm_automatic_run+0x40a>
		break;
 80010a4:	bf00      	nop
	}
};
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200000c0 	.word	0x200000c0
 80010b4:	20000018 	.word	0x20000018
 80010b8:	200000c4 	.word	0x200000c4
 80010bc:	200000bc 	.word	0x200000bc
 80010c0:	20000138 	.word	0x20000138
 80010c4:	200000b0 	.word	0x200000b0
 80010c8:	200000b4 	.word	0x200000b4
 80010cc:	08005114 	.word	0x08005114
 80010d0:	200000c8 	.word	0x200000c8
 80010d4:	20000244 	.word	0x20000244
 80010d8:	20000130 	.word	0x20000130
 80010dc:	200000b8 	.word	0x200000b8
 80010e0:	20000020 	.word	0x20000020
 80010e4:	2000001c 	.word	0x2000001c
 80010e8:	08005140 	.word	0x08005140

080010ec <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <switchMode3+0x14>)
 80010f2:	220b      	movs	r2, #11
 80010f4:	601a      	str	r2, [r3, #0]
//	counter1 = yellowTimer;
//	setTimer2(100);
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200000b8 	.word	0x200000b8

08001104 <switchMode4>:

void switchMode4() {
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <switchMode4+0x14>)
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
//	counter1 = greenTimer;
//	setTimer2(100);
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	200000b8 	.word	0x200000b8

0800111c <fsm_manual_run>:

void fsm_manual_run() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
	switch(status) {
 8001122:	4b84      	ldr	r3, [pc, #528]	; (8001334 <fsm_manual_run+0x218>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3b0a      	subs	r3, #10
 8001128:	2b05      	cmp	r3, #5
 800112a:	f200 816c 	bhi.w	8001406 <fsm_manual_run+0x2ea>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <fsm_manual_run+0x18>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	0800114d 	.word	0x0800114d
 8001138:	08001225 	.word	0x08001225
 800113c:	08001301 	.word	0x08001301
 8001140:	08001181 	.word	0x08001181
 8001144:	08001259 	.word	0x08001259
 8001148:	08001361 	.word	0x08001361

	case RED_MAN:
		displayLed(RED_MAN);
 800114c:	200a      	movs	r0, #10
 800114e:	f7ff fbff 	bl	8000950 <displayLed>

//		if(timer2_flag == 1) {
//			setTimer2(100);
//		}

		if(isButtonPressed(0)) {
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fb3e 	bl	80007d4 <isButtonPressed>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <fsm_manual_run+0x46>
			switchMode3();
 800115e:	f7ff ffc5 	bl	80010ec <switchMode3>
		}

		if(isButtonPressed(1)) {
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff fb36 	bl	80007d4 <isButtonPressed>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 814d 	beq.w	800140a <fsm_manual_run+0x2ee>
			status = RED_MAN_MODIFY;
 8001170:	4b70      	ldr	r3, [pc, #448]	; (8001334 <fsm_manual_run+0x218>)
 8001172:	220d      	movs	r2, #13
 8001174:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <fsm_manual_run+0x21c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a70      	ldr	r2, [pc, #448]	; (800133c <fsm_manual_run+0x220>)
 800117c:	6013      	str	r3, [r2, #0]
		}
		break;
 800117e:	e144      	b.n	800140a <fsm_manual_run+0x2ee>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 8001180:	200a      	movs	r0, #10
 8001182:	f7ff fbe5 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff fb24 	bl	80007d4 <isButtonPressed>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <fsm_manual_run+0x7c>
			status = RED_MAN;
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <fsm_manual_run+0x218>)
 8001194:	220a      	movs	r2, #10
 8001196:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fb1b 	bl	80007d4 <isButtonPressed>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01b      	beq.n	80011dc <fsm_manual_run+0xc0>
			timerMan++;
 80011a4:	4b65      	ldr	r3, [pc, #404]	; (800133c <fsm_manual_run+0x220>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	4a64      	ldr	r2, [pc, #400]	; (800133c <fsm_manual_run+0x220>)
 80011ac:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <fsm_manual_run+0x220>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4962      	ldr	r1, [pc, #392]	; (8001340 <fsm_manual_run+0x224>)
 80011b6:	4863      	ldr	r0, [pc, #396]	; (8001344 <fsm_manual_run+0x228>)
 80011b8:	f003 fb2a 	bl	8004810 <siprintf>
 80011bc:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	495f      	ldr	r1, [pc, #380]	; (8001344 <fsm_manual_run+0x228>)
 80011c8:	485f      	ldr	r0, [pc, #380]	; (8001348 <fsm_manual_run+0x22c>)
 80011ca:	f002 fd1b 	bl	8003c04 <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 80011ce:	4b5b      	ldr	r3, [pc, #364]	; (800133c <fsm_manual_run+0x220>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b63      	cmp	r3, #99	; 0x63
 80011d4:	dd02      	ble.n	80011dc <fsm_manual_run+0xc0>
 80011d6:	4b59      	ldr	r3, [pc, #356]	; (800133c <fsm_manual_run+0x220>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(2)) {
 80011dc:	2002      	movs	r0, #2
 80011de:	f7ff faf9 	bl	80007d4 <isButtonPressed>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 8112 	beq.w	800140e <fsm_manual_run+0x2f2>
			status = INIT;
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <fsm_manual_run+0x218>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80011f0:	4a56      	ldr	r2, [pc, #344]	; (800134c <fsm_manual_run+0x230>)
 80011f2:	4957      	ldr	r1, [pc, #348]	; (8001350 <fsm_manual_run+0x234>)
 80011f4:	4853      	ldr	r0, [pc, #332]	; (8001344 <fsm_manual_run+0x228>)
 80011f6:	f003 fb0b 	bl	8004810 <siprintf>
 80011fa:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001204:	494f      	ldr	r1, [pc, #316]	; (8001344 <fsm_manual_run+0x228>)
 8001206:	4850      	ldr	r0, [pc, #320]	; (8001348 <fsm_manual_run+0x22c>)
 8001208:	f002 fcfc 	bl	8003c04 <HAL_UART_Transmit>
			redTimer = timerMan;
 800120c:	4b4b      	ldr	r3, [pc, #300]	; (800133c <fsm_manual_run+0x220>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a49      	ldr	r2, [pc, #292]	; (8001338 <fsm_manual_run+0x21c>)
 8001212:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <fsm_manual_run+0x21c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <fsm_manual_run+0x238>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <fsm_manual_run+0x23c>)
 8001220:	6013      	str	r3, [r2, #0]
		}

		break;
 8001222:	e0f4      	b.n	800140e <fsm_manual_run+0x2f2>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 8001224:	200b      	movs	r0, #11
 8001226:	f7ff fb93 	bl	8000950 <displayLed>

//		if(timer2_flag == 1) {
//			setTimer2(100);
//		}

		if(isButtonPressed(0)) {
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fad2 	bl	80007d4 <isButtonPressed>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <fsm_manual_run+0x11e>
			switchMode4();
 8001236:	f7ff ff65 	bl	8001104 <switchMode4>
		}

		if(isButtonPressed(1)) {
 800123a:	2001      	movs	r0, #1
 800123c:	f7ff faca 	bl	80007d4 <isButtonPressed>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 80e5 	beq.w	8001412 <fsm_manual_run+0x2f6>
			status = YELLOW_MAN_MODIFY;
 8001248:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <fsm_manual_run+0x218>)
 800124a:	220e      	movs	r2, #14
 800124c:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 800124e:	4b41      	ldr	r3, [pc, #260]	; (8001354 <fsm_manual_run+0x238>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a3a      	ldr	r2, [pc, #232]	; (800133c <fsm_manual_run+0x220>)
 8001254:	6013      	str	r3, [r2, #0]
		}
		break;
 8001256:	e0dc      	b.n	8001412 <fsm_manual_run+0x2f6>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 8001258:	200b      	movs	r0, #11
 800125a:	f7ff fb79 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 800125e:	2000      	movs	r0, #0
 8001260:	f7ff fab8 	bl	80007d4 <isButtonPressed>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <fsm_manual_run+0x154>
			status = YELLOW_MAN;
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <fsm_manual_run+0x218>)
 800126c:	220b      	movs	r2, #11
 800126e:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff faaf 	bl	80007d4 <isButtonPressed>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01d      	beq.n	80012b8 <fsm_manual_run+0x19c>
			timerMan++;
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <fsm_manual_run+0x220>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	4a2e      	ldr	r2, [pc, #184]	; (800133c <fsm_manual_run+0x220>)
 8001284:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 8001286:	4b2d      	ldr	r3, [pc, #180]	; (800133c <fsm_manual_run+0x220>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4933      	ldr	r1, [pc, #204]	; (800135c <fsm_manual_run+0x240>)
 800128e:	482d      	ldr	r0, [pc, #180]	; (8001344 <fsm_manual_run+0x228>)
 8001290:	f003 fabe 	bl	8004810 <siprintf>
 8001294:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b29a      	uxth	r2, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	4929      	ldr	r1, [pc, #164]	; (8001344 <fsm_manual_run+0x228>)
 80012a0:	4829      	ldr	r0, [pc, #164]	; (8001348 <fsm_manual_run+0x22c>)
 80012a2:	f002 fcaf 	bl	8003c04 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <fsm_manual_run+0x220>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <fsm_manual_run+0x21c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	db02      	blt.n	80012b8 <fsm_manual_run+0x19c>
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <fsm_manual_run+0x220>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(2)) {
 80012b8:	2002      	movs	r0, #2
 80012ba:	f7ff fa8b 	bl	80007d4 <isButtonPressed>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a8 	beq.w	8001416 <fsm_manual_run+0x2fa>
			status = INIT;
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <fsm_manual_run+0x218>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80012cc:	4a1f      	ldr	r2, [pc, #124]	; (800134c <fsm_manual_run+0x230>)
 80012ce:	4920      	ldr	r1, [pc, #128]	; (8001350 <fsm_manual_run+0x234>)
 80012d0:	481c      	ldr	r0, [pc, #112]	; (8001344 <fsm_manual_run+0x228>)
 80012d2:	f003 fa9d 	bl	8004810 <siprintf>
 80012d6:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	b29a      	uxth	r2, r3
 80012dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e0:	4918      	ldr	r1, [pc, #96]	; (8001344 <fsm_manual_run+0x228>)
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <fsm_manual_run+0x22c>)
 80012e4:	f002 fc8e 	bl	8003c04 <HAL_UART_Transmit>
			yellowTimer = timerMan;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <fsm_manual_run+0x220>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <fsm_manual_run+0x238>)
 80012ee:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <fsm_manual_run+0x21c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <fsm_manual_run+0x238>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <fsm_manual_run+0x23c>)
 80012fc:	6013      	str	r3, [r2, #0]
		}
		break;
 80012fe:	e08a      	b.n	8001416 <fsm_manual_run+0x2fa>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8001300:	200c      	movs	r0, #12
 8001302:	f7ff fb25 	bl	8000950 <displayLed>

//		if(timer2_flag == 1) {
//			setTimer2(100);
//		}

		if(isButtonPressed(0)) {
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fa64 	bl	80007d4 <isButtonPressed>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <fsm_manual_run+0x1fc>
			status = INIT;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <fsm_manual_run+0x218>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fa5b 	bl	80007d4 <isButtonPressed>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d07a      	beq.n	800141a <fsm_manual_run+0x2fe>
			status = GREEN_MAN_MODIFY;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <fsm_manual_run+0x218>)
 8001326:	220f      	movs	r2, #15
 8001328:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <fsm_manual_run+0x23c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a03      	ldr	r2, [pc, #12]	; (800133c <fsm_manual_run+0x220>)
 8001330:	6013      	str	r3, [r2, #0]
		}
		break;
 8001332:	e072      	b.n	800141a <fsm_manual_run+0x2fe>
 8001334:	200000b8 	.word	0x200000b8
 8001338:	20000018 	.word	0x20000018
 800133c:	20000144 	.word	0x20000144
 8001340:	0800516c 	.word	0x0800516c
 8001344:	200000c8 	.word	0x200000c8
 8001348:	20000244 	.word	0x20000244
 800134c:	08005180 	.word	0x08005180
 8001350:	08005194 	.word	0x08005194
 8001354:	2000001c 	.word	0x2000001c
 8001358:	20000020 	.word	0x20000020
 800135c:	0800519c 	.word	0x0800519c
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8001360:	200c      	movs	r0, #12
 8001362:	f7ff faf5 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fa34 	bl	80007d4 <isButtonPressed>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <fsm_manual_run+0x25c>
			status = GREEN_MAN;
 8001372:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <fsm_manual_run+0x30c>)
 8001374:	220c      	movs	r2, #12
 8001376:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fa2b 	bl	80007d4 <isButtonPressed>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01d      	beq.n	80013c0 <fsm_manual_run+0x2a4>
			timerMan++;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <fsm_manual_run+0x310>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <fsm_manual_run+0x310>)
 800138c:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <fsm_manual_run+0x310>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4926      	ldr	r1, [pc, #152]	; (8001430 <fsm_manual_run+0x314>)
 8001396:	4827      	ldr	r0, [pc, #156]	; (8001434 <fsm_manual_run+0x318>)
 8001398:	f003 fa3a 	bl	8004810 <siprintf>
 800139c:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	4923      	ldr	r1, [pc, #140]	; (8001434 <fsm_manual_run+0x318>)
 80013a8:	4823      	ldr	r0, [pc, #140]	; (8001438 <fsm_manual_run+0x31c>)
 80013aa:	f002 fc2b 	bl	8003c04 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <fsm_manual_run+0x310>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <fsm_manual_run+0x320>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	db02      	blt.n	80013c0 <fsm_manual_run+0x2a4>
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <fsm_manual_run+0x310>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(2)) {
 80013c0:	2002      	movs	r0, #2
 80013c2:	f7ff fa07 	bl	80007d4 <isButtonPressed>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d028      	beq.n	800141e <fsm_manual_run+0x302>
			status = INIT;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <fsm_manual_run+0x30c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80013d2:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <fsm_manual_run+0x324>)
 80013d4:	491b      	ldr	r1, [pc, #108]	; (8001444 <fsm_manual_run+0x328>)
 80013d6:	4817      	ldr	r0, [pc, #92]	; (8001434 <fsm_manual_run+0x318>)
 80013d8:	f003 fa1a 	bl	8004810 <siprintf>
 80013dc:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	4913      	ldr	r1, [pc, #76]	; (8001434 <fsm_manual_run+0x318>)
 80013e8:	4813      	ldr	r0, [pc, #76]	; (8001438 <fsm_manual_run+0x31c>)
 80013ea:	f002 fc0b 	bl	8003c04 <HAL_UART_Transmit>
			greenTimer = timerMan;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <fsm_manual_run+0x310>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <fsm_manual_run+0x32c>)
 80013f4:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <fsm_manual_run+0x320>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <fsm_manual_run+0x32c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <fsm_manual_run+0x330>)
 8001402:	6013      	str	r3, [r2, #0]
		}
		break;
 8001404:	e00b      	b.n	800141e <fsm_manual_run+0x302>
	default:
		break;
 8001406:	bf00      	nop
 8001408:	e00a      	b.n	8001420 <fsm_manual_run+0x304>
		break;
 800140a:	bf00      	nop
 800140c:	e008      	b.n	8001420 <fsm_manual_run+0x304>
		break;
 800140e:	bf00      	nop
 8001410:	e006      	b.n	8001420 <fsm_manual_run+0x304>
		break;
 8001412:	bf00      	nop
 8001414:	e004      	b.n	8001420 <fsm_manual_run+0x304>
		break;
 8001416:	bf00      	nop
 8001418:	e002      	b.n	8001420 <fsm_manual_run+0x304>
		break;
 800141a:	bf00      	nop
 800141c:	e000      	b.n	8001420 <fsm_manual_run+0x304>
		break;
 800141e:	bf00      	nop
	}
};
 8001420:	bf00      	nop
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200000b8 	.word	0x200000b8
 800142c:	20000144 	.word	0x20000144
 8001430:	080051b0 	.word	0x080051b0
 8001434:	200000c8 	.word	0x200000c8
 8001438:	20000244 	.word	0x20000244
 800143c:	20000018 	.word	0x20000018
 8001440:	08005180 	.word	0x08005180
 8001444:	08005194 	.word	0x08005194
 8001448:	20000020 	.word	0x20000020
 800144c:	2000001c 	.word	0x2000001c

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f000 fc1a 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f822 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 f952 	bl	8001704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001460:	f000 f926 	bl	80016b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001464:	f000 f85e 	bl	8001524 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001468:	f000 f8aa 	bl	80015c0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800146c:	4809      	ldr	r0, [pc, #36]	; (8001494 <main+0x44>)
 800146e:	f001 fc63 	bl	8002d38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001472:	2100      	movs	r1, #0
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <main+0x48>)
 8001476:	f001 fd09 	bl	8002e8c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 800147a:	f7ff f96f 	bl	800075c <initStateForButton>
  status = INIT;
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <main+0x4c>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 8001484:	f7ff fc0a 	bl	8000c9c <fsm_automatic_run>
	  fsm_manual_run();
 8001488:	f7ff fe48 	bl	800111c <fsm_manual_run>
	  fsm_pedestrian();
 800148c:	f7ff fbd6 	bl	8000c3c <fsm_pedestrian>
  {
 8001490:	e7f8      	b.n	8001484 <main+0x34>
 8001492:	bf00      	nop
 8001494:	200001fc 	.word	0x200001fc
 8001498:	200001b4 	.word	0x200001b4
 800149c:	200000b8 	.word	0x200000b8

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 f9a6 	bl	8004800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c6:	2301      	movs	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ca:	2310      	movs	r3, #16
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ce:	2302      	movs	r3, #2
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80014d2:	2300      	movs	r3, #0
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80014d6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 ffcb 	bl	800247c <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014ec:	f000 f9c2 	bl	8001874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f0:	230f      	movs	r3, #15
 80014f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f4:	2302      	movs	r3, #2
 80014f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001500:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2102      	movs	r1, #2
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fa36 	bl	800297c <HAL_RCC_ClockConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001516:	f000 f9ad 	bl	8001874 <Error_Handler>
  }
}
 800151a:	bf00      	nop
 800151c:	3740      	adds	r7, #64	; 0x40
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001540:	4b1e      	ldr	r3, [pc, #120]	; (80015bc <MX_TIM2_Init+0x98>)
 8001542:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001546:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM2_Init+0x98>)
 800154a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800154e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001550:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM2_Init+0x98>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8001556:	4b19      	ldr	r3, [pc, #100]	; (80015bc <MX_TIM2_Init+0x98>)
 8001558:	f44f 721c 	mov.w	r2, #624	; 0x270
 800155c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_TIM2_Init+0x98>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_TIM2_Init+0x98>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <MX_TIM2_Init+0x98>)
 800156c:	f001 fb94 	bl	8002c98 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001576:	f000 f97d 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <MX_TIM2_Init+0x98>)
 8001588:	f001 feec 	bl	8003364 <HAL_TIM_ConfigClockSource>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001592:	f000 f96f 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_TIM2_Init+0x98>)
 80015a4:	f002 fa6e 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80015ae:	f000 f961 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001fc 	.word	0x200001fc

080015c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08e      	sub	sp, #56	; 0x38
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d4:	f107 0320 	add.w	r3, r7, #32
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <MX_TIM3_Init+0xe8>)
 80015f2:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <MX_TIM3_Init+0xec>)
 80015f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <MX_TIM3_Init+0xe8>)
 80015f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_TIM3_Init+0xe8>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 624;
 8001604:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <MX_TIM3_Init+0xe8>)
 8001606:	f44f 721c 	mov.w	r2, #624	; 0x270
 800160a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_TIM3_Init+0xe8>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_TIM3_Init+0xe8>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001618:	4823      	ldr	r0, [pc, #140]	; (80016a8 <MX_TIM3_Init+0xe8>)
 800161a:	f001 fb3d 	bl	8002c98 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001624:	f000 f926 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800162e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001632:	4619      	mov	r1, r3
 8001634:	481c      	ldr	r0, [pc, #112]	; (80016a8 <MX_TIM3_Init+0xe8>)
 8001636:	f001 fe95 	bl	8003364 <HAL_TIM_ConfigClockSource>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001640:	f000 f918 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001644:	4818      	ldr	r0, [pc, #96]	; (80016a8 <MX_TIM3_Init+0xe8>)
 8001646:	f001 fbc9 	bl	8002ddc <HAL_TIM_PWM_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001650:	f000 f910 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4619      	mov	r1, r3
 8001662:	4811      	ldr	r0, [pc, #68]	; (80016a8 <MX_TIM3_Init+0xe8>)
 8001664:	f002 fa0e 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800166e:	f000 f901 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <MX_TIM3_Init+0xe8>)
 800168a:	f001 fda9 	bl	80031e0 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001694:	f000 f8ee 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <MX_TIM3_Init+0xe8>)
 800169a:	f000 f9d9 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001b4 	.word	0x200001b4
 80016ac:	40000400 	.word	0x40000400

080016b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b4:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016b6:	4a12      	ldr	r2, [pc, #72]	; (8001700 <MX_USART2_UART_Init+0x50>)
 80016b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016d6:	220c      	movs	r2, #12
 80016d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_USART2_UART_Init+0x4c>)
 80016e8:	f002 fa3c 	bl	8003b64 <HAL_UART_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f2:	f000 f8bf 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000244 	.word	0x20000244
 8001700:	40004400 	.word	0x40004400

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <MX_GPIO_Init+0x144>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a4a      	ldr	r2, [pc, #296]	; (8001848 <MX_GPIO_Init+0x144>)
 800171e:	f043 0310 	orr.w	r3, r3, #16
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b48      	ldr	r3, [pc, #288]	; (8001848 <MX_GPIO_Init+0x144>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0310 	and.w	r3, r3, #16
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <MX_GPIO_Init+0x144>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a44      	ldr	r2, [pc, #272]	; (8001848 <MX_GPIO_Init+0x144>)
 8001736:	f043 0320 	orr.w	r3, r3, #32
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b42      	ldr	r3, [pc, #264]	; (8001848 <MX_GPIO_Init+0x144>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <MX_GPIO_Init+0x144>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a3e      	ldr	r2, [pc, #248]	; (8001848 <MX_GPIO_Init+0x144>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <MX_GPIO_Init+0x144>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <MX_GPIO_Init+0x144>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <MX_GPIO_Init+0x144>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b36      	ldr	r3, [pc, #216]	; (8001848 <MX_GPIO_Init+0x144>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800177e:	4833      	ldr	r0, [pc, #204]	; (800184c <MX_GPIO_Init+0x148>)
 8001780:	f000 fe41 	bl	8002406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800178a:	4831      	ldr	r0, [pc, #196]	; (8001850 <MX_GPIO_Init+0x14c>)
 800178c:	f000 fe3b 	bl	8002406 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MX_GPIO_Init+0x150>)
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	4619      	mov	r1, r3
 80017a4:	482c      	ldr	r0, [pc, #176]	; (8001858 <MX_GPIO_Init+0x154>)
 80017a6:	f000 fc93 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 80017aa:	2301      	movs	r3, #1
 80017ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4619      	mov	r1, r3
 80017bc:	4823      	ldr	r0, [pc, #140]	; (800184c <MX_GPIO_Init+0x148>)
 80017be:	f000 fc87 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 80017c2:	2312      	movs	r3, #18
 80017c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	481d      	ldr	r0, [pc, #116]	; (800184c <MX_GPIO_Init+0x148>)
 80017d6:	f000 fc7b 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 80017da:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80017de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	2301      	movs	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	4816      	ldr	r0, [pc, #88]	; (800184c <MX_GPIO_Init+0x148>)
 80017f4:	f000 fc6c 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001800:	2301      	movs	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	4811      	ldr	r0, [pc, #68]	; (8001850 <MX_GPIO_Init+0x14c>)
 800180c:	f000 fc60 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001810:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	4809      	ldr	r0, [pc, #36]	; (8001850 <MX_GPIO_Init+0x14c>)
 800182a:	f000 fc51 	bl	80020d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2028      	movs	r0, #40	; 0x28
 8001834:	f000 fb63 	bl	8001efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001838:	2028      	movs	r0, #40	; 0x28
 800183a:	f000 fb7c 	bl	8001f36 <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	40010800 	.word	0x40010800
 8001850:	40010c00 	.word	0x40010c00
 8001854:	10110000 	.word	0x10110000
 8001858:	40011000 	.word	0x40011000

0800185c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	 timerRun();
 8001864:	f000 f848 	bl	80018f8 <timerRun>
	 getKeyInput();
 8001868:	f7fe ffde 	bl	8000828 <getKeyInput>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	e7fe      	b.n	800187c <Error_Handler+0x8>
	...

08001880 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <setTimer1+0x20>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <setTimer1+0x24>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000012c 	.word	0x2000012c
 80018a4:	20000130 	.word	0x20000130

080018a8 <setTimer2>:

void setTimer2(int duration) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80018b0:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <setTimer2+0x20>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <setTimer2+0x24>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000134 	.word	0x20000134
 80018cc:	20000138 	.word	0x20000138

080018d0 <setTimer3>:

void setTimer3(int duration) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80018d8:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <setTimer3+0x20>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <setTimer3+0x24>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000013c 	.word	0x2000013c
 80018f4:	20000140 	.word	0x20000140

080018f8 <timerRun>:
void timerRun() {
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <timerRun+0x6c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	dd0b      	ble.n	800191c <timerRun+0x24>
		timer1_counter--;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <timerRun+0x6c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3b01      	subs	r3, #1
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <timerRun+0x6c>)
 800190c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <timerRun+0x6c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	dc02      	bgt.n	800191c <timerRun+0x24>
			timer1_flag = 1;
 8001916:	4b14      	ldr	r3, [pc, #80]	; (8001968 <timerRun+0x70>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <timerRun+0x74>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	dd0b      	ble.n	800193c <timerRun+0x44>
		timer2_counter--;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <timerRun+0x74>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4a10      	ldr	r2, [pc, #64]	; (800196c <timerRun+0x74>)
 800192c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <timerRun+0x74>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	dc02      	bgt.n	800193c <timerRun+0x44>
			timer2_flag = 1;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <timerRun+0x78>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <timerRun+0x7c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd0b      	ble.n	800195c <timerRun+0x64>
		timer3_counter--;
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <timerRun+0x7c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <timerRun+0x7c>)
 800194c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <timerRun+0x7c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	dc02      	bgt.n	800195c <timerRun+0x64>
			timer3_flag = 1;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <timerRun+0x80>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	2000012c 	.word	0x2000012c
 8001968:	20000130 	.word	0x20000130
 800196c:	20000134 	.word	0x20000134
 8001970:	20000138 	.word	0x20000138
 8001974:	2000013c 	.word	0x2000013c
 8001978:	20000140 	.word	0x20000140

0800197c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <HAL_MspInit+0x5c>)
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <HAL_MspInit+0x5c>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6193      	str	r3, [r2, #24]
 800198e:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_MspInit+0x5c>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_MspInit+0x5c>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_MspInit+0x5c>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_MspInit+0x60>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <HAL_MspInit+0x60>)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f0:	d114      	bne.n	8001a1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_TIM_Base_MspInit+0x68>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_TIM_Base_MspInit+0x68>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_TIM_Base_MspInit+0x68>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f000 fa75 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a14:	201c      	movs	r0, #28
 8001a16:	f000 fa8e 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a1a:	e010      	b.n	8001a3e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_TIM_Base_MspInit+0x6c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d10b      	bne.n	8001a3e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_TIM_Base_MspInit+0x68>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_TIM_Base_MspInit+0x68>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	61d3      	str	r3, [r2, #28]
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_TIM_Base_MspInit+0x68>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000400 	.word	0x40000400

08001a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <HAL_TIM_MspPostInit+0x58>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d117      	bne.n	8001aa0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_TIM_MspPostInit+0x5c>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_TIM_MspPostInit+0x5c>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_TIM_MspPostInit+0x5c>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 8001a88:	2340      	movs	r3, #64	; 0x40
 8001a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_TIM_MspPostInit+0x60>)
 8001a9c:	f000 fb18 	bl	80020d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a19      	ldr	r2, [pc, #100]	; (8001b34 <HAL_UART_MspInit+0x80>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d12b      	bne.n	8001b2c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ade:	61d3      	str	r3, [r2, #28]
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_UART_MspInit+0x84>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b04:	230c      	movs	r3, #12
 8001b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4619      	mov	r1, r3
 8001b16:	4809      	ldr	r0, [pc, #36]	; (8001b3c <HAL_UART_MspInit+0x88>)
 8001b18:	f000 fada 	bl	80020d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2026      	movs	r0, #38	; 0x26
 8001b22:	f000 f9ec 	bl	8001efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b26:	2026      	movs	r0, #38	; 0x26
 8001b28:	f000 fa05 	bl	8001f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40004400 	.word	0x40004400
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010800 	.word	0x40010800

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b86:	f000 f8c7 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <TIM2_IRQHandler+0x10>)
 8001b96:	f001 fa1b 	bl	8002fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200001fc 	.word	0x200001fc

08001ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ba8:	4802      	ldr	r0, [pc, #8]	; (8001bb4 <USART2_IRQHandler+0x10>)
 8001baa:	f002 f8af 	bl	8003d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000244 	.word	0x20000244

08001bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bc0:	f000 fc3a 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f002 fdd8 	bl	80047ac <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20005000 	.word	0x20005000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	20000148 	.word	0x20000148
 8001c30:	200002a0 	.word	0x200002a0

08001c34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c40:	f7ff fff8 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480b      	ldr	r0, [pc, #44]	; (8001c74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c48:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c5c:	4c09      	ldr	r4, [pc, #36]	; (8001c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c6a:	f002 fda5 	bl	80047b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7ff fbef 	bl	8001450 <main>
  bx lr
 8001c72:	4770      	bx	lr
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001c7c:	0800522c 	.word	0x0800522c
  ldr r2, =_sbss
 8001c80:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001c84:	200002a0 	.word	0x200002a0

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_Init+0x28>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_Init+0x28>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f923 	bl	8001ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f000 f808 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca8:	f7ff fe68 	bl	800197c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f93b 	bl	8001f52 <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f903 	bl	8001efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000024 	.word	0x20000024
 8001d10:	2000002c 	.word	0x2000002c
 8001d14:	20000028 	.word	0x20000028

08001d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_IncTick+0x1c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x20>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_IncTick+0x20>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	2000002c 	.word	0x2000002c
 8001d38:	2000028c 	.word	0x2000028c

08001d3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_GetTick+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000028c 	.word	0x2000028c

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4906      	ldr	r1, [pc, #24]	; (8001de8 <__NVIC_EnableIRQ+0x34>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100

08001dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	db0a      	blt.n	8001e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	490c      	ldr	r1, [pc, #48]	; (8001e38 <__NVIC_SetPriority+0x4c>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	0112      	lsls	r2, r2, #4
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e14:	e00a      	b.n	8001e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4908      	ldr	r1, [pc, #32]	; (8001e3c <__NVIC_SetPriority+0x50>)
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	3b04      	subs	r3, #4
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	440b      	add	r3, r1
 8001e2a:	761a      	strb	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f1c3 0307 	rsb	r3, r3, #7
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	bf28      	it	cs
 8001e5e:	2304      	movcs	r3, #4
 8001e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3304      	adds	r3, #4
 8001e66:	2b06      	cmp	r3, #6
 8001e68:	d902      	bls.n	8001e70 <NVIC_EncodePriority+0x30>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3b03      	subs	r3, #3
 8001e6e:	e000      	b.n	8001e72 <NVIC_EncodePriority+0x32>
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	401a      	ands	r2, r3
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	43d9      	mvns	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e98:	4313      	orrs	r3, r2
         );
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3724      	adds	r7, #36	; 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb4:	d301      	bcc.n	8001eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <SysTick_Config+0x40>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f7ff ff90 	bl	8001dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SysTick_Config+0x40>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ed2:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <SysTick_Config+0x40>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	e000e010 	.word	0xe000e010

08001ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff2d 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f10:	f7ff ff42 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68b9      	ldr	r1, [r7, #8]
 8001f1a:	6978      	ldr	r0, [r7, #20]
 8001f1c:	f7ff ff90 	bl	8001e40 <NVIC_EncodePriority>
 8001f20:	4602      	mov	r2, r0
 8001f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff5f 	bl	8001dec <__NVIC_SetPriority>
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff35 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffa2 	bl	8001ea4 <SysTick_Config>
 8001f60:	4603      	mov	r3, r0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b085      	sub	sp, #20
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d008      	beq.n	8001f94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2204      	movs	r2, #4
 8001f86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e020      	b.n	8001fd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 020e 	bic.w	r2, r2, #14
 8001fa2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr

08001fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d005      	beq.n	8002004 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	e051      	b.n	80020a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020e 	bic.w	r2, r2, #14
 8002012:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_DMA_Abort_IT+0xd4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d029      	beq.n	8002082 <HAL_DMA_Abort_IT+0xa2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_DMA_Abort_IT+0xd8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d022      	beq.n	800207e <HAL_DMA_Abort_IT+0x9e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_DMA_Abort_IT+0xdc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01a      	beq.n	8002078 <HAL_DMA_Abort_IT+0x98>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_DMA_Abort_IT+0xe0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d012      	beq.n	8002072 <HAL_DMA_Abort_IT+0x92>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_DMA_Abort_IT+0xe4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00a      	beq.n	800206c <HAL_DMA_Abort_IT+0x8c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_DMA_Abort_IT+0xe8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d102      	bne.n	8002066 <HAL_DMA_Abort_IT+0x86>
 8002060:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002064:	e00e      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206a:	e00b      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 800206c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002070:	e008      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002076:	e005      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207c:	e002      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 800207e:	2310      	movs	r3, #16
 8002080:	e000      	b.n	8002084 <HAL_DMA_Abort_IT+0xa4>
 8002082:	2301      	movs	r3, #1
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_DMA_Abort_IT+0xec>)
 8002086:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
    } 
  }
  return status;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40020008 	.word	0x40020008
 80020b8:	4002001c 	.word	0x4002001c
 80020bc:	40020030 	.word	0x40020030
 80020c0:	40020044 	.word	0x40020044
 80020c4:	40020058 	.word	0x40020058
 80020c8:	4002006c 	.word	0x4002006c
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b08b      	sub	sp, #44	; 0x2c
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020e2:	e169      	b.n	80023b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020e4:	2201      	movs	r2, #1
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 8158 	bne.w	80023b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4a9a      	ldr	r2, [pc, #616]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d05e      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 800210c:	4a98      	ldr	r2, [pc, #608]	; (8002370 <HAL_GPIO_Init+0x2a0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d875      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 8002112:	4a98      	ldr	r2, [pc, #608]	; (8002374 <HAL_GPIO_Init+0x2a4>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d058      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 8002118:	4a96      	ldr	r2, [pc, #600]	; (8002374 <HAL_GPIO_Init+0x2a4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d86f      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 800211e:	4a96      	ldr	r2, [pc, #600]	; (8002378 <HAL_GPIO_Init+0x2a8>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d052      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 8002124:	4a94      	ldr	r2, [pc, #592]	; (8002378 <HAL_GPIO_Init+0x2a8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d869      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 800212a:	4a94      	ldr	r2, [pc, #592]	; (800237c <HAL_GPIO_Init+0x2ac>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d04c      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 8002130:	4a92      	ldr	r2, [pc, #584]	; (800237c <HAL_GPIO_Init+0x2ac>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d863      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 8002136:	4a92      	ldr	r2, [pc, #584]	; (8002380 <HAL_GPIO_Init+0x2b0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d046      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
 800213c:	4a90      	ldr	r2, [pc, #576]	; (8002380 <HAL_GPIO_Init+0x2b0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d85d      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 8002142:	2b12      	cmp	r3, #18
 8002144:	d82a      	bhi.n	800219c <HAL_GPIO_Init+0xcc>
 8002146:	2b12      	cmp	r3, #18
 8002148:	d859      	bhi.n	80021fe <HAL_GPIO_Init+0x12e>
 800214a:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <HAL_GPIO_Init+0x80>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	080021cb 	.word	0x080021cb
 8002154:	080021a5 	.word	0x080021a5
 8002158:	080021b7 	.word	0x080021b7
 800215c:	080021f9 	.word	0x080021f9
 8002160:	080021ff 	.word	0x080021ff
 8002164:	080021ff 	.word	0x080021ff
 8002168:	080021ff 	.word	0x080021ff
 800216c:	080021ff 	.word	0x080021ff
 8002170:	080021ff 	.word	0x080021ff
 8002174:	080021ff 	.word	0x080021ff
 8002178:	080021ff 	.word	0x080021ff
 800217c:	080021ff 	.word	0x080021ff
 8002180:	080021ff 	.word	0x080021ff
 8002184:	080021ff 	.word	0x080021ff
 8002188:	080021ff 	.word	0x080021ff
 800218c:	080021ff 	.word	0x080021ff
 8002190:	080021ff 	.word	0x080021ff
 8002194:	080021ad 	.word	0x080021ad
 8002198:	080021c1 	.word	0x080021c1
 800219c:	4a79      	ldr	r2, [pc, #484]	; (8002384 <HAL_GPIO_Init+0x2b4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d013      	beq.n	80021ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021a2:	e02c      	b.n	80021fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	623b      	str	r3, [r7, #32]
          break;
 80021aa:	e029      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	3304      	adds	r3, #4
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e024      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	3308      	adds	r3, #8
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e01f      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	330c      	adds	r3, #12
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e01a      	b.n	8002200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021d2:	2304      	movs	r3, #4
 80021d4:	623b      	str	r3, [r7, #32]
          break;
 80021d6:	e013      	b.n	8002200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e0:	2308      	movs	r3, #8
 80021e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	611a      	str	r2, [r3, #16]
          break;
 80021ea:	e009      	b.n	8002200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ec:	2308      	movs	r3, #8
 80021ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	615a      	str	r2, [r3, #20]
          break;
 80021f6:	e003      	b.n	8002200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021f8:	2300      	movs	r3, #0
 80021fa:	623b      	str	r3, [r7, #32]
          break;
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x130>
          break;
 80021fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d801      	bhi.n	800220a <HAL_GPIO_Init+0x13a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	e001      	b.n	800220e <HAL_GPIO_Init+0x13e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3304      	adds	r3, #4
 800220e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2bff      	cmp	r3, #255	; 0xff
 8002214:	d802      	bhi.n	800221c <HAL_GPIO_Init+0x14c>
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x152>
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	3b08      	subs	r3, #8
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	210f      	movs	r1, #15
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	6a39      	ldr	r1, [r7, #32]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	431a      	orrs	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80b1 	beq.w	80023b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002250:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4a4c      	ldr	r2, [pc, #304]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6193      	str	r3, [r2, #24]
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_GPIO_Init+0x2b8>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002268:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_GPIO_Init+0x2bc>)
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	089b      	lsrs	r3, r3, #2
 800226e:	3302      	adds	r3, #2
 8002270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	; (8002390 <HAL_GPIO_Init+0x2c0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d013      	beq.n	80022bc <HAL_GPIO_Init+0x1ec>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3f      	ldr	r2, [pc, #252]	; (8002394 <HAL_GPIO_Init+0x2c4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d00d      	beq.n	80022b8 <HAL_GPIO_Init+0x1e8>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3e      	ldr	r2, [pc, #248]	; (8002398 <HAL_GPIO_Init+0x2c8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d007      	beq.n	80022b4 <HAL_GPIO_Init+0x1e4>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3d      	ldr	r2, [pc, #244]	; (800239c <HAL_GPIO_Init+0x2cc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d101      	bne.n	80022b0 <HAL_GPIO_Init+0x1e0>
 80022ac:	2303      	movs	r3, #3
 80022ae:	e006      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022b0:	2304      	movs	r3, #4
 80022b2:	e004      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e002      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_GPIO_Init+0x1ee>
 80022bc:	2300      	movs	r3, #0
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	f002 0203 	and.w	r2, r2, #3
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	4093      	lsls	r3, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ce:	492f      	ldr	r1, [pc, #188]	; (800238c <HAL_GPIO_Init+0x2bc>)
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022e8:	4b2d      	ldr	r3, [pc, #180]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	492c      	ldr	r1, [pc, #176]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	608b      	str	r3, [r1, #8]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	4928      	ldr	r1, [pc, #160]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	4922      	ldr	r1, [pc, #136]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	491e      	ldr	r1, [pc, #120]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4918      	ldr	r1, [pc, #96]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e006      	b.n	8002354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	43db      	mvns	r3, r3
 800234e:	4914      	ldr	r1, [pc, #80]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002350:	4013      	ands	r3, r2
 8002352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d021      	beq.n	80023a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	490e      	ldr	r1, [pc, #56]	; (80023a0 <HAL_GPIO_Init+0x2d0>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e021      	b.n	80023b2 <HAL_GPIO_Init+0x2e2>
 800236e:	bf00      	nop
 8002370:	10320000 	.word	0x10320000
 8002374:	10310000 	.word	0x10310000
 8002378:	10220000 	.word	0x10220000
 800237c:	10210000 	.word	0x10210000
 8002380:	10120000 	.word	0x10120000
 8002384:	10110000 	.word	0x10110000
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	40010800 	.word	0x40010800
 8002394:	40010c00 	.word	0x40010c00
 8002398:	40011000 	.word	0x40011000
 800239c:	40011400 	.word	0x40011400
 80023a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_GPIO_Init+0x304>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	4909      	ldr	r1, [pc, #36]	; (80023d4 <HAL_GPIO_Init+0x304>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	3301      	adds	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	fa22 f303 	lsr.w	r3, r2, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f47f ae8e 	bne.w	80020e4 <HAL_GPIO_Init+0x14>
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	372c      	adds	r7, #44	; 0x2c
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40010400 	.word	0x40010400

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
 8002412:	4613      	mov	r3, r2
 8002414:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002416:	787b      	ldrb	r3, [r7, #1]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002422:	e003      	b.n	800242c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	041a      	lsls	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
	...

08002438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d006      	beq.n	800245c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f806 	bl	8002468 <HAL_GPIO_EXTI_Callback>
  }
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e26c      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	4b92      	ldr	r3, [pc, #584]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024a8:	4b8f      	ldr	r3, [pc, #572]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
 80024b4:	4b8c      	ldr	r3, [pc, #560]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b89      	ldr	r3, [pc, #548]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x12c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d168      	bne.n	80025a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e246      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x76>
 80024e4:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a7f      	ldr	r2, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7a      	ldr	r2, [pc, #488]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b78      	ldr	r3, [pc, #480]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a77      	ldr	r2, [pc, #476]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0xbc>
 800251e:	4b72      	ldr	r3, [pc, #456]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a71      	ldr	r2, [pc, #452]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xd4>
 8002538:	4b6b      	ldr	r3, [pc, #428]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a67      	ldr	r2, [pc, #412]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fbf0 	bl	8001d3c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fbec 	bl	8001d3c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1fa      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xe4>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fbdc 	bl	8001d3c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fbd8 	bl	8001d3c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1e6      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x10c>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025c2:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
 80025ce:	4b46      	ldr	r3, [pc, #280]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1ba      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4939      	ldr	r1, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fb91 	bl	8001d3c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fb8d 	bl	8001d3c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e19b      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4927      	ldr	r1, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_OscConfig+0x270>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff fb70 	bl	8001d3c <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002660:	f7ff fb6c 	bl	8001d3c <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e17a      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03a      	beq.n	8002700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d019      	beq.n	80026c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff fb50 	bl	8001d3c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fb4c 	bl	8001d3c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e15a      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026be:	2001      	movs	r0, #1
 80026c0:	f000 facc 	bl	8002c5c <RCC_Delay>
 80026c4:	e01c      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7ff fb36 	bl	8001d3c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d4:	f7ff fb32 	bl	8001d3c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d908      	bls.n	80026f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e140      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
 80026ec:	42420000 	.word	0x42420000
 80026f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	4b9e      	ldr	r3, [pc, #632]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1e9      	bne.n	80026d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80a6 	beq.w	800285a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2300      	movs	r3, #0
 8002710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002712:	4b97      	ldr	r3, [pc, #604]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10d      	bne.n	800273a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271e:	4b94      	ldr	r3, [pc, #592]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a93      	ldr	r2, [pc, #588]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]
 800272a:	4b91      	ldr	r3, [pc, #580]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002736:	2301      	movs	r3, #1
 8002738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273a:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d118      	bne.n	8002778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002746:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a8a      	ldr	r2, [pc, #552]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002752:	f7ff faf3 	bl	8001d3c <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275a:	f7ff faef 	bl	8001d3c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0fd      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d106      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002780:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a7a      	ldr	r2, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6213      	str	r3, [r2, #32]
 800278c:	e02d      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x334>
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a75      	ldr	r2, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a72      	ldr	r2, [pc, #456]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
 80027ae:	e01c      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x356>
 80027b8:	4b6d      	ldr	r3, [pc, #436]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4a6c      	ldr	r2, [pc, #432]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	6213      	str	r3, [r2, #32]
 80027c4:	4b6a      	ldr	r3, [pc, #424]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4a69      	ldr	r2, [pc, #420]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6213      	str	r3, [r2, #32]
 80027d0:	e00b      	b.n	80027ea <HAL_RCC_OscConfig+0x36e>
 80027d2:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a66      	ldr	r2, [pc, #408]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d015      	beq.n	800281e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff faa3 	bl	8001d3c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff fa9f 	bl	8001d3c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0ab      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002810:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RCC_OscConfig+0x37e>
 800281c:	e014      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7ff fa8d 	bl	8001d3c <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7ff fa89 	bl	8001d3c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e095      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283c:	4b4c      	ldr	r3, [pc, #304]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ee      	bne.n	8002826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d105      	bne.n	800285a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8081 	beq.w	8002966 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	4b42      	ldr	r3, [pc, #264]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 030c 	and.w	r3, r3, #12
 800286c:	2b08      	cmp	r3, #8
 800286e:	d061      	beq.n	8002934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d146      	bne.n	8002906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_OscConfig+0x4fc>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7ff fa5d 	bl	8001d3c <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002886:	f7ff fa59 	bl	8001d3c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e067      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	492d      	ldr	r1, [pc, #180]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a19      	ldr	r1, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	430b      	orrs	r3, r1
 80028d2:	4927      	ldr	r1, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x4fc>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7ff fa2d 	bl	8001d3c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7ff fa29 	bl	8001d3c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e037      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
 8002904:	e02f      	b.n	8002966 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_RCC_OscConfig+0x4fc>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fa16 	bl	8001d3c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff fa12 	bl	8001d3c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e020      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x498>
 8002932:	e018      	b.n	8002966 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e013      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	429a      	cmp	r2, r3
 8002952:	d106      	bne.n	8002962 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	429a      	cmp	r2, r3
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
 8002978:	42420060 	.word	0x42420060

0800297c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d0      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 0207 	bic.w	r2, r3, #7
 80029a6:	4965      	ldr	r1, [pc, #404]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4a58      	ldr	r2, [pc, #352]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a52      	ldr	r2, [pc, #328]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80029fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d040      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e073      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4936      	ldr	r1, [pc, #216]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7ff f966 	bl	8001d3c <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7ff f962 	bl	8001d3c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e053      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	4922      	ldr	r1, [pc, #136]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1cc>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1d0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff f8c4 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	080051c4 	.word	0x080051c4
 8002b48:	20000024 	.word	0x20000024
 8002b4c:	20000028 	.word	0x20000028

08002b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x30>
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x36>
 8002b7e:	e027      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b82:	613b      	str	r3, [r7, #16]
      break;
 8002b84:	e027      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	0c9b      	lsrs	r3, r3, #18
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	4a17      	ldr	r2, [pc, #92]	; (8002bec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0c5b      	lsrs	r3, r3, #17
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bb2:	fb02 f203 	mul.w	r2, r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e004      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	613b      	str	r3, [r7, #16]
      break;
 8002bce:	e002      	b.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bd2:	613b      	str	r3, [r7, #16]
      break;
 8002bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bd6:	693b      	ldr	r3, [r7, #16]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	371c      	adds	r7, #28
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	007a1200 	.word	0x007a1200
 8002bec:	080051dc 	.word	0x080051dc
 8002bf0:	080051ec 	.word	0x080051ec
 8002bf4:	003d0900 	.word	0x003d0900

08002bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bfc:	4b02      	ldr	r3, [pc, #8]	; (8002c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	20000024 	.word	0x20000024

08002c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f7ff fff2 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c22:	5ccb      	ldrb	r3, [r1, r3]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	080051d4 	.word	0x080051d4

08002c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c38:	f7ff ffde 	bl	8002bf8 <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	0adb      	lsrs	r3, r3, #11
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40021000 	.word	0x40021000
 8002c58:	080051d4 	.word	0x080051d4

08002c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c64:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <RCC_Delay+0x34>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0a      	ldr	r2, [pc, #40]	; (8002c94 <RCC_Delay+0x38>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a5b      	lsrs	r3, r3, #9
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c78:	bf00      	nop
  }
  while (Delay --);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	60fa      	str	r2, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f9      	bne.n	8002c78 <RCC_Delay+0x1c>
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr
 8002c90:	20000024 	.word	0x20000024
 8002c94:	10624dd3 	.word	0x10624dd3

08002c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e041      	b.n	8002d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe fe8e 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	f000 fc30 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d001      	beq.n	8002d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e03a      	b.n	8002dc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <HAL_TIM_Base_Start_IT+0x98>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x58>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7a:	d009      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x58>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIM_Base_Start_IT+0x58>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d010      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	e007      	b.n	8002dc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800

08002ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e041      	b.n	8002e72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f839 	bl	8002e7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fb8e 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_TIM_PWM_Start+0x24>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	bf14      	ite	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	2300      	moveq	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e022      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d109      	bne.n	8002eca <HAL_TIM_PWM_Start+0x3e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	bf14      	ite	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	2300      	moveq	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	e015      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d109      	bne.n	8002ee4 <HAL_TIM_PWM_Start+0x58>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	bf14      	ite	ne
 8002edc:	2301      	movne	r3, #1
 8002ede:	2300      	moveq	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x6a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	bf14      	ite	ne
 8002ef0:	2301      	movne	r3, #1
 8002ef2:	2300      	moveq	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e05e      	b.n	8002fbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x82>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0x92>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xa2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_PWM_Start+0xaa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fd7c 	bl	8003a3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <HAL_TIM_PWM_Start+0x138>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d107      	bne.n	8002f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_TIM_PWM_Start+0x138>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xfa>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d009      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xfa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <HAL_TIM_PWM_Start+0x13c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_PWM_Start+0xfa>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <HAL_TIM_PWM_Start+0x140>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d111      	bne.n	8002faa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d010      	beq.n	8002fba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa8:	e007      	b.n	8002fba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800

08002fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0202 	mvn.w	r2, #2
 8002ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fa76 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fa69 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fa78 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b04      	cmp	r3, #4
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0204 	mvn.w	r2, #4
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fa4c 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa3f 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fa4e 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b08      	cmp	r3, #8
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0208 	mvn.w	r2, #8
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2204      	movs	r2, #4
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fa22 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa15 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fa24 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d122      	bne.n	8003128 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d11b      	bne.n	8003128 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0210 	mvn.w	r2, #16
 80030f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2208      	movs	r2, #8
 80030fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	69db      	ldr	r3, [r3, #28]
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f9f8 	bl	8003504 <HAL_TIM_IC_CaptureCallback>
 8003114:	e005      	b.n	8003122 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f9eb 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f9fa 	bl	8003516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10e      	bne.n	8003154 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d107      	bne.n	8003154 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0201 	mvn.w	r2, #1
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fe fb84 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d10e      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b80      	cmp	r3, #128	; 0x80
 800316e:	d107      	bne.n	8003180 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fce9 	bl	8003b52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d10e      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	2b40      	cmp	r3, #64	; 0x40
 800319a:	d107      	bne.n	80031ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9be 	bl	8003528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d10e      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d107      	bne.n	80031d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0220 	mvn.w	r2, #32
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fcb4 	bl	8003b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e0ae      	b.n	800335c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b0c      	cmp	r3, #12
 800320a:	f200 809f 	bhi.w	800334c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003249 	.word	0x08003249
 8003218:	0800334d 	.word	0x0800334d
 800321c:	0800334d 	.word	0x0800334d
 8003220:	0800334d 	.word	0x0800334d
 8003224:	08003289 	.word	0x08003289
 8003228:	0800334d 	.word	0x0800334d
 800322c:	0800334d 	.word	0x0800334d
 8003230:	0800334d 	.word	0x0800334d
 8003234:	080032cb 	.word	0x080032cb
 8003238:	0800334d 	.word	0x0800334d
 800323c:	0800334d 	.word	0x0800334d
 8003240:	0800334d 	.word	0x0800334d
 8003244:	0800330b 	.word	0x0800330b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f9d6 	bl	8003600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0208 	orr.w	r2, r2, #8
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0204 	bic.w	r2, r2, #4
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	619a      	str	r2, [r3, #24]
      break;
 8003286:	e064      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fa1c 	bl	80036cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6999      	ldr	r1, [r3, #24]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	021a      	lsls	r2, r3, #8
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]
      break;
 80032c8:	e043      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa65 	bl	80037a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0208 	orr.w	r2, r2, #8
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0204 	bic.w	r2, r2, #4
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	61da      	str	r2, [r3, #28]
      break;
 8003308:	e023      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 faaf 	bl	8003874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69d9      	ldr	r1, [r3, #28]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	021a      	lsls	r2, r3, #8
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	61da      	str	r2, [r3, #28]
      break;
 800334a:	e002      	b.n	8003352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
      break;
 8003350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_TIM_ConfigClockSource+0x1c>
 800337c:	2302      	movs	r3, #2
 800337e:	e0b4      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x186>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2202      	movs	r2, #2
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800339e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b8:	d03e      	beq.n	8003438 <HAL_TIM_ConfigClockSource+0xd4>
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033be:	f200 8087 	bhi.w	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c6:	f000 8086 	beq.w	80034d6 <HAL_TIM_ConfigClockSource+0x172>
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	d87f      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b70      	cmp	r3, #112	; 0x70
 80033d2:	d01a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0xa6>
 80033d4:	2b70      	cmp	r3, #112	; 0x70
 80033d6:	d87b      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b60      	cmp	r3, #96	; 0x60
 80033da:	d050      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x11a>
 80033dc:	2b60      	cmp	r3, #96	; 0x60
 80033de:	d877      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b50      	cmp	r3, #80	; 0x50
 80033e2:	d03c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0xfa>
 80033e4:	2b50      	cmp	r3, #80	; 0x50
 80033e6:	d873      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d058      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x13a>
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d86f      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b30      	cmp	r3, #48	; 0x30
 80033f2:	d064      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 80033f4:	2b30      	cmp	r3, #48	; 0x30
 80033f6:	d86b      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d060      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d867      	bhi.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05c      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 8003404:	2b10      	cmp	r3, #16
 8003406:	d05a      	beq.n	80034be <HAL_TIM_ConfigClockSource+0x15a>
 8003408:	e062      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f000 faf0 	bl	80039fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800342c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	609a      	str	r2, [r3, #8]
      break;
 8003436:	e04f      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	6899      	ldr	r1, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f000 fad9 	bl	80039fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345a:	609a      	str	r2, [r3, #8]
      break;
 800345c:	e03c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	461a      	mov	r2, r3
 800346c:	f000 fa50 	bl	8003910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2150      	movs	r1, #80	; 0x50
 8003476:	4618      	mov	r0, r3
 8003478:	f000 faa7 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 800347c:	e02c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	f000 fa6e 	bl	800396c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2160      	movs	r1, #96	; 0x60
 8003496:	4618      	mov	r0, r3
 8003498:	f000 fa97 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 800349c:	e01c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f000 fa30 	bl	8003910 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2140      	movs	r1, #64	; 0x40
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 fa87 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 80034bc:	e00c      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f000 fa7e 	bl	80039ca <TIM_ITRx_SetConfig>
      break;
 80034ce:	e003      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	73fb      	strb	r3, [r7, #15]
      break;
 80034d4:	e000      	b.n	80034d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <TIM_Base_SetConfig+0xb8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00b      	beq.n	800356c <TIM_Base_SetConfig+0x30>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d007      	beq.n	800356c <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <TIM_Base_SetConfig+0xbc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_Base_SetConfig+0x30>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <TIM_Base_SetConfig+0xc0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d108      	bne.n	800357e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1c      	ldr	r2, [pc, #112]	; (80035f4 <TIM_Base_SetConfig+0xb8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <TIM_Base_SetConfig+0xbc>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0x62>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <TIM_Base_SetConfig+0xc0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d108      	bne.n	80035b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a07      	ldr	r2, [pc, #28]	; (80035f4 <TIM_Base_SetConfig+0xb8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800

08003600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f023 0201 	bic.w	r2, r3, #1
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0303 	bic.w	r3, r3, #3
 8003636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f023 0302 	bic.w	r3, r3, #2
 8003648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <TIM_OC1_SetConfig+0xc8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d10c      	bne.n	8003676 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0308 	bic.w	r3, r3, #8
 8003662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <TIM_OC1_SetConfig+0xc8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d111      	bne.n	80036a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800368c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	621a      	str	r2, [r3, #32]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40012c00 	.word	0x40012c00

080036cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f023 0210 	bic.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	f023 0320 	bic.w	r3, r3, #32
 8003716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <TIM_OC2_SetConfig+0xd0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10d      	bne.n	8003748 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <TIM_OC2_SetConfig+0xd0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d113      	bne.n	8003778 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800375e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40012c00 	.word	0x40012c00

080037a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <TIM_OC3_SetConfig+0xd0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10d      	bne.n	800381a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a14      	ldr	r2, [pc, #80]	; (8003870 <TIM_OC3_SetConfig+0xd0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d113      	bne.n	800384a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	621a      	str	r2, [r3, #32]
}
 8003864:	bf00      	nop
 8003866:	371c      	adds	r7, #28
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40012c00 	.word	0x40012c00

08003874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a0f      	ldr	r2, [pc, #60]	; (800390c <TIM_OC4_SetConfig+0x98>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d109      	bne.n	80038e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	621a      	str	r2, [r3, #32]
}
 8003902:	bf00      	nop
 8003904:	371c      	adds	r7, #28
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	40012c00 	.word	0x40012c00

08003910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003910:	b480      	push	{r7}
 8003912:	b087      	sub	sp, #28
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0201 	bic.w	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f023 030a 	bic.w	r3, r3, #10
 800394c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	031b      	lsls	r3, r3, #12
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f043 0307 	orr.w	r3, r3, #7
 80039ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	021a      	lsls	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	609a      	str	r2, [r3, #8]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 031f 	and.w	r3, r3, #31
 8003a4e:	2201      	movs	r2, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a1a      	ldr	r2, [r3, #32]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1a      	ldr	r2, [r3, #32]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e046      	b.n	8003b2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d009      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10c      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40000400 	.word	0x40000400
 8003b3c:	40000800 	.word	0x40000800

08003b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e042      	b.n	8003bfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd ff92 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fd71 	bl	8004690 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d16d      	bne.n	8003d00 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Transmit+0x2c>
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e066      	b.n	8003d02 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	; 0x21
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fe f87b 	bl	8001d3c <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Transmit+0x6c>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c78:	e02a      	b.n	8003cd0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2200      	movs	r2, #0
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 faf9 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e036      	b.n	8003d02 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3302      	adds	r3, #2
 8003cae:	61bb      	str	r3, [r7, #24]
 8003cb0:	e007      	b.n	8003cc2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cf      	bne.n	8003c7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fac9 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e006      	b.n	8003d02 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b0ba      	sub	sp, #232	; 0xe8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10f      	bne.n	8003d72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_UART_IRQHandler+0x66>
 8003d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d62:	f003 0320 	and.w	r3, r3, #32
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fbd1 	bl	8004512 <UART_Receive_IT>
      return;
 8003d70:	e25b      	b.n	800422a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80de 	beq.w	8003f38 <HAL_UART_IRQHandler+0x22c>
 8003d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80d1 	beq.w	8003f38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_UART_IRQHandler+0xae>
 8003da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_UART_IRQHandler+0xd2>
 8003dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f043 0202 	orr.w	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_UART_IRQHandler+0xf6>
 8003dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f043 0204 	orr.w	r2, r3, #4
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d011      	beq.n	8003e32 <HAL_UART_IRQHandler+0x126>
 8003e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	f043 0208 	orr.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 81f2 	beq.w	8004220 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_UART_IRQHandler+0x14e>
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fb5c 	bl	8004512 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_UART_IRQHandler+0x17a>
 8003e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d04f      	beq.n	8003f26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa66 	bl	8004358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d041      	beq.n	8003f1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1d9      	bne.n	8003e9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d013      	beq.n	8003f16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	4a7e      	ldr	r2, [pc, #504]	; (80040ec <HAL_UART_IRQHandler+0x3e0>)
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fe f870 	bl	8001fe0 <HAL_DMA_Abort_IT>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d016      	beq.n	8003f34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f10:	4610      	mov	r0, r2
 8003f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	e00e      	b.n	8003f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f99c 	bl	8004254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e00a      	b.n	8003f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f998 	bl	8004254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	e006      	b.n	8003f34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f994 	bl	8004254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003f32:	e175      	b.n	8004220 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f34:	bf00      	nop
    return;
 8003f36:	e173      	b.n	8004220 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f040 814f 	bne.w	80041e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8148 	beq.w	80041e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 8141 	beq.w	80041e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80b6 	beq.w	80040f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 8145 	beq.w	8004224 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	f080 813e 	bcs.w	8004224 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	f000 8088 	beq.w	80040cc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fda:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fe8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1d9      	bne.n	8003fbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800402c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004030:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004034:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800403e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e1      	bne.n	8004008 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800404e:	e853 3f00 	ldrex	r3, [r3]
 8004052:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004068:	66fa      	str	r2, [r7, #108]	; 0x6c
 800406a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800406e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e3      	bne.n	8004044 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	330c      	adds	r3, #12
 8004090:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800409a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80040b0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e3      	bne.n	800408a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd ff4f 	bl	8001f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	b29b      	uxth	r3, r3
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8bf 	bl	8004266 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040e8:	e09c      	b.n	8004224 <HAL_UART_IRQHandler+0x518>
 80040ea:	bf00      	nop
 80040ec:	0800441d 	.word	0x0800441d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 808e 	beq.w	8004228 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800410c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8089 	beq.w	8004228 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800412c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800413a:	647a      	str	r2, [r7, #68]	; 0x44
 800413c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3314      	adds	r3, #20
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	623b      	str	r3, [r7, #32]
   return(result);
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3314      	adds	r3, #20
 800416e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004172:	633a      	str	r2, [r7, #48]	; 0x30
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e3      	bne.n	800414e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0310 	bic.w	r3, r3, #16
 80041aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041b8:	61fa      	str	r2, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	69b9      	ldr	r1, [r7, #24]
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	617b      	str	r3, [r7, #20]
   return(result);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e3      	bne.n	8004194 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f844 	bl	8004266 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041de:	e023      	b.n	8004228 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_UART_IRQHandler+0x4f4>
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f923 	bl	8004444 <UART_Transmit_IT>
    return;
 80041fe:	e014      	b.n	800422a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <HAL_UART_IRQHandler+0x51e>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f962 	bl	80044e2 <UART_EndTransmit_IT>
    return;
 800421e:	e004      	b.n	800422a <HAL_UART_IRQHandler+0x51e>
    return;
 8004220:	bf00      	nop
 8004222:	e002      	b.n	800422a <HAL_UART_IRQHandler+0x51e>
      return;
 8004224:	bf00      	nop
 8004226:	e000      	b.n	800422a <HAL_UART_IRQHandler+0x51e>
      return;
 8004228:	bf00      	nop
  }
}
 800422a:	37e8      	adds	r7, #232	; 0xe8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b090      	sub	sp, #64	; 0x40
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	e050      	b.n	8004330 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d04c      	beq.n	8004330 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004298:	2b00      	cmp	r3, #0
 800429a:	d007      	beq.n	80042ac <UART_WaitOnFlagUntilTimeout+0x30>
 800429c:	f7fd fd4e 	bl	8001d3c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d241      	bcs.n	8004330 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042cc:	637a      	str	r2, [r7, #52]	; 0x34
 80042ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e5      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	613b      	str	r3, [r7, #16]
   return(result);
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3314      	adds	r3, #20
 80042fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004300:	623a      	str	r2, [r7, #32]
 8004302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	6a3a      	ldr	r2, [r7, #32]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	61bb      	str	r3, [r7, #24]
   return(result);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e00f      	b.n	8004350 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4013      	ands	r3, r2
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	429a      	cmp	r2, r3
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	429a      	cmp	r2, r3
 800434c:	d09f      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3740      	adds	r7, #64	; 0x40
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b095      	sub	sp, #84	; 0x54
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	330c      	adds	r3, #12
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004380:	643a      	str	r2, [r7, #64]	; 0x40
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004386:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e5      	bne.n	8004360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e5      	bne.n	8004394 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d119      	bne.n	8004404 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	647b      	str	r3, [r7, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	330c      	adds	r3, #12
 80043ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f0:	61ba      	str	r2, [r7, #24]
 80043f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6979      	ldr	r1, [r7, #20]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	613b      	str	r3, [r7, #16]
   return(result);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e5      	bne.n	80043d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004412:	bf00      	nop
 8004414:	3754      	adds	r7, #84	; 0x54
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff0c 	bl	8004254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b21      	cmp	r3, #33	; 0x21
 8004456:	d13e      	bne.n	80044d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004460:	d114      	bne.n	800448c <UART_Transmit_IT+0x48>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d110      	bne.n	800448c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800447e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	1c9a      	adds	r2, r3, #2
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]
 800448a:	e008      	b.n	800449e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6211      	str	r1, [r2, #32]
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4619      	mov	r1, r3
 80044ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7ff fe94 	bl	8004230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b08c      	sub	sp, #48	; 0x30
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b22      	cmp	r3, #34	; 0x22
 8004524:	f040 80ae 	bne.w	8004684 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004530:	d117      	bne.n	8004562 <UART_Receive_IT+0x50>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b29b      	uxth	r3, r3
 800454c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004550:	b29a      	uxth	r2, r3
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	1c9a      	adds	r2, r3, #2
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
 8004560:	e026      	b.n	80045b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d007      	beq.n	8004586 <UART_Receive_IT+0x74>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <UART_Receive_IT+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004590:	701a      	strb	r2, [r3, #0]
 8004592:	e008      	b.n	80045a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4619      	mov	r1, r3
 80045be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d15d      	bne.n	8004680 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0220 	bic.w	r2, r2, #32
 80045d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	2b01      	cmp	r3, #1
 8004608:	d135      	bne.n	8004676 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	613b      	str	r3, [r7, #16]
   return(result);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	623a      	str	r2, [r7, #32]
 8004632:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	69f9      	ldr	r1, [r7, #28]
 8004636:	6a3a      	ldr	r2, [r7, #32]
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	61bb      	str	r3, [r7, #24]
   return(result);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e5      	bne.n	8004610 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b10      	cmp	r3, #16
 8004650:	d10a      	bne.n	8004668 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fdf9 	bl	8004266 <HAL_UARTEx_RxEventCallback>
 8004674:	e002      	b.n	800467c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fde3 	bl	8004242 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e002      	b.n	8004686 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	e000      	b.n	8004686 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	4618      	mov	r0, r3
 8004688:	3730      	adds	r7, #48	; 0x30
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695b      	ldr	r3, [r3, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046ca:	f023 030c 	bic.w	r3, r3, #12
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	430b      	orrs	r3, r1
 80046d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a2c      	ldr	r2, [pc, #176]	; (80047a4 <UART_SetConfig+0x114>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d103      	bne.n	8004700 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046f8:	f7fe fa9c 	bl	8002c34 <HAL_RCC_GetPCLK2Freq>
 80046fc:	60f8      	str	r0, [r7, #12]
 80046fe:	e002      	b.n	8004706 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7fe fa84 	bl	8002c0c <HAL_RCC_GetPCLK1Freq>
 8004704:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009a      	lsls	r2, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	fbb2 f3f3 	udiv	r3, r2, r3
 800471c:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <UART_SetConfig+0x118>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	0119      	lsls	r1, r3, #4
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	009a      	lsls	r2, r3, #2
 8004730:	441a      	add	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fbb2 f2f3 	udiv	r2, r2, r3
 800473c:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <UART_SetConfig+0x118>)
 800473e:	fba3 0302 	umull	r0, r3, r3, r2
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2064      	movs	r0, #100	; 0x64
 8004746:	fb00 f303 	mul.w	r3, r0, r3
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	3332      	adds	r3, #50	; 0x32
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <UART_SetConfig+0x118>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475c:	4419      	add	r1, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009a      	lsls	r2, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	fbb2 f2f3 	udiv	r2, r2, r3
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <UART_SetConfig+0x118>)
 8004776:	fba3 0302 	umull	r0, r3, r3, r2
 800477a:	095b      	lsrs	r3, r3, #5
 800477c:	2064      	movs	r0, #100	; 0x64
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	3332      	adds	r3, #50	; 0x32
 8004788:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <UART_SetConfig+0x118>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	f003 020f 	and.w	r2, r3, #15
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	440a      	add	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40013800 	.word	0x40013800
 80047a8:	51eb851f 	.word	0x51eb851f

080047ac <__errno>:
 80047ac:	4b01      	ldr	r3, [pc, #4]	; (80047b4 <__errno+0x8>)
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	20000030 	.word	0x20000030

080047b8 <__libc_init_array>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	2600      	movs	r6, #0
 80047bc:	4d0c      	ldr	r5, [pc, #48]	; (80047f0 <__libc_init_array+0x38>)
 80047be:	4c0d      	ldr	r4, [pc, #52]	; (80047f4 <__libc_init_array+0x3c>)
 80047c0:	1b64      	subs	r4, r4, r5
 80047c2:	10a4      	asrs	r4, r4, #2
 80047c4:	42a6      	cmp	r6, r4
 80047c6:	d109      	bne.n	80047dc <__libc_init_array+0x24>
 80047c8:	f000 fc5c 	bl	8005084 <_init>
 80047cc:	2600      	movs	r6, #0
 80047ce:	4d0a      	ldr	r5, [pc, #40]	; (80047f8 <__libc_init_array+0x40>)
 80047d0:	4c0a      	ldr	r4, [pc, #40]	; (80047fc <__libc_init_array+0x44>)
 80047d2:	1b64      	subs	r4, r4, r5
 80047d4:	10a4      	asrs	r4, r4, #2
 80047d6:	42a6      	cmp	r6, r4
 80047d8:	d105      	bne.n	80047e6 <__libc_init_array+0x2e>
 80047da:	bd70      	pop	{r4, r5, r6, pc}
 80047dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e0:	4798      	blx	r3
 80047e2:	3601      	adds	r6, #1
 80047e4:	e7ee      	b.n	80047c4 <__libc_init_array+0xc>
 80047e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ea:	4798      	blx	r3
 80047ec:	3601      	adds	r6, #1
 80047ee:	e7f2      	b.n	80047d6 <__libc_init_array+0x1e>
 80047f0:	08005224 	.word	0x08005224
 80047f4:	08005224 	.word	0x08005224
 80047f8:	08005224 	.word	0x08005224
 80047fc:	08005228 	.word	0x08005228

08004800 <memset>:
 8004800:	4603      	mov	r3, r0
 8004802:	4402      	add	r2, r0
 8004804:	4293      	cmp	r3, r2
 8004806:	d100      	bne.n	800480a <memset+0xa>
 8004808:	4770      	bx	lr
 800480a:	f803 1b01 	strb.w	r1, [r3], #1
 800480e:	e7f9      	b.n	8004804 <memset+0x4>

08004810 <siprintf>:
 8004810:	b40e      	push	{r1, r2, r3}
 8004812:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004816:	b500      	push	{lr}
 8004818:	b09c      	sub	sp, #112	; 0x70
 800481a:	ab1d      	add	r3, sp, #116	; 0x74
 800481c:	9002      	str	r0, [sp, #8]
 800481e:	9006      	str	r0, [sp, #24]
 8004820:	9107      	str	r1, [sp, #28]
 8004822:	9104      	str	r1, [sp, #16]
 8004824:	4808      	ldr	r0, [pc, #32]	; (8004848 <siprintf+0x38>)
 8004826:	4909      	ldr	r1, [pc, #36]	; (800484c <siprintf+0x3c>)
 8004828:	f853 2b04 	ldr.w	r2, [r3], #4
 800482c:	9105      	str	r1, [sp, #20]
 800482e:	6800      	ldr	r0, [r0, #0]
 8004830:	a902      	add	r1, sp, #8
 8004832:	9301      	str	r3, [sp, #4]
 8004834:	f000 f868 	bl	8004908 <_svfiprintf_r>
 8004838:	2200      	movs	r2, #0
 800483a:	9b02      	ldr	r3, [sp, #8]
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	b01c      	add	sp, #112	; 0x70
 8004840:	f85d eb04 	ldr.w	lr, [sp], #4
 8004844:	b003      	add	sp, #12
 8004846:	4770      	bx	lr
 8004848:	20000030 	.word	0x20000030
 800484c:	ffff0208 	.word	0xffff0208

08004850 <__ssputs_r>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	688e      	ldr	r6, [r1, #8]
 8004856:	4682      	mov	sl, r0
 8004858:	429e      	cmp	r6, r3
 800485a:	460c      	mov	r4, r1
 800485c:	4690      	mov	r8, r2
 800485e:	461f      	mov	r7, r3
 8004860:	d838      	bhi.n	80048d4 <__ssputs_r+0x84>
 8004862:	898a      	ldrh	r2, [r1, #12]
 8004864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004868:	d032      	beq.n	80048d0 <__ssputs_r+0x80>
 800486a:	6825      	ldr	r5, [r4, #0]
 800486c:	6909      	ldr	r1, [r1, #16]
 800486e:	3301      	adds	r3, #1
 8004870:	eba5 0901 	sub.w	r9, r5, r1
 8004874:	6965      	ldr	r5, [r4, #20]
 8004876:	444b      	add	r3, r9
 8004878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800487c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004880:	106d      	asrs	r5, r5, #1
 8004882:	429d      	cmp	r5, r3
 8004884:	bf38      	it	cc
 8004886:	461d      	movcc	r5, r3
 8004888:	0553      	lsls	r3, r2, #21
 800488a:	d531      	bpl.n	80048f0 <__ssputs_r+0xa0>
 800488c:	4629      	mov	r1, r5
 800488e:	f000 fb53 	bl	8004f38 <_malloc_r>
 8004892:	4606      	mov	r6, r0
 8004894:	b950      	cbnz	r0, 80048ac <__ssputs_r+0x5c>
 8004896:	230c      	movs	r3, #12
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	f8ca 3000 	str.w	r3, [sl]
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a6:	81a3      	strh	r3, [r4, #12]
 80048a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ac:	464a      	mov	r2, r9
 80048ae:	6921      	ldr	r1, [r4, #16]
 80048b0:	f000 face 	bl	8004e50 <memcpy>
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048be:	81a3      	strh	r3, [r4, #12]
 80048c0:	6126      	str	r6, [r4, #16]
 80048c2:	444e      	add	r6, r9
 80048c4:	6026      	str	r6, [r4, #0]
 80048c6:	463e      	mov	r6, r7
 80048c8:	6165      	str	r5, [r4, #20]
 80048ca:	eba5 0509 	sub.w	r5, r5, r9
 80048ce:	60a5      	str	r5, [r4, #8]
 80048d0:	42be      	cmp	r6, r7
 80048d2:	d900      	bls.n	80048d6 <__ssputs_r+0x86>
 80048d4:	463e      	mov	r6, r7
 80048d6:	4632      	mov	r2, r6
 80048d8:	4641      	mov	r1, r8
 80048da:	6820      	ldr	r0, [r4, #0]
 80048dc:	f000 fac6 	bl	8004e6c <memmove>
 80048e0:	68a3      	ldr	r3, [r4, #8]
 80048e2:	6822      	ldr	r2, [r4, #0]
 80048e4:	1b9b      	subs	r3, r3, r6
 80048e6:	4432      	add	r2, r6
 80048e8:	2000      	movs	r0, #0
 80048ea:	60a3      	str	r3, [r4, #8]
 80048ec:	6022      	str	r2, [r4, #0]
 80048ee:	e7db      	b.n	80048a8 <__ssputs_r+0x58>
 80048f0:	462a      	mov	r2, r5
 80048f2:	f000 fb7b 	bl	8004fec <_realloc_r>
 80048f6:	4606      	mov	r6, r0
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d1e1      	bne.n	80048c0 <__ssputs_r+0x70>
 80048fc:	4650      	mov	r0, sl
 80048fe:	6921      	ldr	r1, [r4, #16]
 8004900:	f000 face 	bl	8004ea0 <_free_r>
 8004904:	e7c7      	b.n	8004896 <__ssputs_r+0x46>
	...

08004908 <_svfiprintf_r>:
 8004908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490c:	4698      	mov	r8, r3
 800490e:	898b      	ldrh	r3, [r1, #12]
 8004910:	4607      	mov	r7, r0
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	460d      	mov	r5, r1
 8004916:	4614      	mov	r4, r2
 8004918:	b09d      	sub	sp, #116	; 0x74
 800491a:	d50e      	bpl.n	800493a <_svfiprintf_r+0x32>
 800491c:	690b      	ldr	r3, [r1, #16]
 800491e:	b963      	cbnz	r3, 800493a <_svfiprintf_r+0x32>
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	f000 fb09 	bl	8004f38 <_malloc_r>
 8004926:	6028      	str	r0, [r5, #0]
 8004928:	6128      	str	r0, [r5, #16]
 800492a:	b920      	cbnz	r0, 8004936 <_svfiprintf_r+0x2e>
 800492c:	230c      	movs	r3, #12
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e0d1      	b.n	8004ada <_svfiprintf_r+0x1d2>
 8004936:	2340      	movs	r3, #64	; 0x40
 8004938:	616b      	str	r3, [r5, #20]
 800493a:	2300      	movs	r3, #0
 800493c:	9309      	str	r3, [sp, #36]	; 0x24
 800493e:	2320      	movs	r3, #32
 8004940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	f04f 0901 	mov.w	r9, #1
 800494a:	f8cd 800c 	str.w	r8, [sp, #12]
 800494e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004af4 <_svfiprintf_r+0x1ec>
 8004952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004956:	4623      	mov	r3, r4
 8004958:	469a      	mov	sl, r3
 800495a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800495e:	b10a      	cbz	r2, 8004964 <_svfiprintf_r+0x5c>
 8004960:	2a25      	cmp	r2, #37	; 0x25
 8004962:	d1f9      	bne.n	8004958 <_svfiprintf_r+0x50>
 8004964:	ebba 0b04 	subs.w	fp, sl, r4
 8004968:	d00b      	beq.n	8004982 <_svfiprintf_r+0x7a>
 800496a:	465b      	mov	r3, fp
 800496c:	4622      	mov	r2, r4
 800496e:	4629      	mov	r1, r5
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ff6d 	bl	8004850 <__ssputs_r>
 8004976:	3001      	adds	r0, #1
 8004978:	f000 80aa 	beq.w	8004ad0 <_svfiprintf_r+0x1c8>
 800497c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497e:	445a      	add	r2, fp
 8004980:	9209      	str	r2, [sp, #36]	; 0x24
 8004982:	f89a 3000 	ldrb.w	r3, [sl]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80a2 	beq.w	8004ad0 <_svfiprintf_r+0x1c8>
 800498c:	2300      	movs	r3, #0
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004996:	f10a 0a01 	add.w	sl, sl, #1
 800499a:	9304      	str	r3, [sp, #16]
 800499c:	9307      	str	r3, [sp, #28]
 800499e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049a2:	931a      	str	r3, [sp, #104]	; 0x68
 80049a4:	4654      	mov	r4, sl
 80049a6:	2205      	movs	r2, #5
 80049a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ac:	4851      	ldr	r0, [pc, #324]	; (8004af4 <_svfiprintf_r+0x1ec>)
 80049ae:	f000 fa41 	bl	8004e34 <memchr>
 80049b2:	9a04      	ldr	r2, [sp, #16]
 80049b4:	b9d8      	cbnz	r0, 80049ee <_svfiprintf_r+0xe6>
 80049b6:	06d0      	lsls	r0, r2, #27
 80049b8:	bf44      	itt	mi
 80049ba:	2320      	movmi	r3, #32
 80049bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049c0:	0711      	lsls	r1, r2, #28
 80049c2:	bf44      	itt	mi
 80049c4:	232b      	movmi	r3, #43	; 0x2b
 80049c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049ca:	f89a 3000 	ldrb.w	r3, [sl]
 80049ce:	2b2a      	cmp	r3, #42	; 0x2a
 80049d0:	d015      	beq.n	80049fe <_svfiprintf_r+0xf6>
 80049d2:	4654      	mov	r4, sl
 80049d4:	2000      	movs	r0, #0
 80049d6:	f04f 0c0a 	mov.w	ip, #10
 80049da:	9a07      	ldr	r2, [sp, #28]
 80049dc:	4621      	mov	r1, r4
 80049de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049e2:	3b30      	subs	r3, #48	; 0x30
 80049e4:	2b09      	cmp	r3, #9
 80049e6:	d94e      	bls.n	8004a86 <_svfiprintf_r+0x17e>
 80049e8:	b1b0      	cbz	r0, 8004a18 <_svfiprintf_r+0x110>
 80049ea:	9207      	str	r2, [sp, #28]
 80049ec:	e014      	b.n	8004a18 <_svfiprintf_r+0x110>
 80049ee:	eba0 0308 	sub.w	r3, r0, r8
 80049f2:	fa09 f303 	lsl.w	r3, r9, r3
 80049f6:	4313      	orrs	r3, r2
 80049f8:	46a2      	mov	sl, r4
 80049fa:	9304      	str	r3, [sp, #16]
 80049fc:	e7d2      	b.n	80049a4 <_svfiprintf_r+0x9c>
 80049fe:	9b03      	ldr	r3, [sp, #12]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	9103      	str	r1, [sp, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bfbb      	ittet	lt
 8004a0a:	425b      	neglt	r3, r3
 8004a0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a10:	9307      	strge	r3, [sp, #28]
 8004a12:	9307      	strlt	r3, [sp, #28]
 8004a14:	bfb8      	it	lt
 8004a16:	9204      	strlt	r2, [sp, #16]
 8004a18:	7823      	ldrb	r3, [r4, #0]
 8004a1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a1c:	d10c      	bne.n	8004a38 <_svfiprintf_r+0x130>
 8004a1e:	7863      	ldrb	r3, [r4, #1]
 8004a20:	2b2a      	cmp	r3, #42	; 0x2a
 8004a22:	d135      	bne.n	8004a90 <_svfiprintf_r+0x188>
 8004a24:	9b03      	ldr	r3, [sp, #12]
 8004a26:	3402      	adds	r4, #2
 8004a28:	1d1a      	adds	r2, r3, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	9203      	str	r2, [sp, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bfb8      	it	lt
 8004a32:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b04 <_svfiprintf_r+0x1fc>
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	4650      	mov	r0, sl
 8004a40:	7821      	ldrb	r1, [r4, #0]
 8004a42:	f000 f9f7 	bl	8004e34 <memchr>
 8004a46:	b140      	cbz	r0, 8004a5a <_svfiprintf_r+0x152>
 8004a48:	2340      	movs	r3, #64	; 0x40
 8004a4a:	eba0 000a 	sub.w	r0, r0, sl
 8004a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004a52:	9b04      	ldr	r3, [sp, #16]
 8004a54:	3401      	adds	r4, #1
 8004a56:	4303      	orrs	r3, r0
 8004a58:	9304      	str	r3, [sp, #16]
 8004a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5e:	2206      	movs	r2, #6
 8004a60:	4825      	ldr	r0, [pc, #148]	; (8004af8 <_svfiprintf_r+0x1f0>)
 8004a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a66:	f000 f9e5 	bl	8004e34 <memchr>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d038      	beq.n	8004ae0 <_svfiprintf_r+0x1d8>
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <_svfiprintf_r+0x1f4>)
 8004a70:	bb1b      	cbnz	r3, 8004aba <_svfiprintf_r+0x1b2>
 8004a72:	9b03      	ldr	r3, [sp, #12]
 8004a74:	3307      	adds	r3, #7
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	9303      	str	r3, [sp, #12]
 8004a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a80:	4433      	add	r3, r6
 8004a82:	9309      	str	r3, [sp, #36]	; 0x24
 8004a84:	e767      	b.n	8004956 <_svfiprintf_r+0x4e>
 8004a86:	460c      	mov	r4, r1
 8004a88:	2001      	movs	r0, #1
 8004a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a8e:	e7a5      	b.n	80049dc <_svfiprintf_r+0xd4>
 8004a90:	2300      	movs	r3, #0
 8004a92:	f04f 0c0a 	mov.w	ip, #10
 8004a96:	4619      	mov	r1, r3
 8004a98:	3401      	adds	r4, #1
 8004a9a:	9305      	str	r3, [sp, #20]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004aa2:	3a30      	subs	r2, #48	; 0x30
 8004aa4:	2a09      	cmp	r2, #9
 8004aa6:	d903      	bls.n	8004ab0 <_svfiprintf_r+0x1a8>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0c5      	beq.n	8004a38 <_svfiprintf_r+0x130>
 8004aac:	9105      	str	r1, [sp, #20]
 8004aae:	e7c3      	b.n	8004a38 <_svfiprintf_r+0x130>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ab8:	e7f0      	b.n	8004a9c <_svfiprintf_r+0x194>
 8004aba:	ab03      	add	r3, sp, #12
 8004abc:	9300      	str	r3, [sp, #0]
 8004abe:	462a      	mov	r2, r5
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	f3af 8000 	nop.w
 8004aca:	1c42      	adds	r2, r0, #1
 8004acc:	4606      	mov	r6, r0
 8004ace:	d1d6      	bne.n	8004a7e <_svfiprintf_r+0x176>
 8004ad0:	89ab      	ldrh	r3, [r5, #12]
 8004ad2:	065b      	lsls	r3, r3, #25
 8004ad4:	f53f af2c 	bmi.w	8004930 <_svfiprintf_r+0x28>
 8004ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ada:	b01d      	add	sp, #116	; 0x74
 8004adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	462a      	mov	r2, r5
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <_svfiprintf_r+0x1f8>)
 8004aea:	a904      	add	r1, sp, #16
 8004aec:	f000 f87c 	bl	8004be8 <_printf_i>
 8004af0:	e7eb      	b.n	8004aca <_svfiprintf_r+0x1c2>
 8004af2:	bf00      	nop
 8004af4:	080051ee 	.word	0x080051ee
 8004af8:	080051f8 	.word	0x080051f8
 8004afc:	00000000 	.word	0x00000000
 8004b00:	08004851 	.word	0x08004851
 8004b04:	080051f4 	.word	0x080051f4

08004b08 <_printf_common>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	4699      	mov	r9, r3
 8004b10:	688a      	ldr	r2, [r1, #8]
 8004b12:	690b      	ldr	r3, [r1, #16]
 8004b14:	4607      	mov	r7, r0
 8004b16:	4293      	cmp	r3, r2
 8004b18:	bfb8      	it	lt
 8004b1a:	4613      	movlt	r3, r2
 8004b1c:	6033      	str	r3, [r6, #0]
 8004b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b22:	460c      	mov	r4, r1
 8004b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b28:	b10a      	cbz	r2, 8004b2e <_printf_common+0x26>
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	6033      	str	r3, [r6, #0]
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	0699      	lsls	r1, r3, #26
 8004b32:	bf42      	ittt	mi
 8004b34:	6833      	ldrmi	r3, [r6, #0]
 8004b36:	3302      	addmi	r3, #2
 8004b38:	6033      	strmi	r3, [r6, #0]
 8004b3a:	6825      	ldr	r5, [r4, #0]
 8004b3c:	f015 0506 	ands.w	r5, r5, #6
 8004b40:	d106      	bne.n	8004b50 <_printf_common+0x48>
 8004b42:	f104 0a19 	add.w	sl, r4, #25
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	6832      	ldr	r2, [r6, #0]
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dc28      	bgt.n	8004ba2 <_printf_common+0x9a>
 8004b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b54:	1e13      	subs	r3, r2, #0
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	bf18      	it	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	0692      	lsls	r2, r2, #26
 8004b5e:	d42d      	bmi.n	8004bbc <_printf_common+0xb4>
 8004b60:	4649      	mov	r1, r9
 8004b62:	4638      	mov	r0, r7
 8004b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b68:	47c0      	blx	r8
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d020      	beq.n	8004bb0 <_printf_common+0xa8>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	68e5      	ldr	r5, [r4, #12]
 8004b72:	f003 0306 	and.w	r3, r3, #6
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	bf18      	it	ne
 8004b7a:	2500      	movne	r5, #0
 8004b7c:	6832      	ldr	r2, [r6, #0]
 8004b7e:	f04f 0600 	mov.w	r6, #0
 8004b82:	68a3      	ldr	r3, [r4, #8]
 8004b84:	bf08      	it	eq
 8004b86:	1aad      	subeq	r5, r5, r2
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	bf08      	it	eq
 8004b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b90:	4293      	cmp	r3, r2
 8004b92:	bfc4      	itt	gt
 8004b94:	1a9b      	subgt	r3, r3, r2
 8004b96:	18ed      	addgt	r5, r5, r3
 8004b98:	341a      	adds	r4, #26
 8004b9a:	42b5      	cmp	r5, r6
 8004b9c:	d11a      	bne.n	8004bd4 <_printf_common+0xcc>
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	e008      	b.n	8004bb4 <_printf_common+0xac>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	4652      	mov	r2, sl
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4638      	mov	r0, r7
 8004baa:	47c0      	blx	r8
 8004bac:	3001      	adds	r0, #1
 8004bae:	d103      	bne.n	8004bb8 <_printf_common+0xb0>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	3501      	adds	r5, #1
 8004bba:	e7c4      	b.n	8004b46 <_printf_common+0x3e>
 8004bbc:	2030      	movs	r0, #48	; 0x30
 8004bbe:	18e1      	adds	r1, r4, r3
 8004bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bca:	4422      	add	r2, r4
 8004bcc:	3302      	adds	r3, #2
 8004bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bd2:	e7c5      	b.n	8004b60 <_printf_common+0x58>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	4649      	mov	r1, r9
 8004bda:	4638      	mov	r0, r7
 8004bdc:	47c0      	blx	r8
 8004bde:	3001      	adds	r0, #1
 8004be0:	d0e6      	beq.n	8004bb0 <_printf_common+0xa8>
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7d9      	b.n	8004b9a <_printf_common+0x92>
	...

08004be8 <_printf_i>:
 8004be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	460c      	mov	r4, r1
 8004bee:	7e27      	ldrb	r7, [r4, #24]
 8004bf0:	4691      	mov	r9, r2
 8004bf2:	2f78      	cmp	r7, #120	; 0x78
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	469a      	mov	sl, r3
 8004bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bfe:	d807      	bhi.n	8004c10 <_printf_i+0x28>
 8004c00:	2f62      	cmp	r7, #98	; 0x62
 8004c02:	d80a      	bhi.n	8004c1a <_printf_i+0x32>
 8004c04:	2f00      	cmp	r7, #0
 8004c06:	f000 80d9 	beq.w	8004dbc <_printf_i+0x1d4>
 8004c0a:	2f58      	cmp	r7, #88	; 0x58
 8004c0c:	f000 80a4 	beq.w	8004d58 <_printf_i+0x170>
 8004c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c18:	e03a      	b.n	8004c90 <_printf_i+0xa8>
 8004c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c1e:	2b15      	cmp	r3, #21
 8004c20:	d8f6      	bhi.n	8004c10 <_printf_i+0x28>
 8004c22:	a001      	add	r0, pc, #4	; (adr r0, 8004c28 <_printf_i+0x40>)
 8004c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c28:	08004c81 	.word	0x08004c81
 8004c2c:	08004c95 	.word	0x08004c95
 8004c30:	08004c11 	.word	0x08004c11
 8004c34:	08004c11 	.word	0x08004c11
 8004c38:	08004c11 	.word	0x08004c11
 8004c3c:	08004c11 	.word	0x08004c11
 8004c40:	08004c95 	.word	0x08004c95
 8004c44:	08004c11 	.word	0x08004c11
 8004c48:	08004c11 	.word	0x08004c11
 8004c4c:	08004c11 	.word	0x08004c11
 8004c50:	08004c11 	.word	0x08004c11
 8004c54:	08004da3 	.word	0x08004da3
 8004c58:	08004cc5 	.word	0x08004cc5
 8004c5c:	08004d85 	.word	0x08004d85
 8004c60:	08004c11 	.word	0x08004c11
 8004c64:	08004c11 	.word	0x08004c11
 8004c68:	08004dc5 	.word	0x08004dc5
 8004c6c:	08004c11 	.word	0x08004c11
 8004c70:	08004cc5 	.word	0x08004cc5
 8004c74:	08004c11 	.word	0x08004c11
 8004c78:	08004c11 	.word	0x08004c11
 8004c7c:	08004d8d 	.word	0x08004d8d
 8004c80:	680b      	ldr	r3, [r1, #0]
 8004c82:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c86:	1d1a      	adds	r2, r3, #4
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	600a      	str	r2, [r1, #0]
 8004c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0a4      	b.n	8004dde <_printf_i+0x1f6>
 8004c94:	6825      	ldr	r5, [r4, #0]
 8004c96:	6808      	ldr	r0, [r1, #0]
 8004c98:	062e      	lsls	r6, r5, #24
 8004c9a:	f100 0304 	add.w	r3, r0, #4
 8004c9e:	d50a      	bpl.n	8004cb6 <_printf_i+0xce>
 8004ca0:	6805      	ldr	r5, [r0, #0]
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	2d00      	cmp	r5, #0
 8004ca6:	da03      	bge.n	8004cb0 <_printf_i+0xc8>
 8004ca8:	232d      	movs	r3, #45	; 0x2d
 8004caa:	426d      	negs	r5, r5
 8004cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cb0:	230a      	movs	r3, #10
 8004cb2:	485e      	ldr	r0, [pc, #376]	; (8004e2c <_printf_i+0x244>)
 8004cb4:	e019      	b.n	8004cea <_printf_i+0x102>
 8004cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004cba:	6805      	ldr	r5, [r0, #0]
 8004cbc:	600b      	str	r3, [r1, #0]
 8004cbe:	bf18      	it	ne
 8004cc0:	b22d      	sxthne	r5, r5
 8004cc2:	e7ef      	b.n	8004ca4 <_printf_i+0xbc>
 8004cc4:	680b      	ldr	r3, [r1, #0]
 8004cc6:	6825      	ldr	r5, [r4, #0]
 8004cc8:	1d18      	adds	r0, r3, #4
 8004cca:	6008      	str	r0, [r1, #0]
 8004ccc:	0628      	lsls	r0, r5, #24
 8004cce:	d501      	bpl.n	8004cd4 <_printf_i+0xec>
 8004cd0:	681d      	ldr	r5, [r3, #0]
 8004cd2:	e002      	b.n	8004cda <_printf_i+0xf2>
 8004cd4:	0669      	lsls	r1, r5, #25
 8004cd6:	d5fb      	bpl.n	8004cd0 <_printf_i+0xe8>
 8004cd8:	881d      	ldrh	r5, [r3, #0]
 8004cda:	2f6f      	cmp	r7, #111	; 0x6f
 8004cdc:	bf0c      	ite	eq
 8004cde:	2308      	moveq	r3, #8
 8004ce0:	230a      	movne	r3, #10
 8004ce2:	4852      	ldr	r0, [pc, #328]	; (8004e2c <_printf_i+0x244>)
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cea:	6866      	ldr	r6, [r4, #4]
 8004cec:	2e00      	cmp	r6, #0
 8004cee:	bfa8      	it	ge
 8004cf0:	6821      	ldrge	r1, [r4, #0]
 8004cf2:	60a6      	str	r6, [r4, #8]
 8004cf4:	bfa4      	itt	ge
 8004cf6:	f021 0104 	bicge.w	r1, r1, #4
 8004cfa:	6021      	strge	r1, [r4, #0]
 8004cfc:	b90d      	cbnz	r5, 8004d02 <_printf_i+0x11a>
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	d04d      	beq.n	8004d9e <_printf_i+0x1b6>
 8004d02:	4616      	mov	r6, r2
 8004d04:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d08:	fb03 5711 	mls	r7, r3, r1, r5
 8004d0c:	5dc7      	ldrb	r7, [r0, r7]
 8004d0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d12:	462f      	mov	r7, r5
 8004d14:	42bb      	cmp	r3, r7
 8004d16:	460d      	mov	r5, r1
 8004d18:	d9f4      	bls.n	8004d04 <_printf_i+0x11c>
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d10b      	bne.n	8004d36 <_printf_i+0x14e>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07df      	lsls	r7, r3, #31
 8004d22:	d508      	bpl.n	8004d36 <_printf_i+0x14e>
 8004d24:	6923      	ldr	r3, [r4, #16]
 8004d26:	6861      	ldr	r1, [r4, #4]
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	bfde      	ittt	le
 8004d2c:	2330      	movle	r3, #48	; 0x30
 8004d2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d36:	1b92      	subs	r2, r2, r6
 8004d38:	6122      	str	r2, [r4, #16]
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	4640      	mov	r0, r8
 8004d40:	f8cd a000 	str.w	sl, [sp]
 8004d44:	aa03      	add	r2, sp, #12
 8004d46:	f7ff fedf 	bl	8004b08 <_printf_common>
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d14c      	bne.n	8004de8 <_printf_i+0x200>
 8004d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d52:	b004      	add	sp, #16
 8004d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d58:	4834      	ldr	r0, [pc, #208]	; (8004e2c <_printf_i+0x244>)
 8004d5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d5e:	680e      	ldr	r6, [r1, #0]
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8004d66:	061f      	lsls	r7, r3, #24
 8004d68:	600e      	str	r6, [r1, #0]
 8004d6a:	d514      	bpl.n	8004d96 <_printf_i+0x1ae>
 8004d6c:	07d9      	lsls	r1, r3, #31
 8004d6e:	bf44      	itt	mi
 8004d70:	f043 0320 	orrmi.w	r3, r3, #32
 8004d74:	6023      	strmi	r3, [r4, #0]
 8004d76:	b91d      	cbnz	r5, 8004d80 <_printf_i+0x198>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	f023 0320 	bic.w	r3, r3, #32
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	2310      	movs	r3, #16
 8004d82:	e7af      	b.n	8004ce4 <_printf_i+0xfc>
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	f043 0320 	orr.w	r3, r3, #32
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	2378      	movs	r3, #120	; 0x78
 8004d8e:	4828      	ldr	r0, [pc, #160]	; (8004e30 <_printf_i+0x248>)
 8004d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d94:	e7e3      	b.n	8004d5e <_printf_i+0x176>
 8004d96:	065e      	lsls	r6, r3, #25
 8004d98:	bf48      	it	mi
 8004d9a:	b2ad      	uxthmi	r5, r5
 8004d9c:	e7e6      	b.n	8004d6c <_printf_i+0x184>
 8004d9e:	4616      	mov	r6, r2
 8004da0:	e7bb      	b.n	8004d1a <_printf_i+0x132>
 8004da2:	680b      	ldr	r3, [r1, #0]
 8004da4:	6826      	ldr	r6, [r4, #0]
 8004da6:	1d1d      	adds	r5, r3, #4
 8004da8:	6960      	ldr	r0, [r4, #20]
 8004daa:	600d      	str	r5, [r1, #0]
 8004dac:	0635      	lsls	r5, r6, #24
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	d501      	bpl.n	8004db6 <_printf_i+0x1ce>
 8004db2:	6018      	str	r0, [r3, #0]
 8004db4:	e002      	b.n	8004dbc <_printf_i+0x1d4>
 8004db6:	0671      	lsls	r1, r6, #25
 8004db8:	d5fb      	bpl.n	8004db2 <_printf_i+0x1ca>
 8004dba:	8018      	strh	r0, [r3, #0]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	4616      	mov	r6, r2
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	e7ba      	b.n	8004d3a <_printf_i+0x152>
 8004dc4:	680b      	ldr	r3, [r1, #0]
 8004dc6:	1d1a      	adds	r2, r3, #4
 8004dc8:	600a      	str	r2, [r1, #0]
 8004dca:	681e      	ldr	r6, [r3, #0]
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4630      	mov	r0, r6
 8004dd0:	6862      	ldr	r2, [r4, #4]
 8004dd2:	f000 f82f 	bl	8004e34 <memchr>
 8004dd6:	b108      	cbz	r0, 8004ddc <_printf_i+0x1f4>
 8004dd8:	1b80      	subs	r0, r0, r6
 8004dda:	6060      	str	r0, [r4, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	2300      	movs	r3, #0
 8004de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004de6:	e7a8      	b.n	8004d3a <_printf_i+0x152>
 8004de8:	4632      	mov	r2, r6
 8004dea:	4649      	mov	r1, r9
 8004dec:	4640      	mov	r0, r8
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	47d0      	blx	sl
 8004df2:	3001      	adds	r0, #1
 8004df4:	d0ab      	beq.n	8004d4e <_printf_i+0x166>
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	079b      	lsls	r3, r3, #30
 8004dfa:	d413      	bmi.n	8004e24 <_printf_i+0x23c>
 8004dfc:	68e0      	ldr	r0, [r4, #12]
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	4298      	cmp	r0, r3
 8004e02:	bfb8      	it	lt
 8004e04:	4618      	movlt	r0, r3
 8004e06:	e7a4      	b.n	8004d52 <_printf_i+0x16a>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4640      	mov	r0, r8
 8004e10:	47d0      	blx	sl
 8004e12:	3001      	adds	r0, #1
 8004e14:	d09b      	beq.n	8004d4e <_printf_i+0x166>
 8004e16:	3501      	adds	r5, #1
 8004e18:	68e3      	ldr	r3, [r4, #12]
 8004e1a:	9903      	ldr	r1, [sp, #12]
 8004e1c:	1a5b      	subs	r3, r3, r1
 8004e1e:	42ab      	cmp	r3, r5
 8004e20:	dcf2      	bgt.n	8004e08 <_printf_i+0x220>
 8004e22:	e7eb      	b.n	8004dfc <_printf_i+0x214>
 8004e24:	2500      	movs	r5, #0
 8004e26:	f104 0619 	add.w	r6, r4, #25
 8004e2a:	e7f5      	b.n	8004e18 <_printf_i+0x230>
 8004e2c:	080051ff 	.word	0x080051ff
 8004e30:	08005210 	.word	0x08005210

08004e34 <memchr>:
 8004e34:	4603      	mov	r3, r0
 8004e36:	b510      	push	{r4, lr}
 8004e38:	b2c9      	uxtb	r1, r1
 8004e3a:	4402      	add	r2, r0
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	d101      	bne.n	8004e46 <memchr+0x12>
 8004e42:	2000      	movs	r0, #0
 8004e44:	e003      	b.n	8004e4e <memchr+0x1a>
 8004e46:	7804      	ldrb	r4, [r0, #0]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	428c      	cmp	r4, r1
 8004e4c:	d1f6      	bne.n	8004e3c <memchr+0x8>
 8004e4e:	bd10      	pop	{r4, pc}

08004e50 <memcpy>:
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e58:	d100      	bne.n	8004e5c <memcpy+0xc>
 8004e5a:	4770      	bx	lr
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e68:	d1f9      	bne.n	8004e5e <memcpy+0xe>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <memmove>:
 8004e6c:	4288      	cmp	r0, r1
 8004e6e:	b510      	push	{r4, lr}
 8004e70:	eb01 0402 	add.w	r4, r1, r2
 8004e74:	d902      	bls.n	8004e7c <memmove+0x10>
 8004e76:	4284      	cmp	r4, r0
 8004e78:	4623      	mov	r3, r4
 8004e7a:	d807      	bhi.n	8004e8c <memmove+0x20>
 8004e7c:	1e43      	subs	r3, r0, #1
 8004e7e:	42a1      	cmp	r1, r4
 8004e80:	d008      	beq.n	8004e94 <memmove+0x28>
 8004e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e8a:	e7f8      	b.n	8004e7e <memmove+0x12>
 8004e8c:	4601      	mov	r1, r0
 8004e8e:	4402      	add	r2, r0
 8004e90:	428a      	cmp	r2, r1
 8004e92:	d100      	bne.n	8004e96 <memmove+0x2a>
 8004e94:	bd10      	pop	{r4, pc}
 8004e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e9e:	e7f7      	b.n	8004e90 <memmove+0x24>

08004ea0 <_free_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d043      	beq.n	8004f30 <_free_r+0x90>
 8004ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eac:	1f0c      	subs	r4, r1, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb8      	it	lt
 8004eb2:	18e4      	addlt	r4, r4, r3
 8004eb4:	f000 f8d0 	bl	8005058 <__malloc_lock>
 8004eb8:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <_free_r+0x94>)
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	b933      	cbnz	r3, 8004ece <_free_r+0x2e>
 8004ec0:	6063      	str	r3, [r4, #4]
 8004ec2:	6014      	str	r4, [r2, #0]
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eca:	f000 b8cb 	b.w	8005064 <__malloc_unlock>
 8004ece:	42a3      	cmp	r3, r4
 8004ed0:	d90a      	bls.n	8004ee8 <_free_r+0x48>
 8004ed2:	6821      	ldr	r1, [r4, #0]
 8004ed4:	1862      	adds	r2, r4, r1
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bf01      	itttt	eq
 8004eda:	681a      	ldreq	r2, [r3, #0]
 8004edc:	685b      	ldreq	r3, [r3, #4]
 8004ede:	1852      	addeq	r2, r2, r1
 8004ee0:	6022      	streq	r2, [r4, #0]
 8004ee2:	6063      	str	r3, [r4, #4]
 8004ee4:	6004      	str	r4, [r0, #0]
 8004ee6:	e7ed      	b.n	8004ec4 <_free_r+0x24>
 8004ee8:	461a      	mov	r2, r3
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b10b      	cbz	r3, 8004ef2 <_free_r+0x52>
 8004eee:	42a3      	cmp	r3, r4
 8004ef0:	d9fa      	bls.n	8004ee8 <_free_r+0x48>
 8004ef2:	6811      	ldr	r1, [r2, #0]
 8004ef4:	1850      	adds	r0, r2, r1
 8004ef6:	42a0      	cmp	r0, r4
 8004ef8:	d10b      	bne.n	8004f12 <_free_r+0x72>
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	4401      	add	r1, r0
 8004efe:	1850      	adds	r0, r2, r1
 8004f00:	4283      	cmp	r3, r0
 8004f02:	6011      	str	r1, [r2, #0]
 8004f04:	d1de      	bne.n	8004ec4 <_free_r+0x24>
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	4401      	add	r1, r0
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	6053      	str	r3, [r2, #4]
 8004f10:	e7d8      	b.n	8004ec4 <_free_r+0x24>
 8004f12:	d902      	bls.n	8004f1a <_free_r+0x7a>
 8004f14:	230c      	movs	r3, #12
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	e7d4      	b.n	8004ec4 <_free_r+0x24>
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	1821      	adds	r1, r4, r0
 8004f1e:	428b      	cmp	r3, r1
 8004f20:	bf01      	itttt	eq
 8004f22:	6819      	ldreq	r1, [r3, #0]
 8004f24:	685b      	ldreq	r3, [r3, #4]
 8004f26:	1809      	addeq	r1, r1, r0
 8004f28:	6021      	streq	r1, [r4, #0]
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	6054      	str	r4, [r2, #4]
 8004f2e:	e7c9      	b.n	8004ec4 <_free_r+0x24>
 8004f30:	bd38      	pop	{r3, r4, r5, pc}
 8004f32:	bf00      	nop
 8004f34:	2000014c 	.word	0x2000014c

08004f38 <_malloc_r>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	1ccd      	adds	r5, r1, #3
 8004f3c:	f025 0503 	bic.w	r5, r5, #3
 8004f40:	3508      	adds	r5, #8
 8004f42:	2d0c      	cmp	r5, #12
 8004f44:	bf38      	it	cc
 8004f46:	250c      	movcc	r5, #12
 8004f48:	2d00      	cmp	r5, #0
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	db01      	blt.n	8004f52 <_malloc_r+0x1a>
 8004f4e:	42a9      	cmp	r1, r5
 8004f50:	d903      	bls.n	8004f5a <_malloc_r+0x22>
 8004f52:	230c      	movs	r3, #12
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	2000      	movs	r0, #0
 8004f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f5a:	f000 f87d 	bl	8005058 <__malloc_lock>
 8004f5e:	4921      	ldr	r1, [pc, #132]	; (8004fe4 <_malloc_r+0xac>)
 8004f60:	680a      	ldr	r2, [r1, #0]
 8004f62:	4614      	mov	r4, r2
 8004f64:	b99c      	cbnz	r4, 8004f8e <_malloc_r+0x56>
 8004f66:	4f20      	ldr	r7, [pc, #128]	; (8004fe8 <_malloc_r+0xb0>)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	b923      	cbnz	r3, 8004f76 <_malloc_r+0x3e>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f000 f862 	bl	8005038 <_sbrk_r>
 8004f74:	6038      	str	r0, [r7, #0]
 8004f76:	4629      	mov	r1, r5
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f000 f85d 	bl	8005038 <_sbrk_r>
 8004f7e:	1c43      	adds	r3, r0, #1
 8004f80:	d123      	bne.n	8004fca <_malloc_r+0x92>
 8004f82:	230c      	movs	r3, #12
 8004f84:	4630      	mov	r0, r6
 8004f86:	6033      	str	r3, [r6, #0]
 8004f88:	f000 f86c 	bl	8005064 <__malloc_unlock>
 8004f8c:	e7e3      	b.n	8004f56 <_malloc_r+0x1e>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	1b5b      	subs	r3, r3, r5
 8004f92:	d417      	bmi.n	8004fc4 <_malloc_r+0x8c>
 8004f94:	2b0b      	cmp	r3, #11
 8004f96:	d903      	bls.n	8004fa0 <_malloc_r+0x68>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	441c      	add	r4, r3
 8004f9c:	6025      	str	r5, [r4, #0]
 8004f9e:	e004      	b.n	8004faa <_malloc_r+0x72>
 8004fa0:	6863      	ldr	r3, [r4, #4]
 8004fa2:	42a2      	cmp	r2, r4
 8004fa4:	bf0c      	ite	eq
 8004fa6:	600b      	streq	r3, [r1, #0]
 8004fa8:	6053      	strne	r3, [r2, #4]
 8004faa:	4630      	mov	r0, r6
 8004fac:	f000 f85a 	bl	8005064 <__malloc_unlock>
 8004fb0:	f104 000b 	add.w	r0, r4, #11
 8004fb4:	1d23      	adds	r3, r4, #4
 8004fb6:	f020 0007 	bic.w	r0, r0, #7
 8004fba:	1ac2      	subs	r2, r0, r3
 8004fbc:	d0cc      	beq.n	8004f58 <_malloc_r+0x20>
 8004fbe:	1a1b      	subs	r3, r3, r0
 8004fc0:	50a3      	str	r3, [r4, r2]
 8004fc2:	e7c9      	b.n	8004f58 <_malloc_r+0x20>
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	6864      	ldr	r4, [r4, #4]
 8004fc8:	e7cc      	b.n	8004f64 <_malloc_r+0x2c>
 8004fca:	1cc4      	adds	r4, r0, #3
 8004fcc:	f024 0403 	bic.w	r4, r4, #3
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	d0e3      	beq.n	8004f9c <_malloc_r+0x64>
 8004fd4:	1a21      	subs	r1, r4, r0
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f82e 	bl	8005038 <_sbrk_r>
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d1dd      	bne.n	8004f9c <_malloc_r+0x64>
 8004fe0:	e7cf      	b.n	8004f82 <_malloc_r+0x4a>
 8004fe2:	bf00      	nop
 8004fe4:	2000014c 	.word	0x2000014c
 8004fe8:	20000150 	.word	0x20000150

08004fec <_realloc_r>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	4607      	mov	r7, r0
 8004ff0:	4614      	mov	r4, r2
 8004ff2:	460e      	mov	r6, r1
 8004ff4:	b921      	cbnz	r1, 8005000 <_realloc_r+0x14>
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ffc:	f7ff bf9c 	b.w	8004f38 <_malloc_r>
 8005000:	b922      	cbnz	r2, 800500c <_realloc_r+0x20>
 8005002:	f7ff ff4d 	bl	8004ea0 <_free_r>
 8005006:	4625      	mov	r5, r4
 8005008:	4628      	mov	r0, r5
 800500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800500c:	f000 f830 	bl	8005070 <_malloc_usable_size_r>
 8005010:	42a0      	cmp	r0, r4
 8005012:	d20f      	bcs.n	8005034 <_realloc_r+0x48>
 8005014:	4621      	mov	r1, r4
 8005016:	4638      	mov	r0, r7
 8005018:	f7ff ff8e 	bl	8004f38 <_malloc_r>
 800501c:	4605      	mov	r5, r0
 800501e:	2800      	cmp	r0, #0
 8005020:	d0f2      	beq.n	8005008 <_realloc_r+0x1c>
 8005022:	4631      	mov	r1, r6
 8005024:	4622      	mov	r2, r4
 8005026:	f7ff ff13 	bl	8004e50 <memcpy>
 800502a:	4631      	mov	r1, r6
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff ff37 	bl	8004ea0 <_free_r>
 8005032:	e7e9      	b.n	8005008 <_realloc_r+0x1c>
 8005034:	4635      	mov	r5, r6
 8005036:	e7e7      	b.n	8005008 <_realloc_r+0x1c>

08005038 <_sbrk_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	2300      	movs	r3, #0
 800503c:	4d05      	ldr	r5, [pc, #20]	; (8005054 <_sbrk_r+0x1c>)
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	f7fc fdc0 	bl	8001bc8 <_sbrk>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_sbrk_r+0x1a>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_sbrk_r+0x1a>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000290 	.word	0x20000290

08005058 <__malloc_lock>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__malloc_lock+0x8>)
 800505a:	f000 b811 	b.w	8005080 <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	20000298 	.word	0x20000298

08005064 <__malloc_unlock>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__malloc_unlock+0x8>)
 8005066:	f000 b80c 	b.w	8005082 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	20000298 	.word	0x20000298

08005070 <_malloc_usable_size_r>:
 8005070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005074:	1f18      	subs	r0, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	bfbc      	itt	lt
 800507a:	580b      	ldrlt	r3, [r1, r0]
 800507c:	18c0      	addlt	r0, r0, r3
 800507e:	4770      	bx	lr

08005080 <__retarget_lock_acquire_recursive>:
 8005080:	4770      	bx	lr

08005082 <__retarget_lock_release_recursive>:
 8005082:	4770      	bx	lr

08005084 <_init>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr

08005090 <_fini>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr
