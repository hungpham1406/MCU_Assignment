
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004884  08004884  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08004884  08004884  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004884  08004884  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800488c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000094  08004920  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004920  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e38  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bf  00000000  00000000  00031ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000344b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00035180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cd7  00000000  00000000  00035d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f65d  00000000  00000000  0004ea1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b370  00000000  00000000  0005e07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e93ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  000e9440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	080046e4 	.word	0x080046e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	080046e4 	.word	0x080046e4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e020      	b.n	80007aa <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <initStateForButton+0x60>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2101      	movs	r1, #1
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <initStateForButton+0x64>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2101      	movs	r1, #1
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <initStateForButton+0x68>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2101      	movs	r1, #1
 8000782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <initStateForButton+0x6c>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2101      	movs	r1, #1
 800078c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <initStateForButton+0x70>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	21c8      	movs	r1, #200	; 0xc8
 8000796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <initStateForButton+0x74>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2100      	movs	r1, #0
 80007a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dddb      	ble.n	8000768 <initStateForButton+0xc>
	 }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	2000017c 	.word	0x2000017c
 80007c0:	2000018c 	.word	0x2000018c
 80007c4:	200001bc 	.word	0x200001bc
 80007c8:	2000016c 	.word	0x2000016c
 80007cc:	200001ac 	.word	0x200001ac
 80007d0:	2000019c 	.word	0x2000019c

080007d4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <isButtonPressed+0x30>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d106      	bne.n	80007f6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <isButtonPressed+0x30>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2100      	movs	r1, #0
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e000      	b.n	80007f8 <isButtonPressed+0x24>
	}
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	2000019c 	.word	0x2000019c

08000808 <subKeyProcess>:

void subKeyProcess(int key_index) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <subKeyProcess+0x1c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2101      	movs	r1, #1
 8000816:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	2000019c 	.word	0x2000019c

08000828 <getKeyInput>:

void getKeyInput() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e076      	b.n	8000922 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000834:	4a3f      	ldr	r2, [pc, #252]	; (8000934 <getKeyInput+0x10c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	493e      	ldr	r1, [pc, #248]	; (8000938 <getKeyInput+0x110>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000844:	4a3d      	ldr	r2, [pc, #244]	; (800093c <getKeyInput+0x114>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	4939      	ldr	r1, [pc, #228]	; (8000934 <getKeyInput+0x10c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000854:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <getKeyInput+0x118>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085c:	4939      	ldr	r1, [pc, #228]	; (8000944 <getKeyInput+0x11c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f001 fd3a 	bl	80022e0 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	4a32      	ldr	r2, [pc, #200]	; (800093c <getKeyInput+0x114>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <getKeyInput+0x110>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000880:	492c      	ldr	r1, [pc, #176]	; (8000934 <getKeyInput+0x10c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000888:	429a      	cmp	r2, r3
 800088a:	d147      	bne.n	800091c <getKeyInput+0xf4>
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <getKeyInput+0x10c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000894:	4929      	ldr	r1, [pc, #164]	; (800093c <getKeyInput+0x114>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	d13d      	bne.n	800091c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <getKeyInput+0x120>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a8:	4924      	ldr	r1, [pc, #144]	; (800093c <getKeyInput+0x114>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d016      	beq.n	80008e2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <getKeyInput+0x114>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008bc:	4922      	ldr	r1, [pc, #136]	; (8000948 <getKeyInput+0x120>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <getKeyInput+0x114>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d125      	bne.n	800091c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff99 	bl	8000808 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <getKeyInput+0x124>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	21c8      	movs	r1, #200	; 0xc8
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008e0:	e01c      	b.n	800091c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <getKeyInput+0x124>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4917      	ldr	r1, [pc, #92]	; (800094c <getKeyInput+0x124>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <getKeyInput+0x124>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dc0d      	bgt.n	800091c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <getKeyInput+0x114>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <getKeyInput+0xea>
						subKeyProcess(i);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff7b 	bl	8000808 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <getKeyInput+0x124>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	21c8      	movs	r1, #200	; 0xc8
 8000918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b03      	cmp	r3, #3
 8000926:	dd85      	ble.n	8000834 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000018c 	.word	0x2000018c
 8000938:	2000017c 	.word	0x2000017c
 800093c:	200001bc 	.word	0x200001bc
 8000940:	20000008 	.word	0x20000008
 8000944:	20000000 	.word	0x20000000
 8000948:	2000016c 	.word	0x2000016c
 800094c:	200001ac 	.word	0x200001ac

08000950 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b0a      	subs	r3, #10
 800095c:	2b0d      	cmp	r3, #13
 800095e:	f200 80fa 	bhi.w	8000b56 <displayLed+0x206>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <displayLed+0x18>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009cd 	.word	0x080009cd
 8000970:	080009f9 	.word	0x080009f9
 8000974:	08000b57 	.word	0x08000b57
 8000978:	08000b57 	.word	0x08000b57
 800097c:	08000b57 	.word	0x08000b57
 8000980:	08000b57 	.word	0x08000b57
 8000984:	08000b57 	.word	0x08000b57
 8000988:	08000b57 	.word	0x08000b57
 800098c:	08000b57 	.word	0x08000b57
 8000990:	08000a25 	.word	0x08000a25
 8000994:	08000a73 	.word	0x08000a73
 8000998:	08000abf 	.word	0x08000abf
 800099c:	08000b0b 	.word	0x08000b0b
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a6:	4872      	ldr	r0, [pc, #456]	; (8000b70 <displayLed+0x220>)
 80009a8:	f001 fcb1 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <displayLed+0x224>)
 80009b2:	f001 fcac 	bl	800230e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2120      	movs	r1, #32
 80009ba:	486e      	ldr	r0, [pc, #440]	; (8000b74 <displayLed+0x224>)
 80009bc:	f001 fca7 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	486b      	ldr	r0, [pc, #428]	; (8000b74 <displayLed+0x224>)
 80009c6:	f001 fca2 	bl	800230e <HAL_GPIO_WritePin>
		break;
 80009ca:	e0cd      	b.n	8000b68 <displayLed+0x218>
//			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
//			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	4867      	ldr	r0, [pc, #412]	; (8000b70 <displayLed+0x220>)
 80009d4:	f001 fc9b 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2108      	movs	r1, #8
 80009dc:	4865      	ldr	r0, [pc, #404]	; (8000b74 <displayLed+0x224>)
 80009de:	f001 fc96 	bl	800230e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4863      	ldr	r0, [pc, #396]	; (8000b74 <displayLed+0x224>)
 80009e8:	f001 fc91 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	4860      	ldr	r0, [pc, #384]	; (8000b74 <displayLed+0x224>)
 80009f2:	f001 fc8c 	bl	800230e <HAL_GPIO_WritePin>
		break;
 80009f6:	e0b7      	b.n	8000b68 <displayLed+0x218>
//			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
//			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
//			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
//			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
//		}
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <displayLed+0x220>)
 8000a00:	f001 fc85 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	485a      	ldr	r0, [pc, #360]	; (8000b74 <displayLed+0x224>)
 8000a0a:	f001 fc80 	bl	800230e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4858      	ldr	r0, [pc, #352]	; (8000b74 <displayLed+0x224>)
 8000a14:	f001 fc7b 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4855      	ldr	r0, [pc, #340]	; (8000b74 <displayLed+0x224>)
 8000a1e:	f001 fc76 	bl	800230e <HAL_GPIO_WritePin>
		break;
 8000a22:	e0a1      	b.n	8000b68 <displayLed+0x218>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4851      	ldr	r0, [pc, #324]	; (8000b70 <displayLed+0x220>)
 8000a2c:	f001 fc6f 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	484f      	ldr	r0, [pc, #316]	; (8000b74 <displayLed+0x224>)
 8000a36:	f001 fc6a 	bl	800230e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <displayLed+0x224>)
 8000a40:	f001 fc65 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	484a      	ldr	r0, [pc, #296]	; (8000b74 <displayLed+0x224>)
 8000a4a:	f001 fc60 	bl	800230e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <displayLed+0x228>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	f040 8081 	bne.w	8000b5a <displayLed+0x20a>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <displayLed+0x224>)
 8000a60:	f001 fc55 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4841      	ldr	r0, [pc, #260]	; (8000b70 <displayLed+0x220>)
 8000a6c:	f001 fc4f 	bl	800230e <HAL_GPIO_WritePin>
		}
		break;
 8000a70:	e073      	b.n	8000b5a <displayLed+0x20a>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	483d      	ldr	r0, [pc, #244]	; (8000b70 <displayLed+0x220>)
 8000a7a:	f001 fc48 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	483c      	ldr	r0, [pc, #240]	; (8000b74 <displayLed+0x224>)
 8000a84:	f001 fc43 	bl	800230e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <displayLed+0x224>)
 8000a8e:	f001 fc3e 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2110      	movs	r1, #16
 8000a96:	4837      	ldr	r0, [pc, #220]	; (8000b74 <displayLed+0x224>)
 8000a98:	f001 fc39 	bl	800230e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <displayLed+0x228>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d15c      	bne.n	8000b5e <displayLed+0x20e>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4832      	ldr	r0, [pc, #200]	; (8000b74 <displayLed+0x224>)
 8000aac:	f001 fc2f 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	482e      	ldr	r0, [pc, #184]	; (8000b70 <displayLed+0x220>)
 8000ab8:	f001 fc29 	bl	800230e <HAL_GPIO_WritePin>
		}
		break;
 8000abc:	e04f      	b.n	8000b5e <displayLed+0x20e>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	482a      	ldr	r0, [pc, #168]	; (8000b70 <displayLed+0x220>)
 8000ac6:	f001 fc22 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	4829      	ldr	r0, [pc, #164]	; (8000b74 <displayLed+0x224>)
 8000ad0:	f001 fc1d 	bl	800230e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4826      	ldr	r0, [pc, #152]	; (8000b74 <displayLed+0x224>)
 8000ada:	f001 fc18 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4824      	ldr	r0, [pc, #144]	; (8000b74 <displayLed+0x224>)
 8000ae4:	f001 fc13 	bl	800230e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <displayLed+0x228>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d138      	bne.n	8000b62 <displayLed+0x212>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	481f      	ldr	r0, [pc, #124]	; (8000b74 <displayLed+0x224>)
 8000af8:	f001 fc09 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <displayLed+0x220>)
 8000b04:	f001 fc03 	bl	800230e <HAL_GPIO_WritePin>
		}
		break;
 8000b08:	e02b      	b.n	8000b62 <displayLed+0x212>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4817      	ldr	r0, [pc, #92]	; (8000b70 <displayLed+0x220>)
 8000b12:	f001 fbfc 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4816      	ldr	r0, [pc, #88]	; (8000b74 <displayLed+0x224>)
 8000b1c:	f001 fbf7 	bl	800230e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2120      	movs	r1, #32
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <displayLed+0x224>)
 8000b26:	f001 fbf2 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <displayLed+0x224>)
 8000b30:	f001 fbed 	bl	800230e <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <displayLed+0x228>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d114      	bne.n	8000b66 <displayLed+0x216>
		// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <displayLed+0x224>)
 8000b44:	f001 fbe3 	bl	800230e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <displayLed+0x220>)
 8000b50:	f001 fbdd 	bl	800230e <HAL_GPIO_WritePin>
		}
		break;
 8000b54:	e007      	b.n	8000b66 <displayLed+0x216>

	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e006      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e004      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e002      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b66:	bf00      	nop
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	200000bc 	.word	0x200000bc

08000b7c <switchMode2>:
 */

#include "fsm_automatic.h"


void switchMode2() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 8000b82:	4a11      	ldr	r2, [pc, #68]	; (8000bc8 <switchMode2+0x4c>)
 8000b84:	4911      	ldr	r1, [pc, #68]	; (8000bcc <switchMode2+0x50>)
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <switchMode2+0x54>)
 8000b88:	f003 f972 	bl	8003e70 <siprintf>
 8000b8c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	490e      	ldr	r1, [pc, #56]	; (8000bd0 <switchMode2+0x54>)
 8000b98:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <switchMode2+0x58>)
 8000b9a:	f002 ffb7 	bl	8003b0c <HAL_UART_Transmit>
	status = RED_MAN;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <switchMode2+0x5c>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	601a      	str	r2, [r3, #0]
	counter1 = redTimer;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <switchMode2+0x60>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <switchMode2+0x64>)
 8000baa:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f000 fe4b 	bl	8001848 <setTimer2>
	setTimer4(25);
 8000bb2:	2019      	movs	r0, #25
 8000bb4:	f000 fe70 	bl	8001898 <setTimer4>
	statusPedestrian = PES_OFF;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <switchMode2+0x68>)
 8000bba:	221f      	movs	r2, #31
 8000bbc:	601a      	str	r2, [r3, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	080046fc 	.word	0x080046fc
 8000bcc:	08004714 	.word	0x08004714
 8000bd0:	200000c8 	.word	0x200000c8
 8000bd4:	2000025c 	.word	0x2000025c
 8000bd8:	200000b8 	.word	0x200000b8
 8000bdc:	20000018 	.word	0x20000018
 8000be0:	200000b0 	.word	0x200000b0
 8000be4:	200000c0 	.word	0x200000c0

08000be8 <fsm_pedestrian>:

void fsm_pedestrian(){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <fsm_pedestrian+0x4c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b1e      	cmp	r3, #30
 8000bf2:	d002      	beq.n	8000bfa <fsm_pedestrian+0x12>
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d004      	beq.n	8000c02 <fsm_pedestrian+0x1a>
		turnPedestrian_flag = 0;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	default:
		break;
 8000bf8:	e013      	b.n	8000c22 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 1;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <fsm_pedestrian+0x50>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
		break;
 8000c00:	e00f      	b.n	8000c22 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 0;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <fsm_pedestrian+0x50>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <fsm_pedestrian+0x54>)
 8000c10:	f001 fb7d 	bl	800230e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c1a:	4809      	ldr	r0, [pc, #36]	; (8000c40 <fsm_pedestrian+0x58>)
 8000c1c:	f001 fb77 	bl	800230e <HAL_GPIO_WritePin>
		break;
 8000c20:	bf00      	nop
	}

	if(timer6_flag == 1) {
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <fsm_pedestrian+0x5c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <fsm_pedestrian+0x48>
		statusPedestrian = PES_OFF;
 8000c2a:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <fsm_pedestrian+0x4c>)
 8000c2c:	221f      	movs	r2, #31
 8000c2e:	601a      	str	r2, [r3, #0]
	}
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	200000bc 	.word	0x200000bc
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40010800 	.word	0x40010800
 8000c44:	20000158 	.word	0x20000158

08000c48 <fsm_automatic_run>:

void fsm_automatic_run() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
	switch(status) {
 8000c4e:	4b93      	ldr	r3, [pc, #588]	; (8000e9c <fsm_automatic_run+0x254>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	f200 8184 	bhi.w	8000f62 <fsm_automatic_run+0x31a>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <fsm_automatic_run+0x18>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000caf 	.word	0x08000caf
 8000c68:	08000d47 	.word	0x08000d47
 8000c6c:	08000dd3 	.word	0x08000dd3
 8000c70:	08000ed9 	.word	0x08000ed9
	case INIT:
		statusPedestrian = PES_OFF;
 8000c74:	4b8a      	ldr	r3, [pc, #552]	; (8000ea0 <fsm_automatic_run+0x258>)
 8000c76:	221f      	movs	r2, #31
 8000c78:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN2_AUTO;
 8000c7a:	4b88      	ldr	r3, [pc, #544]	; (8000e9c <fsm_automatic_run+0x254>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 8000c80:	4b88      	ldr	r3, [pc, #544]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a88      	ldr	r2, [pc, #544]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000c86:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000c88:	4b88      	ldr	r3, [pc, #544]	; (8000eac <fsm_automatic_run+0x264>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a88      	ldr	r2, [pc, #544]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000c8e:	6013      	str	r3, [r2, #0]

		setTimer1(greenTimer*100);
 8000c90:	4b86      	ldr	r3, [pc, #536]	; (8000eac <fsm_automatic_run+0x264>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2264      	movs	r2, #100	; 0x64
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fdc0 	bl	8001820 <setTimer1>
		setTimer2(100);
 8000ca0:	2064      	movs	r0, #100	; 0x64
 8000ca2:	f000 fdd1 	bl	8001848 <setTimer2>
		setTimer5(25);
 8000ca6:	2019      	movs	r0, #25
 8000ca8:	f000 fe0a 	bl	80018c0 <setTimer5>
		break;
 8000cac:	e162      	b.n	8000f74 <fsm_automatic_run+0x32c>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 8000cae:	2014      	movs	r0, #20
 8000cb0:	f7ff fe4e 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000cb4:	4b7f      	ldr	r3, [pc, #508]	; (8000eb4 <fsm_automatic_run+0x26c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d11d      	bne.n	8000cf8 <fsm_automatic_run+0xb0>
			int len= sprintf(str,"LED RED      = %d    LED GREEN    = %d\r\n",counter1,counter2);
 8000cbc:	4b7a      	ldr	r3, [pc, #488]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b7b      	ldr	r3, [pc, #492]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	497c      	ldr	r1, [pc, #496]	; (8000eb8 <fsm_automatic_run+0x270>)
 8000cc6:	487d      	ldr	r0, [pc, #500]	; (8000ebc <fsm_automatic_run+0x274>)
 8000cc8:	f003 f8d2 	bl	8003e70 <siprintf>
 8000ccc:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	4979      	ldr	r1, [pc, #484]	; (8000ebc <fsm_automatic_run+0x274>)
 8000cd8:	4879      	ldr	r0, [pc, #484]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000cda:	f002 ff17 	bl	8003b0c <HAL_UART_Transmit>
			setTimer2(100);
 8000cde:	2064      	movs	r0, #100	; 0x64
 8000ce0:	f000 fdb2 	bl	8001848 <setTimer2>
			counter1--;
 8000ce4:	4b70      	ldr	r3, [pc, #448]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a6f      	ldr	r2, [pc, #444]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000cec:	6013      	str	r3, [r2, #0]
			counter2--;
 8000cee:	4b70      	ldr	r3, [pc, #448]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	4a6e      	ldr	r2, [pc, #440]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000cf6:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000cf8:	4b72      	ldr	r3, [pc, #456]	; (8000ec4 <fsm_automatic_run+0x27c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d118      	bne.n	8000d32 <fsm_automatic_run+0xea>
			status = RED1_YELLOW2_AUTO;
 8000d00:	4b66      	ldr	r3, [pc, #408]	; (8000e9c <fsm_automatic_run+0x254>)
 8000d02:	2203      	movs	r2, #3
 8000d04:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000d06:	4b67      	ldr	r3, [pc, #412]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4b68      	ldr	r3, [pc, #416]	; (8000eac <fsm_automatic_run+0x264>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2264      	movs	r2, #100	; 0x64
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fd82 	bl	8001820 <setTimer1>
			counter1 = redTimer-greenTimer;
 8000d1c:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b62      	ldr	r3, [pc, #392]	; (8000eac <fsm_automatic_run+0x264>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	4a60      	ldr	r2, [pc, #384]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000d28:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 8000d2a:	4b67      	ldr	r3, [pc, #412]	; (8000ec8 <fsm_automatic_run+0x280>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a60      	ldr	r2, [pc, #384]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000d30:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fd4e 	bl	80007d4 <isButtonPressed>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8113 	beq.w	8000f66 <fsm_automatic_run+0x31e>
			switchMode2();
 8000d40:	f7ff ff1c 	bl	8000b7c <switchMode2>
		}

		break;
 8000d44:	e10f      	b.n	8000f66 <fsm_automatic_run+0x31e>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 8000d46:	2015      	movs	r0, #21
 8000d48:	f7ff fe02 	bl	8000950 <displayLed>
		if(timer2_flag == 1) {
 8000d4c:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <fsm_automatic_run+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d11d      	bne.n	8000d90 <fsm_automatic_run+0x148>
			int len= sprintf(str,"LED RED      = %d    LED YELLOW   = %d\r\n",counter1,counter2);
 8000d54:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	495b      	ldr	r1, [pc, #364]	; (8000ecc <fsm_automatic_run+0x284>)
 8000d5e:	4857      	ldr	r0, [pc, #348]	; (8000ebc <fsm_automatic_run+0x274>)
 8000d60:	f003 f886 	bl	8003e70 <siprintf>
 8000d64:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	4953      	ldr	r1, [pc, #332]	; (8000ebc <fsm_automatic_run+0x274>)
 8000d70:	4853      	ldr	r0, [pc, #332]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000d72:	f002 fecb 	bl	8003b0c <HAL_UART_Transmit>
			setTimer2(100);
 8000d76:	2064      	movs	r0, #100	; 0x64
 8000d78:	f000 fd66 	bl	8001848 <setTimer2>
			counter1--;
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	4a49      	ldr	r2, [pc, #292]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000d84:	6013      	str	r3, [r2, #0]
			counter2--;
 8000d86:	4b4a      	ldr	r3, [pc, #296]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a48      	ldr	r2, [pc, #288]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000d8e:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000d90:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <fsm_automatic_run+0x27c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d112      	bne.n	8000dbe <fsm_automatic_run+0x176>
			status = GREEN1_RED2_AUTO;
 8000d98:	4b40      	ldr	r3, [pc, #256]	; (8000e9c <fsm_automatic_run+0x254>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <fsm_automatic_run+0x264>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2264      	movs	r2, #100	; 0x64
 8000da4:	fb02 f303 	mul.w	r3, r2, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fd39 	bl	8001820 <setTimer1>
			counter1 = greenTimer;
 8000dae:	4b3f      	ldr	r3, [pc, #252]	; (8000eac <fsm_automatic_run+0x264>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000db4:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000dbc:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff fd08 	bl	80007d4 <isButtonPressed>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 80cf 	beq.w	8000f6a <fsm_automatic_run+0x322>
			switchMode2();
 8000dcc:	f7ff fed6 	bl	8000b7c <switchMode2>
		}
		break;
 8000dd0:	e0cb      	b.n	8000f6a <fsm_automatic_run+0x322>
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000dd2:	2016      	movs	r0, #22
 8000dd4:	f7ff fdbc 	bl	8000950 <displayLed>
		if (isButtonPressed(3)) {
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f7ff fcfb 	bl	80007d4 <isButtonPressed>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d013      	beq.n	8000e0c <fsm_automatic_run+0x1c4>
			statusPedestrian = PES_ON;
 8000de4:	4b2e      	ldr	r3, [pc, #184]	; (8000ea0 <fsm_automatic_run+0x258>)
 8000de6:	221e      	movs	r2, #30
 8000de8:	601a      	str	r2, [r3, #0]
//			setTimer3((redTimer+greenTimer+yellowTimer)*100 - 400);
			setTimer3(600);
 8000dea:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000dee:	f000 fd3f 	bl	8001870 <setTimer3>
			setTimer6((3*redTimer)*100);
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dfa:	fb02 f303 	mul.w	r3, r2, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 fd72 	bl	80018e8 <setTimer6>
			value_buzzer = 2000;
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <fsm_automatic_run+0x288>)
 8000e06:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e0a:	601a      	str	r2, [r3, #0]
		}

		if(timer2_flag == 1) {
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <fsm_automatic_run+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d11d      	bne.n	8000e50 <fsm_automatic_run+0x208>
			int len= sprintf(str,"LED GREEN    = %d    LED RED      = %d\r\n",counter1,counter2);
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	492d      	ldr	r1, [pc, #180]	; (8000ed4 <fsm_automatic_run+0x28c>)
 8000e1e:	4827      	ldr	r0, [pc, #156]	; (8000ebc <fsm_automatic_run+0x274>)
 8000e20:	f003 f826 	bl	8003e70 <siprintf>
 8000e24:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	4923      	ldr	r1, [pc, #140]	; (8000ebc <fsm_automatic_run+0x274>)
 8000e30:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <fsm_automatic_run+0x278>)
 8000e32:	f002 fe6b 	bl	8003b0c <HAL_UART_Transmit>
			setTimer2(100);
 8000e36:	2064      	movs	r0, #100	; 0x64
 8000e38:	f000 fd06 	bl	8001848 <setTimer2>
			counter1--;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000e44:	6013      	str	r3, [r2, #0]
			counter2--;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000e4e:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <fsm_automatic_run+0x27c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d118      	bne.n	8000e8a <fsm_automatic_run+0x242>
			status = YELLOW1_RED2_AUTO;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <fsm_automatic_run+0x254>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <fsm_automatic_run+0x264>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2264      	movs	r2, #100	; 0x64
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fcd6 	bl	8001820 <setTimer1>
			counter1 = yellowTimer;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <fsm_automatic_run+0x280>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <fsm_automatic_run+0x260>)
 8000e7a:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <fsm_automatic_run+0x25c>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <fsm_automatic_run+0x264>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <fsm_automatic_run+0x268>)
 8000e88:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fca2 	bl	80007d4 <isButtonPressed>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d06b      	beq.n	8000f6e <fsm_automatic_run+0x326>
			switchMode2();
 8000e96:	f7ff fe71 	bl	8000b7c <switchMode2>
		}
		break;
 8000e9a:	e068      	b.n	8000f6e <fsm_automatic_run+0x326>
 8000e9c:	200000b8 	.word	0x200000b8
 8000ea0:	200000c0 	.word	0x200000c0
 8000ea4:	20000018 	.word	0x20000018
 8000ea8:	200000b0 	.word	0x200000b0
 8000eac:	20000020 	.word	0x20000020
 8000eb0:	200000b4 	.word	0x200000b4
 8000eb4:	20000138 	.word	0x20000138
 8000eb8:	0800471c 	.word	0x0800471c
 8000ebc:	200000c8 	.word	0x200000c8
 8000ec0:	2000025c 	.word	0x2000025c
 8000ec4:	20000130 	.word	0x20000130
 8000ec8:	2000001c 	.word	0x2000001c
 8000ecc:	08004748 	.word	0x08004748
 8000ed0:	200000c4 	.word	0x200000c4
 8000ed4:	08004774 	.word	0x08004774
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 8000ed8:	2017      	movs	r0, #23
 8000eda:	f7ff fd39 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000ede:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <fsm_automatic_run+0x334>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d11d      	bne.n	8000f22 <fsm_automatic_run+0x2da>
			int len= sprintf(str,"LED YELLOW   = %d    LED RED      = %d\r\n",counter1,counter2);
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <fsm_automatic_run+0x338>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <fsm_automatic_run+0x33c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4926      	ldr	r1, [pc, #152]	; (8000f88 <fsm_automatic_run+0x340>)
 8000ef0:	4826      	ldr	r0, [pc, #152]	; (8000f8c <fsm_automatic_run+0x344>)
 8000ef2:	f002 ffbd 	bl	8003e70 <siprintf>
 8000ef6:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	4922      	ldr	r1, [pc, #136]	; (8000f8c <fsm_automatic_run+0x344>)
 8000f02:	4823      	ldr	r0, [pc, #140]	; (8000f90 <fsm_automatic_run+0x348>)
 8000f04:	f002 fe02 	bl	8003b0c <HAL_UART_Transmit>
			setTimer2(100);
 8000f08:	2064      	movs	r0, #100	; 0x64
 8000f0a:	f000 fc9d 	bl	8001848 <setTimer2>
			counter1--;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <fsm_automatic_run+0x338>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <fsm_automatic_run+0x338>)
 8000f16:	6013      	str	r3, [r2, #0]
			counter2--;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <fsm_automatic_run+0x33c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <fsm_automatic_run+0x33c>)
 8000f20:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <fsm_automatic_run+0x34c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d112      	bne.n	8000f50 <fsm_automatic_run+0x308>
			status = RED1_GREEN2_AUTO;
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <fsm_automatic_run+0x350>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <fsm_automatic_run+0x354>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 fc70 	bl	8001820 <setTimer1>
			counter1 = redTimer;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <fsm_automatic_run+0x358>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <fsm_automatic_run+0x338>)
 8000f46:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <fsm_automatic_run+0x354>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <fsm_automatic_run+0x33c>)
 8000f4e:	6013      	str	r3, [r2, #0]
		}

		if(isButtonPressed(0)) {
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fc3f 	bl	80007d4 <isButtonPressed>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <fsm_automatic_run+0x32a>
			switchMode2();
 8000f5c:	f7ff fe0e 	bl	8000b7c <switchMode2>
		}
		break;
 8000f60:	e007      	b.n	8000f72 <fsm_automatic_run+0x32a>
	default:
		break;
 8000f62:	bf00      	nop
 8000f64:	e006      	b.n	8000f74 <fsm_automatic_run+0x32c>
		break;
 8000f66:	bf00      	nop
 8000f68:	e004      	b.n	8000f74 <fsm_automatic_run+0x32c>
		break;
 8000f6a:	bf00      	nop
 8000f6c:	e002      	b.n	8000f74 <fsm_automatic_run+0x32c>
		break;
 8000f6e:	bf00      	nop
 8000f70:	e000      	b.n	8000f74 <fsm_automatic_run+0x32c>
		break;
 8000f72:	bf00      	nop
	}
};
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000138 	.word	0x20000138
 8000f80:	200000b0 	.word	0x200000b0
 8000f84:	200000b4 	.word	0x200000b4
 8000f88:	080047a0 	.word	0x080047a0
 8000f8c:	200000c8 	.word	0x200000c8
 8000f90:	2000025c 	.word	0x2000025c
 8000f94:	20000130 	.word	0x20000130
 8000f98:	200000b8 	.word	0x200000b8
 8000f9c:	20000020 	.word	0x20000020
 8000fa0:	20000018 	.word	0x20000018

08000fa4 <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <switchMode3+0x24>)
 8000faa:	220b      	movs	r2, #11
 8000fac:	601a      	str	r2, [r3, #0]
	counter1 = yellowTimer;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <switchMode3+0x28>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <switchMode3+0x2c>)
 8000fb4:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f000 fc46 	bl	8001848 <setTimer2>
	setTimer4(25);
 8000fbc:	2019      	movs	r0, #25
 8000fbe:	f000 fc6b 	bl	8001898 <setTimer4>
//	updateLedBufferVal(counter1/10, 3, counter1%10, 3);
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000b8 	.word	0x200000b8
 8000fcc:	2000001c 	.word	0x2000001c
 8000fd0:	200000b0 	.word	0x200000b0

08000fd4 <switchMode4>:

void switchMode4() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <switchMode4+0x24>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	601a      	str	r2, [r3, #0]
	counter1 = greenTimer;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <switchMode4+0x28>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a07      	ldr	r2, [pc, #28]	; (8001000 <switchMode4+0x2c>)
 8000fe4:	6013      	str	r3, [r2, #0]
	setTimer2(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f000 fc2e 	bl	8001848 <setTimer2>
	setTimer4(25);
 8000fec:	2019      	movs	r0, #25
 8000fee:	f000 fc53 	bl	8001898 <setTimer4>
//	updateLedBufferVal(counter1/10, 4, counter1%10, 4);
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000b8 	.word	0x200000b8
 8000ffc:	20000020 	.word	0x20000020
 8001000:	200000b0 	.word	0x200000b0

08001004 <fsm_manual_run>:

void fsm_manual_run() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
	switch(status) {
 800100a:	4b8f      	ldr	r3, [pc, #572]	; (8001248 <fsm_manual_run+0x244>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3b0a      	subs	r3, #10
 8001010:	2b05      	cmp	r3, #5
 8001012:	f200 8184 	bhi.w	800131e <fsm_manual_run+0x31a>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <fsm_manual_run+0x18>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	08001035 	.word	0x08001035
 8001020:	0800111b 	.word	0x0800111b
 8001024:	08001205 	.word	0x08001205
 8001028:	08001077 	.word	0x08001077
 800102c:	0800115d 	.word	0x0800115d
 8001030:	08001279 	.word	0x08001279

	case RED_MAN:
		displayLed(RED_MAN);
 8001034:	200a      	movs	r0, #10
 8001036:	f7ff fc8b 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 800103a:	4b84      	ldr	r3, [pc, #528]	; (800124c <fsm_manual_run+0x248>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <fsm_manual_run+0x44>
			setTimer2(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f000 fc00 	bl	8001848 <setTimer2>
//			updateLedBufferVal(counter1/10, 2, counter1%10, 2);
		}

		if(isButtonPressed(0)) {
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fbc3 	bl	80007d4 <isButtonPressed>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <fsm_manual_run+0x54>
			switchMode3();
 8001054:	f7ff ffa6 	bl	8000fa4 <switchMode3>
		}

		if(isButtonPressed(1)) {
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff fbbb 	bl	80007d4 <isButtonPressed>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 815e 	beq.w	8001322 <fsm_manual_run+0x31e>
			status = RED_MAN_MODIFY;
 8001066:	4b78      	ldr	r3, [pc, #480]	; (8001248 <fsm_manual_run+0x244>)
 8001068:	220d      	movs	r2, #13
 800106a:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 800106c:	4b78      	ldr	r3, [pc, #480]	; (8001250 <fsm_manual_run+0x24c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a78      	ldr	r2, [pc, #480]	; (8001254 <fsm_manual_run+0x250>)
 8001072:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}
		break;
 8001074:	e155      	b.n	8001322 <fsm_manual_run+0x31e>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 8001076:	200a      	movs	r0, #10
 8001078:	f7ff fc6a 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff fba9 	bl	80007d4 <isButtonPressed>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <fsm_manual_run+0x8a>
			status = RED_MAN;
 8001088:	4b6f      	ldr	r3, [pc, #444]	; (8001248 <fsm_manual_run+0x244>)
 800108a:	220a      	movs	r2, #10
 800108c:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fba0 	bl	80007d4 <isButtonPressed>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d01b      	beq.n	80010d2 <fsm_manual_run+0xce>
			timerMan++;
 800109a:	4b6e      	ldr	r3, [pc, #440]	; (8001254 <fsm_manual_run+0x250>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a6c      	ldr	r2, [pc, #432]	; (8001254 <fsm_manual_run+0x250>)
 80010a2:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 80010a4:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <fsm_manual_run+0x250>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	496b      	ldr	r1, [pc, #428]	; (8001258 <fsm_manual_run+0x254>)
 80010ac:	486b      	ldr	r0, [pc, #428]	; (800125c <fsm_manual_run+0x258>)
 80010ae:	f002 fedf 	bl	8003e70 <siprintf>
 80010b2:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010bc:	4967      	ldr	r1, [pc, #412]	; (800125c <fsm_manual_run+0x258>)
 80010be:	4868      	ldr	r0, [pc, #416]	; (8001260 <fsm_manual_run+0x25c>)
 80010c0:	f002 fd24 	bl	8003b0c <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 80010c4:	4b63      	ldr	r3, [pc, #396]	; (8001254 <fsm_manual_run+0x250>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b63      	cmp	r3, #99	; 0x63
 80010ca:	dd02      	ble.n	80010d2 <fsm_manual_run+0xce>
 80010cc:	4b61      	ldr	r3, [pc, #388]	; (8001254 <fsm_manual_run+0x250>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 2, timerMan%10, 2);
		}

		if(isButtonPressed(2)) {
 80010d2:	2002      	movs	r0, #2
 80010d4:	f7ff fb7e 	bl	80007d4 <isButtonPressed>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8123 	beq.w	8001326 <fsm_manual_run+0x322>
			status = INIT;
 80010e0:	4b59      	ldr	r3, [pc, #356]	; (8001248 <fsm_manual_run+0x244>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <fsm_manual_run+0x260>)
 80010e8:	495f      	ldr	r1, [pc, #380]	; (8001268 <fsm_manual_run+0x264>)
 80010ea:	485c      	ldr	r0, [pc, #368]	; (800125c <fsm_manual_run+0x258>)
 80010ec:	f002 fec0 	bl	8003e70 <siprintf>
 80010f0:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	4958      	ldr	r1, [pc, #352]	; (800125c <fsm_manual_run+0x258>)
 80010fc:	4858      	ldr	r0, [pc, #352]	; (8001260 <fsm_manual_run+0x25c>)
 80010fe:	f002 fd05 	bl	8003b0c <HAL_UART_Transmit>
			redTimer = timerMan;
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <fsm_manual_run+0x250>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a52      	ldr	r2, [pc, #328]	; (8001250 <fsm_manual_run+0x24c>)
 8001108:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <fsm_manual_run+0x24c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b57      	ldr	r3, [pc, #348]	; (800126c <fsm_manual_run+0x268>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a56      	ldr	r2, [pc, #344]	; (8001270 <fsm_manual_run+0x26c>)
 8001116:	6013      	str	r3, [r2, #0]
		}

		break;
 8001118:	e105      	b.n	8001326 <fsm_manual_run+0x322>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 800111a:	200b      	movs	r0, #11
 800111c:	f7ff fc18 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8001120:	4b4a      	ldr	r3, [pc, #296]	; (800124c <fsm_manual_run+0x248>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <fsm_manual_run+0x12a>
			setTimer2(100);
 8001128:	2064      	movs	r0, #100	; 0x64
 800112a:	f000 fb8d 	bl	8001848 <setTimer2>
//			updateLedBufferVal(counter1/10, 3, counter1%10, 3);
		}

		if(isButtonPressed(0)) {
 800112e:	2000      	movs	r0, #0
 8001130:	f7ff fb50 	bl	80007d4 <isButtonPressed>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <fsm_manual_run+0x13a>
			switchMode4();
 800113a:	f7ff ff4b 	bl	8000fd4 <switchMode4>
		}

		if(isButtonPressed(1)) {
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff fb48 	bl	80007d4 <isButtonPressed>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80ef 	beq.w	800132a <fsm_manual_run+0x326>
			status = YELLOW_MAN_MODIFY;
 800114c:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <fsm_manual_run+0x244>)
 800114e:	220e      	movs	r2, #14
 8001150:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <fsm_manual_run+0x268>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a3f      	ldr	r2, [pc, #252]	; (8001254 <fsm_manual_run+0x250>)
 8001158:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}
		break;
 800115a:	e0e6      	b.n	800132a <fsm_manual_run+0x326>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 800115c:	200b      	movs	r0, #11
 800115e:	f7ff fbf7 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fb36 	bl	80007d4 <isButtonPressed>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d002      	beq.n	8001174 <fsm_manual_run+0x170>
			status = YELLOW_MAN;
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <fsm_manual_run+0x244>)
 8001170:	220b      	movs	r2, #11
 8001172:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fb2d 	bl	80007d4 <isButtonPressed>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d01d      	beq.n	80011bc <fsm_manual_run+0x1b8>
			timerMan++;
 8001180:	4b34      	ldr	r3, [pc, #208]	; (8001254 <fsm_manual_run+0x250>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a33      	ldr	r2, [pc, #204]	; (8001254 <fsm_manual_run+0x250>)
 8001188:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <fsm_manual_run+0x250>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4938      	ldr	r1, [pc, #224]	; (8001274 <fsm_manual_run+0x270>)
 8001192:	4832      	ldr	r0, [pc, #200]	; (800125c <fsm_manual_run+0x258>)
 8001194:	f002 fe6c 	bl	8003e70 <siprintf>
 8001198:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	b29a      	uxth	r2, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	492e      	ldr	r1, [pc, #184]	; (800125c <fsm_manual_run+0x258>)
 80011a4:	482e      	ldr	r0, [pc, #184]	; (8001260 <fsm_manual_run+0x25c>)
 80011a6:	f002 fcb1 	bl	8003b0c <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <fsm_manual_run+0x250>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b28      	ldr	r3, [pc, #160]	; (8001250 <fsm_manual_run+0x24c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	db02      	blt.n	80011bc <fsm_manual_run+0x1b8>
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <fsm_manual_run+0x250>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 3, timerMan%10, 3);
		}

		if(isButtonPressed(2)) {
 80011bc:	2002      	movs	r0, #2
 80011be:	f7ff fb09 	bl	80007d4 <isButtonPressed>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b2 	beq.w	800132e <fsm_manual_run+0x32a>
			status = INIT;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <fsm_manual_run+0x244>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80011d0:	4a24      	ldr	r2, [pc, #144]	; (8001264 <fsm_manual_run+0x260>)
 80011d2:	4925      	ldr	r1, [pc, #148]	; (8001268 <fsm_manual_run+0x264>)
 80011d4:	4821      	ldr	r0, [pc, #132]	; (800125c <fsm_manual_run+0x258>)
 80011d6:	f002 fe4b 	bl	8003e70 <siprintf>
 80011da:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	491d      	ldr	r1, [pc, #116]	; (800125c <fsm_manual_run+0x258>)
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <fsm_manual_run+0x25c>)
 80011e8:	f002 fc90 	bl	8003b0c <HAL_UART_Transmit>
			yellowTimer = timerMan;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <fsm_manual_run+0x250>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <fsm_manual_run+0x268>)
 80011f2:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <fsm_manual_run+0x24c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <fsm_manual_run+0x268>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <fsm_manual_run+0x26c>)
 8001200:	6013      	str	r3, [r2, #0]
		}
		break;
 8001202:	e094      	b.n	800132e <fsm_manual_run+0x32a>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8001204:	200c      	movs	r0, #12
 8001206:	f7ff fba3 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <fsm_manual_run+0x248>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <fsm_manual_run+0x214>
			setTimer2(100);
 8001212:	2064      	movs	r0, #100	; 0x64
 8001214:	f000 fb18 	bl	8001848 <setTimer2>
//			updateLedBufferVal(counter1/10, 4, counter1%10, 4);
		}

		if(isButtonPressed(0)) {
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fadb 	bl	80007d4 <isButtonPressed>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <fsm_manual_run+0x226>
			status = INIT;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <fsm_manual_run+0x244>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff fad2 	bl	80007d4 <isButtonPressed>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d07d      	beq.n	8001332 <fsm_manual_run+0x32e>
			status = GREEN_MAN_MODIFY;
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <fsm_manual_run+0x244>)
 8001238:	220f      	movs	r2, #15
 800123a:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <fsm_manual_run+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <fsm_manual_run+0x250>)
 8001242:	6013      	str	r3, [r2, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}
		break;
 8001244:	e075      	b.n	8001332 <fsm_manual_run+0x32e>
 8001246:	bf00      	nop
 8001248:	200000b8 	.word	0x200000b8
 800124c:	20000138 	.word	0x20000138
 8001250:	20000018 	.word	0x20000018
 8001254:	2000015c 	.word	0x2000015c
 8001258:	080047cc 	.word	0x080047cc
 800125c:	200000c8 	.word	0x200000c8
 8001260:	2000025c 	.word	0x2000025c
 8001264:	080047e0 	.word	0x080047e0
 8001268:	080047f4 	.word	0x080047f4
 800126c:	2000001c 	.word	0x2000001c
 8001270:	20000020 	.word	0x20000020
 8001274:	080047fc 	.word	0x080047fc
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8001278:	200c      	movs	r0, #12
 800127a:	f7ff fb69 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff faa8 	bl	80007d4 <isButtonPressed>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <fsm_manual_run+0x28c>
			status = GREEN_MAN;
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <fsm_manual_run+0x33c>)
 800128c:	220c      	movs	r2, #12
 800128e:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001290:	2001      	movs	r0, #1
 8001292:	f7ff fa9f 	bl	80007d4 <isButtonPressed>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01d      	beq.n	80012d8 <fsm_manual_run+0x2d4>
			timerMan++;
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <fsm_manual_run+0x340>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a28      	ldr	r2, [pc, #160]	; (8001344 <fsm_manual_run+0x340>)
 80012a4:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <fsm_manual_run+0x340>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4926      	ldr	r1, [pc, #152]	; (8001348 <fsm_manual_run+0x344>)
 80012ae:	4827      	ldr	r0, [pc, #156]	; (800134c <fsm_manual_run+0x348>)
 80012b0:	f002 fdde 	bl	8003e70 <siprintf>
 80012b4:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	4923      	ldr	r1, [pc, #140]	; (800134c <fsm_manual_run+0x348>)
 80012c0:	4823      	ldr	r0, [pc, #140]	; (8001350 <fsm_manual_run+0x34c>)
 80012c2:	f002 fc23 	bl	8003b0c <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <fsm_manual_run+0x340>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <fsm_manual_run+0x350>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	db02      	blt.n	80012d8 <fsm_manual_run+0x2d4>
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <fsm_manual_run+0x340>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]
//			updateLedBufferVal(timerMan/10, 4, timerMan%10, 4);
		}

		if(isButtonPressed(2)) {
 80012d8:	2002      	movs	r0, #2
 80012da:	f7ff fa7b 	bl	80007d4 <isButtonPressed>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d028      	beq.n	8001336 <fsm_manual_run+0x332>
			status = INIT;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <fsm_manual_run+0x33c>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80012ea:	4a1b      	ldr	r2, [pc, #108]	; (8001358 <fsm_manual_run+0x354>)
 80012ec:	491b      	ldr	r1, [pc, #108]	; (800135c <fsm_manual_run+0x358>)
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <fsm_manual_run+0x348>)
 80012f0:	f002 fdbe 	bl	8003e70 <siprintf>
 80012f4:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	4913      	ldr	r1, [pc, #76]	; (800134c <fsm_manual_run+0x348>)
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <fsm_manual_run+0x34c>)
 8001302:	f002 fc03 	bl	8003b0c <HAL_UART_Transmit>
			greenTimer = timerMan;
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <fsm_manual_run+0x340>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <fsm_manual_run+0x35c>)
 800130c:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <fsm_manual_run+0x350>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <fsm_manual_run+0x35c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <fsm_manual_run+0x360>)
 800131a:	6013      	str	r3, [r2, #0]
		}
		break;
 800131c:	e00b      	b.n	8001336 <fsm_manual_run+0x332>
	default:
		break;
 800131e:	bf00      	nop
 8001320:	e00a      	b.n	8001338 <fsm_manual_run+0x334>
		break;
 8001322:	bf00      	nop
 8001324:	e008      	b.n	8001338 <fsm_manual_run+0x334>
		break;
 8001326:	bf00      	nop
 8001328:	e006      	b.n	8001338 <fsm_manual_run+0x334>
		break;
 800132a:	bf00      	nop
 800132c:	e004      	b.n	8001338 <fsm_manual_run+0x334>
		break;
 800132e:	bf00      	nop
 8001330:	e002      	b.n	8001338 <fsm_manual_run+0x334>
		break;
 8001332:	bf00      	nop
 8001334:	e000      	b.n	8001338 <fsm_manual_run+0x334>
		break;
 8001336:	bf00      	nop
	}
};
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200000b8 	.word	0x200000b8
 8001344:	2000015c 	.word	0x2000015c
 8001348:	08004810 	.word	0x08004810
 800134c:	200000c8 	.word	0x200000c8
 8001350:	2000025c 	.word	0x2000025c
 8001354:	20000018 	.word	0x20000018
 8001358:	080047e0 	.word	0x080047e0
 800135c:	080047f4 	.word	0x080047f4
 8001360:	20000020 	.word	0x20000020
 8001364:	2000001c 	.word	0x2000001c

08001368 <buzzer_activate>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void buzzer_activate() {
 8001368:	b598      	push	{r3, r4, r7, lr}
 800136a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value_buzzer);
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <buzzer_activate+0x70>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	441a      	add	r2, r3
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <buzzer_activate+0x74>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <buzzer_activate+0x70>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	461a      	mov	r2, r3
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <buzzer_activate+0x74>)
 800138a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*value_buzzer));
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <buzzer_activate+0x70>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f956 	bl	8000648 <__aeabi_i2d>
 800139c:	a30c      	add	r3, pc, #48	; (adr r3, 80013d0 <buzzer_activate+0x68>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7fe fed5 	bl	8000150 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	490c      	ldr	r1, [pc, #48]	; (80013dc <buzzer_activate+0x74>)
 80013ac:	680c      	ldr	r4, [r1, #0]
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f7ff f9b3 	bl	800071c <__aeabi_d2uiz>
 80013b6:	4603      	mov	r3, r0
 80013b8:	6363      	str	r3, [r4, #52]	; 0x34
	value_buzzer = value_buzzer - 500;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <buzzer_activate+0x70>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <buzzer_activate+0x70>)
 80013c4:	6013      	str	r3, [r2, #0]
}
 80013c6:	bf00      	nop
 80013c8:	bd98      	pop	{r3, r4, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	33333333 	.word	0x33333333
 80013d4:	3fe33333 	.word	0x3fe33333
 80013d8:	200000c4 	.word	0x200000c4
 80013dc:	200001cc 	.word	0x200001cc

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f000 fc88 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 f82a 	bl	8001440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ec:	f000 f95a 	bl	80016a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013f0:	f000 f92e 	bl	8001650 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013f4:	f000 f866 	bl	80014c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013f8:	f000 f8b2 	bl	8001560 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <main+0x50>)
 80013fe:	f001 fc1f 	bl	8002c40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001402:	2100      	movs	r1, #0
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <main+0x54>)
 8001406:	f001 fcc5 	bl	8002d94 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initStateForButton();
 800140a:	f7ff f9a7 	bl	800075c <initStateForButton>
  status = INIT;
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <main+0x58>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if(timer3_flag == 1) buzzer_activate();
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <main+0x5c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d101      	bne.n	8001420 <main+0x40>
 800141c:	f7ff ffa4 	bl	8001368 <buzzer_activate>
	  fsm_automatic_run();
 8001420:	f7ff fc12 	bl	8000c48 <fsm_automatic_run>
	  fsm_manual_run();
 8001424:	f7ff fdee 	bl	8001004 <fsm_manual_run>
	  fsm_pedestrian();
 8001428:	f7ff fbde 	bl	8000be8 <fsm_pedestrian>
  {
 800142c:	e7f2      	b.n	8001414 <main+0x34>
 800142e:	bf00      	nop
 8001430:	20000214 	.word	0x20000214
 8001434:	200001cc 	.word	0x200001cc
 8001438:	200000b8 	.word	0x200000b8
 800143c:	20000140 	.word	0x20000140

08001440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b090      	sub	sp, #64	; 0x40
 8001444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	2228      	movs	r2, #40	; 0x28
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fd06 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001466:	2301      	movs	r3, #1
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146a:	2310      	movs	r3, #16
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146e:	2302      	movs	r3, #2
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001476:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800147a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147c:	f107 0318 	add.w	r3, r7, #24
 8001480:	4618      	mov	r0, r3
 8001482:	f000 ff7f 	bl	8002384 <HAL_RCC_OscConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800148c:	f000 f9c2 	bl	8001814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001490:	230f      	movs	r3, #15
 8001492:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001494:	2302      	movs	r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	2102      	movs	r1, #2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 f9ea 	bl	8002884 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014b6:	f000 f9ad 	bl	8001814 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3740      	adds	r7, #64	; 0x40
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e0:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM2_Init+0x98>)
 80014e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM2_Init+0x98>)
 80014ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80014ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM2_Init+0x98>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM2_Init+0x98>)
 80014f8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80014fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_TIM2_Init+0x98>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001504:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_TIM2_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150a:	4814      	ldr	r0, [pc, #80]	; (800155c <MX_TIM2_Init+0x98>)
 800150c:	f001 fb48 	bl	8002ba0 <HAL_TIM_Base_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001516:	f000 f97d 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001520:	f107 0308 	add.w	r3, r7, #8
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM2_Init+0x98>)
 8001528:	f001 fea0 	bl	800326c <HAL_TIM_ConfigClockSource>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001532:	f000 f96f 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM2_Init+0x98>)
 8001544:	f002 fa22 	bl	800398c <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800154e:	f000 f961 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000214 	.word	0x20000214

08001560 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08e      	sub	sp, #56	; 0x38
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
 800158c:	615a      	str	r2, [r3, #20]
 800158e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001592:	4a2e      	ldr	r2, [pc, #184]	; (800164c <MX_TIM3_Init+0xec>)
 8001594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001598:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800159c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 624;
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015a6:	f44f 721c 	mov.w	r2, #624	; 0x270
 80015aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b8:	4823      	ldr	r0, [pc, #140]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015ba:	f001 faf1 	bl	8002ba0 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015c4:	f000 f926 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015d6:	f001 fe49 	bl	800326c <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015e0:	f000 f918 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e4:	4818      	ldr	r0, [pc, #96]	; (8001648 <MX_TIM3_Init+0xe8>)
 80015e6:	f001 fb7d 	bl	8002ce4 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015f0:	f000 f910 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fc:	f107 0320 	add.w	r3, r7, #32
 8001600:	4619      	mov	r1, r3
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <MX_TIM3_Init+0xe8>)
 8001604:	f002 f9c2 	bl	800398c <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800160e:	f000 f901 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001612:	2360      	movs	r3, #96	; 0x60
 8001614:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM3_Init+0xe8>)
 800162a:	f001 fd5d 	bl	80030e8 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001634:	f000 f8ee 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM3_Init+0xe8>)
 800163a:	f000 fa51 	bl	8001ae0 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001cc 	.word	0x200001cc
 800164c:	40000400 	.word	0x40000400

08001650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART2_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART2_UART_Init+0x4c>)
 8001688:	f002 f9f0 	bl	8003a6c <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f8bf 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000025c 	.word	0x2000025c
 80016a0:	40004400 	.word	0x40004400

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0310 	add.w	r3, r7, #16
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6193      	str	r3, [r2, #24]
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0310 	and.w	r3, r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d0:	4b45      	ldr	r3, [pc, #276]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a44      	ldr	r2, [pc, #272]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016d6:	f043 0320 	orr.w	r3, r3, #32
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <MX_GPIO_Init+0x144>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <MX_GPIO_Init+0x144>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <MX_GPIO_Init+0x144>)
 8001706:	f043 0308 	orr.w	r3, r3, #8
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <MX_GPIO_Init+0x144>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800171e:	4833      	ldr	r0, [pc, #204]	; (80017ec <MX_GPIO_Init+0x148>)
 8001720:	f000 fdf5 	bl	800230e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800172a:	4831      	ldr	r0, [pc, #196]	; (80017f0 <MX_GPIO_Init+0x14c>)
 800172c:	f000 fdef 	bl	800230e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <MX_GPIO_Init+0x150>)
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	482c      	ldr	r0, [pc, #176]	; (80017f8 <MX_GPIO_Init+0x154>)
 8001746:	f000 fc47 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 800174a:	2301      	movs	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	4823      	ldr	r0, [pc, #140]	; (80017ec <MX_GPIO_Init+0x148>)
 800175e:	f000 fc3b 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 8001762:	2312      	movs	r3, #18
 8001764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	4619      	mov	r1, r3
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <MX_GPIO_Init+0x148>)
 8001776:	f000 fc2f 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 800177a:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800177e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2302      	movs	r3, #2
 800178a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	4619      	mov	r1, r3
 8001792:	4816      	ldr	r0, [pc, #88]	; (80017ec <MX_GPIO_Init+0x148>)
 8001794:	f000 fc20 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 8001798:	2301      	movs	r3, #1
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_GPIO_Init+0x14c>)
 80017ac:	f000 fc14 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80017b0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2302      	movs	r3, #2
 80017c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	4809      	ldr	r0, [pc, #36]	; (80017f0 <MX_GPIO_Init+0x14c>)
 80017ca:	f000 fc05 	bl	8001fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2028      	movs	r0, #40	; 0x28
 80017d4:	f000 fbc9 	bl	8001f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017d8:	2028      	movs	r0, #40	; 0x28
 80017da:	f000 fbe2 	bl	8001fa2 <HAL_NVIC_EnableIRQ>

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	10110000 	.word	0x10110000
 80017f8:	40011000 	.word	0x40011000

080017fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	 timerRun();
 8001804:	f000 f884 	bl	8001910 <timerRun>
	 getKeyInput();
 8001808:	f7ff f80e 	bl	8000828 <getKeyInput>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	e7fe      	b.n	800181c <Error_Handler+0x8>
	...

08001820 <setTimer1>:
int timer6_counter = 0;
int timer6_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <setTimer1+0x20>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <setTimer1+0x24>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2000012c 	.word	0x2000012c
 8001844:	20000130 	.word	0x20000130

08001848 <setTimer2>:

void setTimer2(int duration) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001850:	4a05      	ldr	r2, [pc, #20]	; (8001868 <setTimer2+0x20>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <setTimer2+0x24>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000134 	.word	0x20000134
 800186c:	20000138 	.word	0x20000138

08001870 <setTimer3>:

void setTimer3(int duration) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001878:	4a05      	ldr	r2, [pc, #20]	; (8001890 <setTimer3+0x20>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <setTimer3+0x24>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	2000013c 	.word	0x2000013c
 8001894:	20000140 	.word	0x20000140

08001898 <setTimer4>:

void setTimer4(int duration) {
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <setTimer4+0x20>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <setTimer4+0x24>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000144 	.word	0x20000144
 80018bc:	20000148 	.word	0x20000148

080018c0 <setTimer5>:

void setTimer5(int duration) {
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80018c8:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <setTimer5+0x20>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <setTimer5+0x24>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000014c 	.word	0x2000014c
 80018e4:	20000150 	.word	0x20000150

080018e8 <setTimer6>:
void setTimer6(int duration) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	timer6_counter = duration;
 80018f0:	4a05      	ldr	r2, [pc, #20]	; (8001908 <setTimer6+0x20>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <setTimer6+0x24>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000154 	.word	0x20000154
 800190c:	20000158 	.word	0x20000158

08001910 <timerRun>:
void timerRun() {
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <timerRun+0xcc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	dd0b      	ble.n	8001934 <timerRun+0x24>
		timer1_counter--;
 800191c:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <timerRun+0xcc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3b01      	subs	r3, #1
 8001922:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <timerRun+0xcc>)
 8001924:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <timerRun+0xcc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	dc02      	bgt.n	8001934 <timerRun+0x24>
			timer1_flag = 1;
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <timerRun+0xd0>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <timerRun+0xd4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	dd0b      	ble.n	8001954 <timerRun+0x44>
		timer2_counter--;
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <timerRun+0xd4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	4a28      	ldr	r2, [pc, #160]	; (80019e4 <timerRun+0xd4>)
 8001944:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8001946:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <timerRun+0xd4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	dc02      	bgt.n	8001954 <timerRun+0x44>
			timer2_flag = 1;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <timerRun+0xd8>)
 8001950:	2201      	movs	r2, #1
 8001952:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001954:	4b25      	ldr	r3, [pc, #148]	; (80019ec <timerRun+0xdc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	dd0b      	ble.n	8001974 <timerRun+0x64>
		timer3_counter--;
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <timerRun+0xdc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	3b01      	subs	r3, #1
 8001962:	4a22      	ldr	r2, [pc, #136]	; (80019ec <timerRun+0xdc>)
 8001964:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <timerRun+0xdc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	dc02      	bgt.n	8001974 <timerRun+0x64>
			timer3_flag = 1;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <timerRun+0xe0>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0) {
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <timerRun+0xe4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	dd0b      	ble.n	8001994 <timerRun+0x84>
		timer4_counter--;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <timerRun+0xe4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	3b01      	subs	r3, #1
 8001982:	4a1c      	ldr	r2, [pc, #112]	; (80019f4 <timerRun+0xe4>)
 8001984:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0) {
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <timerRun+0xe4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	dc02      	bgt.n	8001994 <timerRun+0x84>
			timer4_flag = 1;
 800198e:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <timerRun+0xe8>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0) {
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <timerRun+0xec>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	dd0b      	ble.n	80019b4 <timerRun+0xa4>
		timer5_counter--;
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <timerRun+0xec>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <timerRun+0xec>)
 80019a4:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0) {
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <timerRun+0xec>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	dc02      	bgt.n	80019b4 <timerRun+0xa4>
			timer5_flag = 1;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <timerRun+0xf0>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0) {
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <timerRun+0xf4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	dd0b      	ble.n	80019d4 <timerRun+0xc4>
			timer6_counter--;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <timerRun+0xf4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <timerRun+0xf4>)
 80019c4:	6013      	str	r3, [r2, #0]
			if(timer6_counter <= 0) {
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <timerRun+0xf4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dc02      	bgt.n	80019d4 <timerRun+0xc4>
				timer6_flag = 1;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <timerRun+0xf8>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
			}
	}
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	2000012c 	.word	0x2000012c
 80019e0:	20000130 	.word	0x20000130
 80019e4:	20000134 	.word	0x20000134
 80019e8:	20000138 	.word	0x20000138
 80019ec:	2000013c 	.word	0x2000013c
 80019f0:	20000140 	.word	0x20000140
 80019f4:	20000144 	.word	0x20000144
 80019f8:	20000148 	.word	0x20000148
 80019fc:	2000014c 	.word	0x2000014c
 8001a00:	20000150 	.word	0x20000150
 8001a04:	20000154 	.word	0x20000154
 8001a08:	20000158 	.word	0x20000158

08001a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6193      	str	r3, [r2, #24]
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_MspInit+0x5c>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_MspInit+0x60>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_MspInit+0x60>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000

08001a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a80:	d114      	bne.n	8001aac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_TIM_Base_MspInit+0x68>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_TIM_Base_MspInit+0x68>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	61d3      	str	r3, [r2, #28]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_TIM_Base_MspInit+0x68>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	201c      	movs	r0, #28
 8001aa0:	f000 fa63 	bl	8001f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aa4:	201c      	movs	r0, #28
 8001aa6:	f000 fa7c 	bl	8001fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aaa:	e010      	b.n	8001ace <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_TIM_Base_MspInit+0x6c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10b      	bne.n	8001ace <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_TIM_Base_MspInit+0x68>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_TIM_Base_MspInit+0x68>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_TIM_Base_MspInit+0x68>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40000400 	.word	0x40000400

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_TIM_MspPostInit+0x58>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d117      	bne.n	8001b30 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_TIM_MspPostInit+0x5c>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_TIM_MspPostInit+0x5c>)
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_TIM_MspPostInit+0x5c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 8001b18:	2340      	movs	r3, #64	; 0x40
 8001b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_TIM_MspPostInit+0x60>)
 8001b2c:	f000 fa54 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40000400 	.word	0x40000400
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010800 	.word	0x40010800

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_UART_MspInit+0x70>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d123      	bne.n	8001bac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0x74>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4a13      	ldr	r2, [pc, #76]	; (8001bb8 <HAL_UART_MspInit+0x74>)
 8001b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6e:	61d3      	str	r3, [r2, #28]
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_UART_MspInit+0x74>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_UART_MspInit+0x74>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_UART_MspInit+0x74>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_UART_MspInit+0x74>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b94:	230c      	movs	r3, #12
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_UART_MspInit+0x78>)
 8001ba8:	f000 fa16 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40004400 	.word	0x40004400
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010800 	.word	0x40010800

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <BusFault_Handler+0x4>

08001bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <UsageFault_Handler+0x4>

08001bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c06:	f000 f8bd 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
	...

08001c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <TIM2_IRQHandler+0x10>)
 8001c16:	f001 f95f 	bl	8002ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000214 	.word	0x20000214

08001c24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c2c:	f000 fb88 	bl	8002340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f002 f8d2 	bl	8003e0c <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20005000 	.word	0x20005000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	20000160 	.word	0x20000160
 8001c9c:	200002b8 	.word	0x200002b8

08001ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cac:	f7ff fff8 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001cb2:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	; (8001ce8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cc8:	4c09      	ldr	r4, [pc, #36]	; (8001cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f002 f89f 	bl	8003e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cda:	f7ff fb81 	bl	80013e0 <main>
  bx lr
 8001cde:	4770      	bx	lr
  ldr r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001ce8:	0800488c 	.word	0x0800488c
  ldr r2, =_sbss
 8001cec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001cf0:	200002b8 	.word	0x200002b8

08001cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_2_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_Init+0x28>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_Init+0x28>)
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f923 	bl	8001f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f808 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fe7a 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f93b 	bl	8001fbe <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f903 	bl	8001f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000024 	.word	0x20000024
 8001d7c:	2000002c 	.word	0x2000002c
 8001d80:	20000028 	.word	0x20000028

08001d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_IncTick+0x1c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_IncTick+0x20>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <HAL_IncTick+0x20>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	2000002c 	.word	0x2000002c
 8001da4:	200002a4 	.word	0x200002a4

08001da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <HAL_GetTick+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	200002a4 	.word	0x200002a4

08001dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <__NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <__NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	db0b      	blt.n	8001e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	4906      	ldr	r1, [pc, #24]	; (8001e54 <__NVIC_EnableIRQ+0x34>)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	2001      	movs	r0, #1
 8001e42:	fa00 f202 	lsl.w	r2, r0, r2
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	e000e100 	.word	0xe000e100

08001e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	db0a      	blt.n	8001e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	b2da      	uxtb	r2, r3
 8001e70:	490c      	ldr	r1, [pc, #48]	; (8001ea4 <__NVIC_SetPriority+0x4c>)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	0112      	lsls	r2, r2, #4
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e80:	e00a      	b.n	8001e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <__NVIC_SetPriority+0x50>)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	3b04      	subs	r3, #4
 8001e90:	0112      	lsls	r2, r2, #4
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	440b      	add	r3, r1
 8001e96:	761a      	strb	r2, [r3, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f1c3 0307 	rsb	r3, r3, #7
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	bf28      	it	cs
 8001eca:	2304      	movcs	r3, #4
 8001ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d902      	bls.n	8001edc <NVIC_EncodePriority+0x30>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3b03      	subs	r3, #3
 8001eda:	e000      	b.n	8001ede <NVIC_EncodePriority+0x32>
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	fa01 f303 	lsl.w	r3, r1, r3
 8001efe:	43d9      	mvns	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	4313      	orrs	r3, r2
         );
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3724      	adds	r7, #36	; 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f20:	d301      	bcc.n	8001f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00f      	b.n	8001f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <SysTick_Config+0x40>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f2e:	210f      	movs	r1, #15
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f7ff ff90 	bl	8001e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <SysTick_Config+0x40>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f3e:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <SysTick_Config+0x40>)
 8001f40:	2207      	movs	r2, #7
 8001f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	e000e010 	.word	0xe000e010

08001f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff2d 	bl	8001dbc <__NVIC_SetPriorityGrouping>
}
 8001f62:	bf00      	nop
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f7c:	f7ff ff42 	bl	8001e04 <__NVIC_GetPriorityGrouping>
 8001f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	6978      	ldr	r0, [r7, #20]
 8001f88:	f7ff ff90 	bl	8001eac <NVIC_EncodePriority>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff5f 	bl	8001e58 <__NVIC_SetPriority>
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff35 	bl	8001e20 <__NVIC_EnableIRQ>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffa2 	bl	8001f10 <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b08b      	sub	sp, #44	; 0x2c
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fea:	e169      	b.n	80022c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fec:	2201      	movs	r2, #1
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	429a      	cmp	r2, r3
 8002006:	f040 8158 	bne.w	80022ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a9a      	ldr	r2, [pc, #616]	; (8002278 <HAL_GPIO_Init+0x2a0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d05e      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002014:	4a98      	ldr	r2, [pc, #608]	; (8002278 <HAL_GPIO_Init+0x2a0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d875      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 800201a:	4a98      	ldr	r2, [pc, #608]	; (800227c <HAL_GPIO_Init+0x2a4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d058      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002020:	4a96      	ldr	r2, [pc, #600]	; (800227c <HAL_GPIO_Init+0x2a4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d86f      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 8002026:	4a96      	ldr	r2, [pc, #600]	; (8002280 <HAL_GPIO_Init+0x2a8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d052      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 800202c:	4a94      	ldr	r2, [pc, #592]	; (8002280 <HAL_GPIO_Init+0x2a8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d869      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 8002032:	4a94      	ldr	r2, [pc, #592]	; (8002284 <HAL_GPIO_Init+0x2ac>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d04c      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002038:	4a92      	ldr	r2, [pc, #584]	; (8002284 <HAL_GPIO_Init+0x2ac>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d863      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 800203e:	4a92      	ldr	r2, [pc, #584]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d046      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
 8002044:	4a90      	ldr	r2, [pc, #576]	; (8002288 <HAL_GPIO_Init+0x2b0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d85d      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 800204a:	2b12      	cmp	r3, #18
 800204c:	d82a      	bhi.n	80020a4 <HAL_GPIO_Init+0xcc>
 800204e:	2b12      	cmp	r3, #18
 8002050:	d859      	bhi.n	8002106 <HAL_GPIO_Init+0x12e>
 8002052:	a201      	add	r2, pc, #4	; (adr r2, 8002058 <HAL_GPIO_Init+0x80>)
 8002054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002058:	080020d3 	.word	0x080020d3
 800205c:	080020ad 	.word	0x080020ad
 8002060:	080020bf 	.word	0x080020bf
 8002064:	08002101 	.word	0x08002101
 8002068:	08002107 	.word	0x08002107
 800206c:	08002107 	.word	0x08002107
 8002070:	08002107 	.word	0x08002107
 8002074:	08002107 	.word	0x08002107
 8002078:	08002107 	.word	0x08002107
 800207c:	08002107 	.word	0x08002107
 8002080:	08002107 	.word	0x08002107
 8002084:	08002107 	.word	0x08002107
 8002088:	08002107 	.word	0x08002107
 800208c:	08002107 	.word	0x08002107
 8002090:	08002107 	.word	0x08002107
 8002094:	08002107 	.word	0x08002107
 8002098:	08002107 	.word	0x08002107
 800209c:	080020b5 	.word	0x080020b5
 80020a0:	080020c9 	.word	0x080020c9
 80020a4:	4a79      	ldr	r2, [pc, #484]	; (800228c <HAL_GPIO_Init+0x2b4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020aa:	e02c      	b.n	8002106 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e029      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	3304      	adds	r3, #4
 80020ba:	623b      	str	r3, [r7, #32]
          break;
 80020bc:	e024      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	3308      	adds	r3, #8
 80020c4:	623b      	str	r3, [r7, #32]
          break;
 80020c6:	e01f      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	330c      	adds	r3, #12
 80020ce:	623b      	str	r3, [r7, #32]
          break;
 80020d0:	e01a      	b.n	8002108 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020da:	2304      	movs	r3, #4
 80020dc:	623b      	str	r3, [r7, #32]
          break;
 80020de:	e013      	b.n	8002108 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d105      	bne.n	80020f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e8:	2308      	movs	r3, #8
 80020ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	611a      	str	r2, [r3, #16]
          break;
 80020f2:	e009      	b.n	8002108 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f4:	2308      	movs	r3, #8
 80020f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	615a      	str	r2, [r3, #20]
          break;
 80020fe:	e003      	b.n	8002108 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002100:	2300      	movs	r3, #0
 8002102:	623b      	str	r3, [r7, #32]
          break;
 8002104:	e000      	b.n	8002108 <HAL_GPIO_Init+0x130>
          break;
 8002106:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2bff      	cmp	r3, #255	; 0xff
 800210c:	d801      	bhi.n	8002112 <HAL_GPIO_Init+0x13a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_Init+0x13e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2bff      	cmp	r3, #255	; 0xff
 800211c:	d802      	bhi.n	8002124 <HAL_GPIO_Init+0x14c>
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	e002      	b.n	800212a <HAL_GPIO_Init+0x152>
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3b08      	subs	r3, #8
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	210f      	movs	r1, #15
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	6a39      	ldr	r1, [r7, #32]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	431a      	orrs	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 80b1 	beq.w	80022ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002158:	4b4d      	ldr	r3, [pc, #308]	; (8002290 <HAL_GPIO_Init+0x2b8>)
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_GPIO_Init+0x2b8>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6193      	str	r3, [r2, #24]
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_GPIO_Init+0x2b8>)
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002170:	4a48      	ldr	r2, [pc, #288]	; (8002294 <HAL_GPIO_Init+0x2bc>)
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a40      	ldr	r2, [pc, #256]	; (8002298 <HAL_GPIO_Init+0x2c0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_GPIO_Init+0x1ec>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a3f      	ldr	r2, [pc, #252]	; (800229c <HAL_GPIO_Init+0x2c4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00d      	beq.n	80021c0 <HAL_GPIO_Init+0x1e8>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_GPIO_Init+0x2c8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d007      	beq.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a3d      	ldr	r2, [pc, #244]	; (80022a4 <HAL_GPIO_Init+0x2cc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_GPIO_Init+0x1e0>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e006      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021b8:	2304      	movs	r3, #4
 80021ba:	e004      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021bc:	2302      	movs	r3, #2
 80021be:	e002      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021c0:	2301      	movs	r3, #1
 80021c2:	e000      	b.n	80021c6 <HAL_GPIO_Init+0x1ee>
 80021c4:	2300      	movs	r3, #0
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	f002 0203 	and.w	r2, r2, #3
 80021cc:	0092      	lsls	r2, r2, #2
 80021ce:	4093      	lsls	r3, r2
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021d6:	492f      	ldr	r1, [pc, #188]	; (8002294 <HAL_GPIO_Init+0x2bc>)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	089b      	lsrs	r3, r3, #2
 80021dc:	3302      	adds	r3, #2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021f0:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	492c      	ldr	r1, [pc, #176]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	4928      	ldr	r1, [pc, #160]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002208:	4013      	ands	r3, r2
 800220a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002218:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4922      	ldr	r1, [pc, #136]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	60cb      	str	r3, [r1, #12]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	491e      	ldr	r1, [pc, #120]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4918      	ldr	r1, [pc, #96]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	43db      	mvns	r3, r3
 8002256:	4914      	ldr	r1, [pc, #80]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 8002258:	4013      	ands	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d021      	beq.n	80022ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	490e      	ldr	r1, [pc, #56]	; (80022a8 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e021      	b.n	80022ba <HAL_GPIO_Init+0x2e2>
 8002276:	bf00      	nop
 8002278:	10320000 	.word	0x10320000
 800227c:	10310000 	.word	0x10310000
 8002280:	10220000 	.word	0x10220000
 8002284:	10210000 	.word	0x10210000
 8002288:	10120000 	.word	0x10120000
 800228c:	10110000 	.word	0x10110000
 8002290:	40021000 	.word	0x40021000
 8002294:	40010000 	.word	0x40010000
 8002298:	40010800 	.word	0x40010800
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	40011000 	.word	0x40011000
 80022a4:	40011400 	.word	0x40011400
 80022a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_GPIO_Init+0x304>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	4909      	ldr	r1, [pc, #36]	; (80022dc <HAL_GPIO_Init+0x304>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3301      	adds	r3, #1
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f47f ae8e 	bne.w	8001fec <HAL_GPIO_Init+0x14>
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	372c      	adds	r7, #44	; 0x2c
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr
 80022dc:	40010400 	.word	0x40010400

080022e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e001      	b.n	8002302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	807b      	strh	r3, [r7, #2]
 800231a:	4613      	mov	r3, r2
 800231c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800231e:	787b      	ldrb	r3, [r7, #1]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002324:	887a      	ldrh	r2, [r7, #2]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800232a:	e003      	b.n	8002334 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	041a      	lsls	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	611a      	str	r2, [r3, #16]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
	...

08002340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002358:	88fb      	ldrh	r3, [r7, #6]
 800235a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f806 	bl	8002370 <HAL_GPIO_EXTI_Callback>
  }
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e26c      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 8087 	beq.w	80024b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 030c 	and.w	r3, r3, #12
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d00c      	beq.n	80023ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b0:	4b8f      	ldr	r3, [pc, #572]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d112      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5e>
 80023bc:	4b8c      	ldr	r3, [pc, #560]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d10b      	bne.n	80023e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d06c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x12c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d168      	bne.n	80024b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e246      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ea:	d106      	bne.n	80023fa <HAL_RCC_OscConfig+0x76>
 80023ec:	4b80      	ldr	r3, [pc, #512]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a7f      	ldr	r2, [pc, #508]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e02e      	b.n	8002458 <HAL_RCC_OscConfig+0xd4>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x98>
 8002402:	4b7b      	ldr	r3, [pc, #492]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a7a      	ldr	r2, [pc, #488]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b78      	ldr	r3, [pc, #480]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a77      	ldr	r2, [pc, #476]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xd4>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0xbc>
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a71      	ldr	r2, [pc, #452]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xd4>
 8002440:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6a      	ldr	r2, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b68      	ldr	r3, [pc, #416]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a67      	ldr	r2, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fca2 	bl	8001da8 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff fc9e 	bl	8001da8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1fa      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b5d      	ldr	r3, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xe4>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fc8e 	bl	8001da8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc8a 	bl	8001da8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1e6      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x10c>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d063      	beq.n	8002586 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024be:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d11c      	bne.n	8002510 <HAL_RCC_OscConfig+0x18c>
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x176>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1ba      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b3d      	ldr	r3, [pc, #244]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4939      	ldr	r1, [pc, #228]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	e03a      	b.n	8002586 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_RCC_OscConfig+0x270>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7ff fc43 	bl	8001da8 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff fc3f 	bl	8001da8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e19b      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4927      	ldr	r1, [pc, #156]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCC_OscConfig+0x270>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fc22 	bl	8001da8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7ff fc1e 	bl	8001da8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e17a      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	4b1d      	ldr	r3, [pc, #116]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d03a      	beq.n	8002608 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d019      	beq.n	80025ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <HAL_RCC_OscConfig+0x274>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7ff fc02 	bl	8001da8 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a8:	f7ff fbfe 	bl	8001da8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e15a      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f000 facc 	bl	8002b64 <RCC_Delay>
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_OscConfig+0x274>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d4:	f7ff fbe8 	bl	8001da8 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025da:	e00f      	b.n	80025fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025dc:	f7ff fbe4 	bl	8001da8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d908      	bls.n	80025fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e140      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	42420000 	.word	0x42420000
 80025f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	4b9e      	ldr	r3, [pc, #632]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e9      	bne.n	80025dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a6 	beq.w	8002762 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b97      	ldr	r3, [pc, #604]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10d      	bne.n	8002642 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b94      	ldr	r3, [pc, #592]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4a93      	ldr	r2, [pc, #588]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002630:	61d3      	str	r3, [r2, #28]
 8002632:	4b91      	ldr	r3, [pc, #580]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	4b8e      	ldr	r3, [pc, #568]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d118      	bne.n	8002680 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264e:	4b8b      	ldr	r3, [pc, #556]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a8a      	ldr	r2, [pc, #552]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265a:	f7ff fba5 	bl	8001da8 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002662:	f7ff fba1 	bl	8001da8 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b64      	cmp	r3, #100	; 0x64
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0fd      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002674:	4b81      	ldr	r3, [pc, #516]	; (800287c <HAL_RCC_OscConfig+0x4f8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x312>
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	e02d      	b.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x334>
 800269e:	4b76      	ldr	r3, [pc, #472]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a75      	ldr	r2, [pc, #468]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6213      	str	r3, [r2, #32]
 80026aa:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a72      	ldr	r2, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6213      	str	r3, [r2, #32]
 80026b6:	e01c      	b.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x356>
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a6c      	ldr	r2, [pc, #432]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6213      	str	r3, [r2, #32]
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	4a69      	ldr	r2, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	6213      	str	r3, [r2, #32]
 80026d8:	e00b      	b.n	80026f2 <HAL_RCC_OscConfig+0x36e>
 80026da:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a66      	ldr	r2, [pc, #408]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a63      	ldr	r2, [pc, #396]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d015      	beq.n	8002726 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fa:	f7ff fb55 	bl	8001da8 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7ff fb51 	bl	8001da8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e0ab      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002718:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ee      	beq.n	8002702 <HAL_RCC_OscConfig+0x37e>
 8002724:	e014      	b.n	8002750 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff fb3f 	bl	8001da8 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7ff fb3b 	bl	8001da8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e095      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002744:	4b4c      	ldr	r3, [pc, #304]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1ee      	bne.n	800272e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b48      	ldr	r3, [pc, #288]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4a47      	ldr	r2, [pc, #284]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8081 	beq.w	800286e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800276c:	4b42      	ldr	r3, [pc, #264]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d061      	beq.n	800283c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b02      	cmp	r3, #2
 800277e:	d146      	bne.n	800280e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <HAL_RCC_OscConfig+0x4fc>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7ff fb0f 	bl	8001da8 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7ff fb0b 	bl	8001da8 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e067      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a0:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b4:	d108      	bne.n	80027c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b6:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	492d      	ldr	r1, [pc, #180]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a19      	ldr	r1, [r3, #32]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	430b      	orrs	r3, r1
 80027da:	4927      	ldr	r1, [pc, #156]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x4fc>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fadf 	bl	8001da8 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ee:	f7ff fadb 	bl	8001da8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e037      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x46a>
 800280c:	e02f      	b.n	800286e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_RCC_OscConfig+0x4fc>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7ff fac8 	bl	8001da8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7ff fac4 	bl	8001da8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e020      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x498>
 800283a:	e018      	b.n	800286e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e013      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	429a      	cmp	r2, r3
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d001      	beq.n	800286e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	42420060 	.word	0x42420060

08002884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d0      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b67      	ldr	r3, [pc, #412]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4965      	ldr	r1, [pc, #404]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a52      	ldr	r2, [pc, #328]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d040      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e073      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4936      	ldr	r1, [pc, #216]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff fa18 	bl	8001da8 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7ff fa14 	bl	8001da8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	; 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e053      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d210      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4922      	ldr	r1, [pc, #136]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	; (8002a4c <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x1cc>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1d0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f976 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004824 	.word	0x08004824
 8002a50:	20000024 	.word	0x20000024
 8002a54:	20000028 	.word	0x20000028

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_GetSysClockFreq+0x94>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x30>
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x36>
 8002a86:	e027      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8a:	613b      	str	r3, [r7, #16]
      break;
 8002a8c:	e027      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	0c9b      	lsrs	r3, r3, #18
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0c5b      	lsrs	r3, r3, #17
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aba:	fb02 f203 	mul.w	r2, r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e004      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	613b      	str	r3, [r7, #16]
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ada:	613b      	str	r3, [r7, #16]
      break;
 8002adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ade:	693b      	ldr	r3, [r7, #16]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	007a1200 	.word	0x007a1200
 8002af4:	0800483c 	.word	0x0800483c
 8002af8:	0800484c 	.word	0x0800484c
 8002afc:	003d0900 	.word	0x003d0900

08002b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b02      	ldr	r3, [pc, #8]	; (8002b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000024 	.word	0x20000024

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b18:	f7ff fff2 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4903      	ldr	r1, [pc, #12]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08004834 	.word	0x08004834

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b40:	f7ff ffde 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0adb      	lsrs	r3, r3, #11
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	08004834 	.word	0x08004834

08002b64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <RCC_Delay+0x34>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <RCC_Delay+0x38>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0a5b      	lsrs	r3, r3, #9
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b80:	bf00      	nop
  }
  while (Delay --);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	60fa      	str	r2, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f9      	bne.n	8002b80 <RCC_Delay+0x1c>
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000024 	.word	0x20000024
 8002b9c:	10624dd3 	.word	0x10624dd3

08002ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e041      	b.n	8002c36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe ff52 	bl	8001a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 fc30 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e03a      	b.n	8002cce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_TIM_Base_Start_IT+0x98>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x58>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d009      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x58>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a14      	ldr	r2, [pc, #80]	; (8002cdc <HAL_TIM_Base_Start_IT+0x9c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x58>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a13      	ldr	r2, [pc, #76]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d111      	bne.n	8002cbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b06      	cmp	r3, #6
 8002ca8:	d010      	beq.n	8002ccc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cba:	e007      	b.n	8002ccc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e041      	b.n	8002d7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f839 	bl	8002d82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fb8e 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_TIM_PWM_Start+0x24>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e022      	b.n	8002dfe <HAL_TIM_PWM_Start+0x6a>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d109      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0x3e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e015      	b.n	8002dfe <HAL_TIM_PWM_Start+0x6a>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d109      	bne.n	8002dec <HAL_TIM_PWM_Start+0x58>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e008      	b.n	8002dfe <HAL_TIM_PWM_Start+0x6a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e05e      	b.n	8002ec4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_PWM_Start+0x82>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e14:	e013      	b.n	8002e3e <HAL_TIM_PWM_Start+0xaa>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x92>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e24:	e00b      	b.n	8002e3e <HAL_TIM_PWM_Start+0xaa>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0xa2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e34:	e003      	b.n	8002e3e <HAL_TIM_PWM_Start+0xaa>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fd7c 	bl	8003944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <HAL_TIM_PWM_Start+0x138>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <HAL_TIM_PWM_Start+0x138>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xfa>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e78:	d009      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xfa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_TIM_PWM_Start+0x13c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xfa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_TIM_PWM_Start+0x140>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d010      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800

08002ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d122      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11b      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f06f 0202 	mvn.w	r2, #2
 8002f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa76 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8002f20:	e005      	b.n	8002f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa69 	bl	80033fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fa78 	bl	800341e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d122      	bne.n	8002f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11b      	bne.n	8002f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0204 	mvn.w	r2, #4
 8002f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa4c 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa3f 	bl	80033fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 fa4e 	bl	800341e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d122      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d11b      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0208 	mvn.w	r2, #8
 8002fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fa22 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e005      	b.n	8002fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa15 	bl	80033fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa24 	bl	800341e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d122      	bne.n	8003030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b10      	cmp	r3, #16
 8002ff6:	d11b      	bne.n	8003030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0210 	mvn.w	r2, #16
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2208      	movs	r2, #8
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9f8 	bl	800340c <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9eb 	bl	80033fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9fa 	bl	800341e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0201 	mvn.w	r2, #1
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe fbd0 	bl	80017fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d10e      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d107      	bne.n	8003088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fce9 	bl	8003a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d10e      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b40      	cmp	r3, #64	; 0x40
 80030a2:	d107      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f9be 	bl	8003430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f003 0320 	and.w	r3, r3, #32
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d107      	bne.n	80030e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0220 	mvn.w	r2, #32
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fcb4 	bl	8003a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e0:	bf00      	nop
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003102:	2302      	movs	r3, #2
 8003104:	e0ae      	b.n	8003264 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	f200 809f 	bhi.w	8003254 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003116:	a201      	add	r2, pc, #4	; (adr r2, 800311c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	08003151 	.word	0x08003151
 8003120:	08003255 	.word	0x08003255
 8003124:	08003255 	.word	0x08003255
 8003128:	08003255 	.word	0x08003255
 800312c:	08003191 	.word	0x08003191
 8003130:	08003255 	.word	0x08003255
 8003134:	08003255 	.word	0x08003255
 8003138:	08003255 	.word	0x08003255
 800313c:	080031d3 	.word	0x080031d3
 8003140:	08003255 	.word	0x08003255
 8003144:	08003255 	.word	0x08003255
 8003148:	08003255 	.word	0x08003255
 800314c:	08003213 	.word	0x08003213
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f9d6 	bl	8003508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
      break;
 800318e:	e064      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fa1c 	bl	80035d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	619a      	str	r2, [r3, #24]
      break;
 80031d0:	e043      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fa65 	bl	80036a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69da      	ldr	r2, [r3, #28]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0208 	orr.w	r2, r2, #8
 80031ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0204 	bic.w	r2, r2, #4
 80031fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69d9      	ldr	r1, [r3, #28]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	61da      	str	r2, [r3, #28]
      break;
 8003210:	e023      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 faaf 	bl	800377c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	021a      	lsls	r2, r3, #8
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	61da      	str	r2, [r3, #28]
      break;
 8003252:	e002      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
      break;
 8003258:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_TIM_ConfigClockSource+0x1c>
 8003284:	2302      	movs	r3, #2
 8003286:	e0b4      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x186>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d03e      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0xd4>
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	f200 8087 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	f000 8086 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x172>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	d87f      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d01a      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0xa6>
 80032dc:	2b70      	cmp	r3, #112	; 0x70
 80032de:	d87b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d050      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x11a>
 80032e4:	2b60      	cmp	r3, #96	; 0x60
 80032e6:	d877      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d03c      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0xfa>
 80032ec:	2b50      	cmp	r3, #80	; 0x50
 80032ee:	d873      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d058      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x13a>
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d86f      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d064      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d86b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d060      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d867      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05c      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 800330c:	2b10      	cmp	r3, #16
 800330e:	d05a      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	e062      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f000 faf0 	bl	8003906 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
      break;
 800333e:	e04f      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f000 fad9 	bl	8003906 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003362:	609a      	str	r2, [r3, #8]
      break;
 8003364:	e03c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 fa50 	bl	8003818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2150      	movs	r1, #80	; 0x50
 800337e:	4618      	mov	r0, r3
 8003380:	f000 faa7 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 8003384:	e02c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fa6e 	bl	8003874 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2160      	movs	r1, #96	; 0x60
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa97 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 80033a4:	e01c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fa30 	bl	8003818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2140      	movs	r1, #64	; 0x40
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa87 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 80033c4:	e00c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f000 fa7e 	bl	80038d2 <TIM_ITRx_SetConfig>
      break;
 80033d6:	e003      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e000      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr
	...

08003444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a29      	ldr	r2, [pc, #164]	; (80034fc <TIM_Base_SetConfig+0xb8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00b      	beq.n	8003474 <TIM_Base_SetConfig+0x30>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003462:	d007      	beq.n	8003474 <TIM_Base_SetConfig+0x30>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a26      	ldr	r2, [pc, #152]	; (8003500 <TIM_Base_SetConfig+0xbc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_Base_SetConfig+0x30>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a25      	ldr	r2, [pc, #148]	; (8003504 <TIM_Base_SetConfig+0xc0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d108      	bne.n	8003486 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <TIM_Base_SetConfig+0xb8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d00b      	beq.n	80034a6 <TIM_Base_SetConfig+0x62>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003494:	d007      	beq.n	80034a6 <TIM_Base_SetConfig+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a19      	ldr	r2, [pc, #100]	; (8003500 <TIM_Base_SetConfig+0xbc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_Base_SetConfig+0x62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <TIM_Base_SetConfig+0xc0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d108      	bne.n	80034b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <TIM_Base_SetConfig+0xb8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d103      	bne.n	80034ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	615a      	str	r2, [r3, #20]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800

08003508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f023 0201 	bic.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0302 	bic.w	r3, r3, #2
 8003550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <TIM_OC1_SetConfig+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10c      	bne.n	800357e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0308 	bic.w	r3, r3, #8
 800356a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <TIM_OC1_SetConfig+0xc8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d111      	bne.n	80035aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	621a      	str	r2, [r3, #32]
}
 80035c4:	bf00      	nop
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40012c00 	.word	0x40012c00

080035d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f023 0210 	bic.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0320 	bic.w	r3, r3, #32
 800361e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <TIM_OC2_SetConfig+0xd0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d10d      	bne.n	8003650 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800363a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <TIM_OC2_SetConfig+0xd0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d113      	bne.n	8003680 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800365e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00

080036a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <TIM_OC3_SetConfig+0xd0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10d      	bne.n	8003722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <TIM_OC3_SetConfig+0xd0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d113      	bne.n	8003752 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40012c00 	.word	0x40012c00

0800377c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	031b      	lsls	r3, r3, #12
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <TIM_OC4_SetConfig+0x98>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d109      	bne.n	80037f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	019b      	lsls	r3, r3, #6
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00

08003818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 030a 	bic.w	r3, r3, #10
 8003854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	f023 0210 	bic.w	r2, r3, #16
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800389e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	031b      	lsls	r3, r3, #12
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr

080038d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b085      	sub	sp, #20
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f043 0307 	orr.w	r3, r3, #7
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003906:	b480      	push	{r7}
 8003908:	b087      	sub	sp, #28
 800390a:	af00      	add	r7, sp, #0
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003920:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	021a      	lsls	r2, r3, #8
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	431a      	orrs	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4313      	orrs	r3, r2
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	bf00      	nop
 800393c:	371c      	adds	r7, #28
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2201      	movs	r2, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	43db      	mvns	r3, r3
 8003966:	401a      	ands	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a1a      	ldr	r2, [r3, #32]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	431a      	orrs	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr

0800398c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e046      	b.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00e      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d009      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d004      	beq.n	8003a06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10c      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40000400 	.word	0x40000400
 8003a44:	40000800 	.word	0x40000800

08003a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr

08003a5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e042      	b.n	8003b04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe f856 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f91d 	bl	8003cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68da      	ldr	r2, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d16d      	bne.n	8003c08 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_Transmit+0x2c>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e066      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2221      	movs	r2, #33	; 0x21
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe f92d 	bl	8001da8 <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d108      	bne.n	8003b78 <HAL_UART_Transmit+0x6c>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d104      	bne.n	8003b78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e003      	b.n	8003b80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b80:	e02a      	b.n	8003bd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f840 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e036      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10b      	bne.n	8003bba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e007      	b.n	8003bca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1cf      	bne.n	8003b82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	2140      	movs	r1, #64	; 0x40
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f810 	bl	8003c12 <UART_WaitOnFlagUntilTimeout>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e006      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e000      	b.n	8003c0a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c08:	2302      	movs	r3, #2
  }
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b090      	sub	sp, #64	; 0x40
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c22:	e050      	b.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d04c      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c32:	f7fe f8b9 	bl	8001da8 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d241      	bcs.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	330c      	adds	r3, #12
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c62:	637a      	str	r2, [r7, #52]	; 0x34
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e5      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3314      	adds	r3, #20
 8003c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	613b      	str	r3, [r7, #16]
   return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c96:	623a      	str	r2, [r7, #32]
 8003c98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e5      	bne.n	8003c76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e00f      	b.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d09f      	beq.n	8003c24 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3740      	adds	r7, #64	; 0x40
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d2a:	f023 030c 	bic.w	r3, r3, #12
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <UART_SetConfig+0x114>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d103      	bne.n	8003d60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d58:	f7fe fef0 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	e002      	b.n	8003d66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d60:	f7fe fed8 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8003d64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009a      	lsls	r2, r3, #2
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <UART_SetConfig+0x118>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	0119      	lsls	r1, r3, #4
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009a      	lsls	r2, r3, #2
 8003d90:	441a      	add	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <UART_SetConfig+0x118>)
 8003d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2064      	movs	r0, #100	; 0x64
 8003da6:	fb00 f303 	mul.w	r3, r0, r3
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	3332      	adds	r3, #50	; 0x32
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <UART_SetConfig+0x118>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbc:	4419      	add	r1, r3
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009a      	lsls	r2, r3, #2
 8003dc8:	441a      	add	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <UART_SetConfig+0x118>)
 8003dd6:	fba3 0302 	umull	r0, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2064      	movs	r0, #100	; 0x64
 8003dde:	fb00 f303 	mul.w	r3, r0, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	3332      	adds	r3, #50	; 0x32
 8003de8:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <UART_SetConfig+0x118>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	f003 020f 	and.w	r2, r3, #15
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	440a      	add	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40013800 	.word	0x40013800
 8003e08:	51eb851f 	.word	0x51eb851f

08003e0c <__errno>:
 8003e0c:	4b01      	ldr	r3, [pc, #4]	; (8003e14 <__errno+0x8>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000030 	.word	0x20000030

08003e18 <__libc_init_array>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	4d0c      	ldr	r5, [pc, #48]	; (8003e50 <__libc_init_array+0x38>)
 8003e1e:	4c0d      	ldr	r4, [pc, #52]	; (8003e54 <__libc_init_array+0x3c>)
 8003e20:	1b64      	subs	r4, r4, r5
 8003e22:	10a4      	asrs	r4, r4, #2
 8003e24:	42a6      	cmp	r6, r4
 8003e26:	d109      	bne.n	8003e3c <__libc_init_array+0x24>
 8003e28:	f000 fc5c 	bl	80046e4 <_init>
 8003e2c:	2600      	movs	r6, #0
 8003e2e:	4d0a      	ldr	r5, [pc, #40]	; (8003e58 <__libc_init_array+0x40>)
 8003e30:	4c0a      	ldr	r4, [pc, #40]	; (8003e5c <__libc_init_array+0x44>)
 8003e32:	1b64      	subs	r4, r4, r5
 8003e34:	10a4      	asrs	r4, r4, #2
 8003e36:	42a6      	cmp	r6, r4
 8003e38:	d105      	bne.n	8003e46 <__libc_init_array+0x2e>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e40:	4798      	blx	r3
 8003e42:	3601      	adds	r6, #1
 8003e44:	e7ee      	b.n	8003e24 <__libc_init_array+0xc>
 8003e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4a:	4798      	blx	r3
 8003e4c:	3601      	adds	r6, #1
 8003e4e:	e7f2      	b.n	8003e36 <__libc_init_array+0x1e>
 8003e50:	08004884 	.word	0x08004884
 8003e54:	08004884 	.word	0x08004884
 8003e58:	08004884 	.word	0x08004884
 8003e5c:	08004888 	.word	0x08004888

08003e60 <memset>:
 8003e60:	4603      	mov	r3, r0
 8003e62:	4402      	add	r2, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <siprintf>:
 8003e70:	b40e      	push	{r1, r2, r3}
 8003e72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e76:	b500      	push	{lr}
 8003e78:	b09c      	sub	sp, #112	; 0x70
 8003e7a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e7c:	9002      	str	r0, [sp, #8]
 8003e7e:	9006      	str	r0, [sp, #24]
 8003e80:	9107      	str	r1, [sp, #28]
 8003e82:	9104      	str	r1, [sp, #16]
 8003e84:	4808      	ldr	r0, [pc, #32]	; (8003ea8 <siprintf+0x38>)
 8003e86:	4909      	ldr	r1, [pc, #36]	; (8003eac <siprintf+0x3c>)
 8003e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e8c:	9105      	str	r1, [sp, #20]
 8003e8e:	6800      	ldr	r0, [r0, #0]
 8003e90:	a902      	add	r1, sp, #8
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	f000 f868 	bl	8003f68 <_svfiprintf_r>
 8003e98:	2200      	movs	r2, #0
 8003e9a:	9b02      	ldr	r3, [sp, #8]
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	b01c      	add	sp, #112	; 0x70
 8003ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ea4:	b003      	add	sp, #12
 8003ea6:	4770      	bx	lr
 8003ea8:	20000030 	.word	0x20000030
 8003eac:	ffff0208 	.word	0xffff0208

08003eb0 <__ssputs_r>:
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	688e      	ldr	r6, [r1, #8]
 8003eb6:	4682      	mov	sl, r0
 8003eb8:	429e      	cmp	r6, r3
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4690      	mov	r8, r2
 8003ebe:	461f      	mov	r7, r3
 8003ec0:	d838      	bhi.n	8003f34 <__ssputs_r+0x84>
 8003ec2:	898a      	ldrh	r2, [r1, #12]
 8003ec4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ec8:	d032      	beq.n	8003f30 <__ssputs_r+0x80>
 8003eca:	6825      	ldr	r5, [r4, #0]
 8003ecc:	6909      	ldr	r1, [r1, #16]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	eba5 0901 	sub.w	r9, r5, r1
 8003ed4:	6965      	ldr	r5, [r4, #20]
 8003ed6:	444b      	add	r3, r9
 8003ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003edc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ee0:	106d      	asrs	r5, r5, #1
 8003ee2:	429d      	cmp	r5, r3
 8003ee4:	bf38      	it	cc
 8003ee6:	461d      	movcc	r5, r3
 8003ee8:	0553      	lsls	r3, r2, #21
 8003eea:	d531      	bpl.n	8003f50 <__ssputs_r+0xa0>
 8003eec:	4629      	mov	r1, r5
 8003eee:	f000 fb53 	bl	8004598 <_malloc_r>
 8003ef2:	4606      	mov	r6, r0
 8003ef4:	b950      	cbnz	r0, 8003f0c <__ssputs_r+0x5c>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f8ca 3000 	str.w	r3, [sl]
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	464a      	mov	r2, r9
 8003f0e:	6921      	ldr	r1, [r4, #16]
 8003f10:	f000 face 	bl	80044b0 <memcpy>
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	6126      	str	r6, [r4, #16]
 8003f22:	444e      	add	r6, r9
 8003f24:	6026      	str	r6, [r4, #0]
 8003f26:	463e      	mov	r6, r7
 8003f28:	6165      	str	r5, [r4, #20]
 8003f2a:	eba5 0509 	sub.w	r5, r5, r9
 8003f2e:	60a5      	str	r5, [r4, #8]
 8003f30:	42be      	cmp	r6, r7
 8003f32:	d900      	bls.n	8003f36 <__ssputs_r+0x86>
 8003f34:	463e      	mov	r6, r7
 8003f36:	4632      	mov	r2, r6
 8003f38:	4641      	mov	r1, r8
 8003f3a:	6820      	ldr	r0, [r4, #0]
 8003f3c:	f000 fac6 	bl	80044cc <memmove>
 8003f40:	68a3      	ldr	r3, [r4, #8]
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	1b9b      	subs	r3, r3, r6
 8003f46:	4432      	add	r2, r6
 8003f48:	2000      	movs	r0, #0
 8003f4a:	60a3      	str	r3, [r4, #8]
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	e7db      	b.n	8003f08 <__ssputs_r+0x58>
 8003f50:	462a      	mov	r2, r5
 8003f52:	f000 fb7b 	bl	800464c <_realloc_r>
 8003f56:	4606      	mov	r6, r0
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d1e1      	bne.n	8003f20 <__ssputs_r+0x70>
 8003f5c:	4650      	mov	r0, sl
 8003f5e:	6921      	ldr	r1, [r4, #16]
 8003f60:	f000 face 	bl	8004500 <_free_r>
 8003f64:	e7c7      	b.n	8003ef6 <__ssputs_r+0x46>
	...

08003f68 <_svfiprintf_r>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	4698      	mov	r8, r3
 8003f6e:	898b      	ldrh	r3, [r1, #12]
 8003f70:	4607      	mov	r7, r0
 8003f72:	061b      	lsls	r3, r3, #24
 8003f74:	460d      	mov	r5, r1
 8003f76:	4614      	mov	r4, r2
 8003f78:	b09d      	sub	sp, #116	; 0x74
 8003f7a:	d50e      	bpl.n	8003f9a <_svfiprintf_r+0x32>
 8003f7c:	690b      	ldr	r3, [r1, #16]
 8003f7e:	b963      	cbnz	r3, 8003f9a <_svfiprintf_r+0x32>
 8003f80:	2140      	movs	r1, #64	; 0x40
 8003f82:	f000 fb09 	bl	8004598 <_malloc_r>
 8003f86:	6028      	str	r0, [r5, #0]
 8003f88:	6128      	str	r0, [r5, #16]
 8003f8a:	b920      	cbnz	r0, 8003f96 <_svfiprintf_r+0x2e>
 8003f8c:	230c      	movs	r3, #12
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	f04f 30ff 	mov.w	r0, #4294967295
 8003f94:	e0d1      	b.n	800413a <_svfiprintf_r+0x1d2>
 8003f96:	2340      	movs	r3, #64	; 0x40
 8003f98:	616b      	str	r3, [r5, #20]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8003f9e:	2320      	movs	r3, #32
 8003fa0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fa4:	2330      	movs	r3, #48	; 0x30
 8003fa6:	f04f 0901 	mov.w	r9, #1
 8003faa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004154 <_svfiprintf_r+0x1ec>
 8003fb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	469a      	mov	sl, r3
 8003fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fbe:	b10a      	cbz	r2, 8003fc4 <_svfiprintf_r+0x5c>
 8003fc0:	2a25      	cmp	r2, #37	; 0x25
 8003fc2:	d1f9      	bne.n	8003fb8 <_svfiprintf_r+0x50>
 8003fc4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fc8:	d00b      	beq.n	8003fe2 <_svfiprintf_r+0x7a>
 8003fca:	465b      	mov	r3, fp
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4629      	mov	r1, r5
 8003fd0:	4638      	mov	r0, r7
 8003fd2:	f7ff ff6d 	bl	8003eb0 <__ssputs_r>
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	f000 80aa 	beq.w	8004130 <_svfiprintf_r+0x1c8>
 8003fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fde:	445a      	add	r2, fp
 8003fe0:	9209      	str	r2, [sp, #36]	; 0x24
 8003fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80a2 	beq.w	8004130 <_svfiprintf_r+0x1c8>
 8003fec:	2300      	movs	r3, #0
 8003fee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ff6:	f10a 0a01 	add.w	sl, sl, #1
 8003ffa:	9304      	str	r3, [sp, #16]
 8003ffc:	9307      	str	r3, [sp, #28]
 8003ffe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004002:	931a      	str	r3, [sp, #104]	; 0x68
 8004004:	4654      	mov	r4, sl
 8004006:	2205      	movs	r2, #5
 8004008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800400c:	4851      	ldr	r0, [pc, #324]	; (8004154 <_svfiprintf_r+0x1ec>)
 800400e:	f000 fa41 	bl	8004494 <memchr>
 8004012:	9a04      	ldr	r2, [sp, #16]
 8004014:	b9d8      	cbnz	r0, 800404e <_svfiprintf_r+0xe6>
 8004016:	06d0      	lsls	r0, r2, #27
 8004018:	bf44      	itt	mi
 800401a:	2320      	movmi	r3, #32
 800401c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004020:	0711      	lsls	r1, r2, #28
 8004022:	bf44      	itt	mi
 8004024:	232b      	movmi	r3, #43	; 0x2b
 8004026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800402a:	f89a 3000 	ldrb.w	r3, [sl]
 800402e:	2b2a      	cmp	r3, #42	; 0x2a
 8004030:	d015      	beq.n	800405e <_svfiprintf_r+0xf6>
 8004032:	4654      	mov	r4, sl
 8004034:	2000      	movs	r0, #0
 8004036:	f04f 0c0a 	mov.w	ip, #10
 800403a:	9a07      	ldr	r2, [sp, #28]
 800403c:	4621      	mov	r1, r4
 800403e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004042:	3b30      	subs	r3, #48	; 0x30
 8004044:	2b09      	cmp	r3, #9
 8004046:	d94e      	bls.n	80040e6 <_svfiprintf_r+0x17e>
 8004048:	b1b0      	cbz	r0, 8004078 <_svfiprintf_r+0x110>
 800404a:	9207      	str	r2, [sp, #28]
 800404c:	e014      	b.n	8004078 <_svfiprintf_r+0x110>
 800404e:	eba0 0308 	sub.w	r3, r0, r8
 8004052:	fa09 f303 	lsl.w	r3, r9, r3
 8004056:	4313      	orrs	r3, r2
 8004058:	46a2      	mov	sl, r4
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	e7d2      	b.n	8004004 <_svfiprintf_r+0x9c>
 800405e:	9b03      	ldr	r3, [sp, #12]
 8004060:	1d19      	adds	r1, r3, #4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	9103      	str	r1, [sp, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	bfbb      	ittet	lt
 800406a:	425b      	neglt	r3, r3
 800406c:	f042 0202 	orrlt.w	r2, r2, #2
 8004070:	9307      	strge	r3, [sp, #28]
 8004072:	9307      	strlt	r3, [sp, #28]
 8004074:	bfb8      	it	lt
 8004076:	9204      	strlt	r2, [sp, #16]
 8004078:	7823      	ldrb	r3, [r4, #0]
 800407a:	2b2e      	cmp	r3, #46	; 0x2e
 800407c:	d10c      	bne.n	8004098 <_svfiprintf_r+0x130>
 800407e:	7863      	ldrb	r3, [r4, #1]
 8004080:	2b2a      	cmp	r3, #42	; 0x2a
 8004082:	d135      	bne.n	80040f0 <_svfiprintf_r+0x188>
 8004084:	9b03      	ldr	r3, [sp, #12]
 8004086:	3402      	adds	r4, #2
 8004088:	1d1a      	adds	r2, r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	9203      	str	r2, [sp, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	bfb8      	it	lt
 8004092:	f04f 33ff 	movlt.w	r3, #4294967295
 8004096:	9305      	str	r3, [sp, #20]
 8004098:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004164 <_svfiprintf_r+0x1fc>
 800409c:	2203      	movs	r2, #3
 800409e:	4650      	mov	r0, sl
 80040a0:	7821      	ldrb	r1, [r4, #0]
 80040a2:	f000 f9f7 	bl	8004494 <memchr>
 80040a6:	b140      	cbz	r0, 80040ba <_svfiprintf_r+0x152>
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	eba0 000a 	sub.w	r0, r0, sl
 80040ae:	fa03 f000 	lsl.w	r0, r3, r0
 80040b2:	9b04      	ldr	r3, [sp, #16]
 80040b4:	3401      	adds	r4, #1
 80040b6:	4303      	orrs	r3, r0
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040be:	2206      	movs	r2, #6
 80040c0:	4825      	ldr	r0, [pc, #148]	; (8004158 <_svfiprintf_r+0x1f0>)
 80040c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040c6:	f000 f9e5 	bl	8004494 <memchr>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d038      	beq.n	8004140 <_svfiprintf_r+0x1d8>
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <_svfiprintf_r+0x1f4>)
 80040d0:	bb1b      	cbnz	r3, 800411a <_svfiprintf_r+0x1b2>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	3307      	adds	r3, #7
 80040d6:	f023 0307 	bic.w	r3, r3, #7
 80040da:	3308      	adds	r3, #8
 80040dc:	9303      	str	r3, [sp, #12]
 80040de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e0:	4433      	add	r3, r6
 80040e2:	9309      	str	r3, [sp, #36]	; 0x24
 80040e4:	e767      	b.n	8003fb6 <_svfiprintf_r+0x4e>
 80040e6:	460c      	mov	r4, r1
 80040e8:	2001      	movs	r0, #1
 80040ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80040ee:	e7a5      	b.n	800403c <_svfiprintf_r+0xd4>
 80040f0:	2300      	movs	r3, #0
 80040f2:	f04f 0c0a 	mov.w	ip, #10
 80040f6:	4619      	mov	r1, r3
 80040f8:	3401      	adds	r4, #1
 80040fa:	9305      	str	r3, [sp, #20]
 80040fc:	4620      	mov	r0, r4
 80040fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004102:	3a30      	subs	r2, #48	; 0x30
 8004104:	2a09      	cmp	r2, #9
 8004106:	d903      	bls.n	8004110 <_svfiprintf_r+0x1a8>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0c5      	beq.n	8004098 <_svfiprintf_r+0x130>
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	e7c3      	b.n	8004098 <_svfiprintf_r+0x130>
 8004110:	4604      	mov	r4, r0
 8004112:	2301      	movs	r3, #1
 8004114:	fb0c 2101 	mla	r1, ip, r1, r2
 8004118:	e7f0      	b.n	80040fc <_svfiprintf_r+0x194>
 800411a:	ab03      	add	r3, sp, #12
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	462a      	mov	r2, r5
 8004120:	4638      	mov	r0, r7
 8004122:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <_svfiprintf_r+0x1f8>)
 8004124:	a904      	add	r1, sp, #16
 8004126:	f3af 8000 	nop.w
 800412a:	1c42      	adds	r2, r0, #1
 800412c:	4606      	mov	r6, r0
 800412e:	d1d6      	bne.n	80040de <_svfiprintf_r+0x176>
 8004130:	89ab      	ldrh	r3, [r5, #12]
 8004132:	065b      	lsls	r3, r3, #25
 8004134:	f53f af2c 	bmi.w	8003f90 <_svfiprintf_r+0x28>
 8004138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800413a:	b01d      	add	sp, #116	; 0x74
 800413c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004140:	ab03      	add	r3, sp, #12
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	462a      	mov	r2, r5
 8004146:	4638      	mov	r0, r7
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <_svfiprintf_r+0x1f8>)
 800414a:	a904      	add	r1, sp, #16
 800414c:	f000 f87c 	bl	8004248 <_printf_i>
 8004150:	e7eb      	b.n	800412a <_svfiprintf_r+0x1c2>
 8004152:	bf00      	nop
 8004154:	0800484e 	.word	0x0800484e
 8004158:	08004858 	.word	0x08004858
 800415c:	00000000 	.word	0x00000000
 8004160:	08003eb1 	.word	0x08003eb1
 8004164:	08004854 	.word	0x08004854

08004168 <_printf_common>:
 8004168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800416c:	4616      	mov	r6, r2
 800416e:	4699      	mov	r9, r3
 8004170:	688a      	ldr	r2, [r1, #8]
 8004172:	690b      	ldr	r3, [r1, #16]
 8004174:	4607      	mov	r7, r0
 8004176:	4293      	cmp	r3, r2
 8004178:	bfb8      	it	lt
 800417a:	4613      	movlt	r3, r2
 800417c:	6033      	str	r3, [r6, #0]
 800417e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004182:	460c      	mov	r4, r1
 8004184:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004188:	b10a      	cbz	r2, 800418e <_printf_common+0x26>
 800418a:	3301      	adds	r3, #1
 800418c:	6033      	str	r3, [r6, #0]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	0699      	lsls	r1, r3, #26
 8004192:	bf42      	ittt	mi
 8004194:	6833      	ldrmi	r3, [r6, #0]
 8004196:	3302      	addmi	r3, #2
 8004198:	6033      	strmi	r3, [r6, #0]
 800419a:	6825      	ldr	r5, [r4, #0]
 800419c:	f015 0506 	ands.w	r5, r5, #6
 80041a0:	d106      	bne.n	80041b0 <_printf_common+0x48>
 80041a2:	f104 0a19 	add.w	sl, r4, #25
 80041a6:	68e3      	ldr	r3, [r4, #12]
 80041a8:	6832      	ldr	r2, [r6, #0]
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	42ab      	cmp	r3, r5
 80041ae:	dc28      	bgt.n	8004202 <_printf_common+0x9a>
 80041b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041b4:	1e13      	subs	r3, r2, #0
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	bf18      	it	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	0692      	lsls	r2, r2, #26
 80041be:	d42d      	bmi.n	800421c <_printf_common+0xb4>
 80041c0:	4649      	mov	r1, r9
 80041c2:	4638      	mov	r0, r7
 80041c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041c8:	47c0      	blx	r8
 80041ca:	3001      	adds	r0, #1
 80041cc:	d020      	beq.n	8004210 <_printf_common+0xa8>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	68e5      	ldr	r5, [r4, #12]
 80041d2:	f003 0306 	and.w	r3, r3, #6
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	bf18      	it	ne
 80041da:	2500      	movne	r5, #0
 80041dc:	6832      	ldr	r2, [r6, #0]
 80041de:	f04f 0600 	mov.w	r6, #0
 80041e2:	68a3      	ldr	r3, [r4, #8]
 80041e4:	bf08      	it	eq
 80041e6:	1aad      	subeq	r5, r5, r2
 80041e8:	6922      	ldr	r2, [r4, #16]
 80041ea:	bf08      	it	eq
 80041ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041f0:	4293      	cmp	r3, r2
 80041f2:	bfc4      	itt	gt
 80041f4:	1a9b      	subgt	r3, r3, r2
 80041f6:	18ed      	addgt	r5, r5, r3
 80041f8:	341a      	adds	r4, #26
 80041fa:	42b5      	cmp	r5, r6
 80041fc:	d11a      	bne.n	8004234 <_printf_common+0xcc>
 80041fe:	2000      	movs	r0, #0
 8004200:	e008      	b.n	8004214 <_printf_common+0xac>
 8004202:	2301      	movs	r3, #1
 8004204:	4652      	mov	r2, sl
 8004206:	4649      	mov	r1, r9
 8004208:	4638      	mov	r0, r7
 800420a:	47c0      	blx	r8
 800420c:	3001      	adds	r0, #1
 800420e:	d103      	bne.n	8004218 <_printf_common+0xb0>
 8004210:	f04f 30ff 	mov.w	r0, #4294967295
 8004214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004218:	3501      	adds	r5, #1
 800421a:	e7c4      	b.n	80041a6 <_printf_common+0x3e>
 800421c:	2030      	movs	r0, #48	; 0x30
 800421e:	18e1      	adds	r1, r4, r3
 8004220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800422a:	4422      	add	r2, r4
 800422c:	3302      	adds	r3, #2
 800422e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004232:	e7c5      	b.n	80041c0 <_printf_common+0x58>
 8004234:	2301      	movs	r3, #1
 8004236:	4622      	mov	r2, r4
 8004238:	4649      	mov	r1, r9
 800423a:	4638      	mov	r0, r7
 800423c:	47c0      	blx	r8
 800423e:	3001      	adds	r0, #1
 8004240:	d0e6      	beq.n	8004210 <_printf_common+0xa8>
 8004242:	3601      	adds	r6, #1
 8004244:	e7d9      	b.n	80041fa <_printf_common+0x92>
	...

08004248 <_printf_i>:
 8004248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	460c      	mov	r4, r1
 800424e:	7e27      	ldrb	r7, [r4, #24]
 8004250:	4691      	mov	r9, r2
 8004252:	2f78      	cmp	r7, #120	; 0x78
 8004254:	4680      	mov	r8, r0
 8004256:	469a      	mov	sl, r3
 8004258:	990c      	ldr	r1, [sp, #48]	; 0x30
 800425a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800425e:	d807      	bhi.n	8004270 <_printf_i+0x28>
 8004260:	2f62      	cmp	r7, #98	; 0x62
 8004262:	d80a      	bhi.n	800427a <_printf_i+0x32>
 8004264:	2f00      	cmp	r7, #0
 8004266:	f000 80d9 	beq.w	800441c <_printf_i+0x1d4>
 800426a:	2f58      	cmp	r7, #88	; 0x58
 800426c:	f000 80a4 	beq.w	80043b8 <_printf_i+0x170>
 8004270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004278:	e03a      	b.n	80042f0 <_printf_i+0xa8>
 800427a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800427e:	2b15      	cmp	r3, #21
 8004280:	d8f6      	bhi.n	8004270 <_printf_i+0x28>
 8004282:	a001      	add	r0, pc, #4	; (adr r0, 8004288 <_printf_i+0x40>)
 8004284:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004288:	080042e1 	.word	0x080042e1
 800428c:	080042f5 	.word	0x080042f5
 8004290:	08004271 	.word	0x08004271
 8004294:	08004271 	.word	0x08004271
 8004298:	08004271 	.word	0x08004271
 800429c:	08004271 	.word	0x08004271
 80042a0:	080042f5 	.word	0x080042f5
 80042a4:	08004271 	.word	0x08004271
 80042a8:	08004271 	.word	0x08004271
 80042ac:	08004271 	.word	0x08004271
 80042b0:	08004271 	.word	0x08004271
 80042b4:	08004403 	.word	0x08004403
 80042b8:	08004325 	.word	0x08004325
 80042bc:	080043e5 	.word	0x080043e5
 80042c0:	08004271 	.word	0x08004271
 80042c4:	08004271 	.word	0x08004271
 80042c8:	08004425 	.word	0x08004425
 80042cc:	08004271 	.word	0x08004271
 80042d0:	08004325 	.word	0x08004325
 80042d4:	08004271 	.word	0x08004271
 80042d8:	08004271 	.word	0x08004271
 80042dc:	080043ed 	.word	0x080043ed
 80042e0:	680b      	ldr	r3, [r1, #0]
 80042e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	600a      	str	r2, [r1, #0]
 80042ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0a4      	b.n	800443e <_printf_i+0x1f6>
 80042f4:	6825      	ldr	r5, [r4, #0]
 80042f6:	6808      	ldr	r0, [r1, #0]
 80042f8:	062e      	lsls	r6, r5, #24
 80042fa:	f100 0304 	add.w	r3, r0, #4
 80042fe:	d50a      	bpl.n	8004316 <_printf_i+0xce>
 8004300:	6805      	ldr	r5, [r0, #0]
 8004302:	600b      	str	r3, [r1, #0]
 8004304:	2d00      	cmp	r5, #0
 8004306:	da03      	bge.n	8004310 <_printf_i+0xc8>
 8004308:	232d      	movs	r3, #45	; 0x2d
 800430a:	426d      	negs	r5, r5
 800430c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004310:	230a      	movs	r3, #10
 8004312:	485e      	ldr	r0, [pc, #376]	; (800448c <_printf_i+0x244>)
 8004314:	e019      	b.n	800434a <_printf_i+0x102>
 8004316:	f015 0f40 	tst.w	r5, #64	; 0x40
 800431a:	6805      	ldr	r5, [r0, #0]
 800431c:	600b      	str	r3, [r1, #0]
 800431e:	bf18      	it	ne
 8004320:	b22d      	sxthne	r5, r5
 8004322:	e7ef      	b.n	8004304 <_printf_i+0xbc>
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	6825      	ldr	r5, [r4, #0]
 8004328:	1d18      	adds	r0, r3, #4
 800432a:	6008      	str	r0, [r1, #0]
 800432c:	0628      	lsls	r0, r5, #24
 800432e:	d501      	bpl.n	8004334 <_printf_i+0xec>
 8004330:	681d      	ldr	r5, [r3, #0]
 8004332:	e002      	b.n	800433a <_printf_i+0xf2>
 8004334:	0669      	lsls	r1, r5, #25
 8004336:	d5fb      	bpl.n	8004330 <_printf_i+0xe8>
 8004338:	881d      	ldrh	r5, [r3, #0]
 800433a:	2f6f      	cmp	r7, #111	; 0x6f
 800433c:	bf0c      	ite	eq
 800433e:	2308      	moveq	r3, #8
 8004340:	230a      	movne	r3, #10
 8004342:	4852      	ldr	r0, [pc, #328]	; (800448c <_printf_i+0x244>)
 8004344:	2100      	movs	r1, #0
 8004346:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800434a:	6866      	ldr	r6, [r4, #4]
 800434c:	2e00      	cmp	r6, #0
 800434e:	bfa8      	it	ge
 8004350:	6821      	ldrge	r1, [r4, #0]
 8004352:	60a6      	str	r6, [r4, #8]
 8004354:	bfa4      	itt	ge
 8004356:	f021 0104 	bicge.w	r1, r1, #4
 800435a:	6021      	strge	r1, [r4, #0]
 800435c:	b90d      	cbnz	r5, 8004362 <_printf_i+0x11a>
 800435e:	2e00      	cmp	r6, #0
 8004360:	d04d      	beq.n	80043fe <_printf_i+0x1b6>
 8004362:	4616      	mov	r6, r2
 8004364:	fbb5 f1f3 	udiv	r1, r5, r3
 8004368:	fb03 5711 	mls	r7, r3, r1, r5
 800436c:	5dc7      	ldrb	r7, [r0, r7]
 800436e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004372:	462f      	mov	r7, r5
 8004374:	42bb      	cmp	r3, r7
 8004376:	460d      	mov	r5, r1
 8004378:	d9f4      	bls.n	8004364 <_printf_i+0x11c>
 800437a:	2b08      	cmp	r3, #8
 800437c:	d10b      	bne.n	8004396 <_printf_i+0x14e>
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	07df      	lsls	r7, r3, #31
 8004382:	d508      	bpl.n	8004396 <_printf_i+0x14e>
 8004384:	6923      	ldr	r3, [r4, #16]
 8004386:	6861      	ldr	r1, [r4, #4]
 8004388:	4299      	cmp	r1, r3
 800438a:	bfde      	ittt	le
 800438c:	2330      	movle	r3, #48	; 0x30
 800438e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004392:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004396:	1b92      	subs	r2, r2, r6
 8004398:	6122      	str	r2, [r4, #16]
 800439a:	464b      	mov	r3, r9
 800439c:	4621      	mov	r1, r4
 800439e:	4640      	mov	r0, r8
 80043a0:	f8cd a000 	str.w	sl, [sp]
 80043a4:	aa03      	add	r2, sp, #12
 80043a6:	f7ff fedf 	bl	8004168 <_printf_common>
 80043aa:	3001      	adds	r0, #1
 80043ac:	d14c      	bne.n	8004448 <_printf_i+0x200>
 80043ae:	f04f 30ff 	mov.w	r0, #4294967295
 80043b2:	b004      	add	sp, #16
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	4834      	ldr	r0, [pc, #208]	; (800448c <_printf_i+0x244>)
 80043ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80043be:	680e      	ldr	r6, [r1, #0]
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80043c6:	061f      	lsls	r7, r3, #24
 80043c8:	600e      	str	r6, [r1, #0]
 80043ca:	d514      	bpl.n	80043f6 <_printf_i+0x1ae>
 80043cc:	07d9      	lsls	r1, r3, #31
 80043ce:	bf44      	itt	mi
 80043d0:	f043 0320 	orrmi.w	r3, r3, #32
 80043d4:	6023      	strmi	r3, [r4, #0]
 80043d6:	b91d      	cbnz	r5, 80043e0 <_printf_i+0x198>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	f023 0320 	bic.w	r3, r3, #32
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	2310      	movs	r3, #16
 80043e2:	e7af      	b.n	8004344 <_printf_i+0xfc>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	f043 0320 	orr.w	r3, r3, #32
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	2378      	movs	r3, #120	; 0x78
 80043ee:	4828      	ldr	r0, [pc, #160]	; (8004490 <_printf_i+0x248>)
 80043f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043f4:	e7e3      	b.n	80043be <_printf_i+0x176>
 80043f6:	065e      	lsls	r6, r3, #25
 80043f8:	bf48      	it	mi
 80043fa:	b2ad      	uxthmi	r5, r5
 80043fc:	e7e6      	b.n	80043cc <_printf_i+0x184>
 80043fe:	4616      	mov	r6, r2
 8004400:	e7bb      	b.n	800437a <_printf_i+0x132>
 8004402:	680b      	ldr	r3, [r1, #0]
 8004404:	6826      	ldr	r6, [r4, #0]
 8004406:	1d1d      	adds	r5, r3, #4
 8004408:	6960      	ldr	r0, [r4, #20]
 800440a:	600d      	str	r5, [r1, #0]
 800440c:	0635      	lsls	r5, r6, #24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	d501      	bpl.n	8004416 <_printf_i+0x1ce>
 8004412:	6018      	str	r0, [r3, #0]
 8004414:	e002      	b.n	800441c <_printf_i+0x1d4>
 8004416:	0671      	lsls	r1, r6, #25
 8004418:	d5fb      	bpl.n	8004412 <_printf_i+0x1ca>
 800441a:	8018      	strh	r0, [r3, #0]
 800441c:	2300      	movs	r3, #0
 800441e:	4616      	mov	r6, r2
 8004420:	6123      	str	r3, [r4, #16]
 8004422:	e7ba      	b.n	800439a <_printf_i+0x152>
 8004424:	680b      	ldr	r3, [r1, #0]
 8004426:	1d1a      	adds	r2, r3, #4
 8004428:	600a      	str	r2, [r1, #0]
 800442a:	681e      	ldr	r6, [r3, #0]
 800442c:	2100      	movs	r1, #0
 800442e:	4630      	mov	r0, r6
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	f000 f82f 	bl	8004494 <memchr>
 8004436:	b108      	cbz	r0, 800443c <_printf_i+0x1f4>
 8004438:	1b80      	subs	r0, r0, r6
 800443a:	6060      	str	r0, [r4, #4]
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	6123      	str	r3, [r4, #16]
 8004440:	2300      	movs	r3, #0
 8004442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004446:	e7a8      	b.n	800439a <_printf_i+0x152>
 8004448:	4632      	mov	r2, r6
 800444a:	4649      	mov	r1, r9
 800444c:	4640      	mov	r0, r8
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	47d0      	blx	sl
 8004452:	3001      	adds	r0, #1
 8004454:	d0ab      	beq.n	80043ae <_printf_i+0x166>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	079b      	lsls	r3, r3, #30
 800445a:	d413      	bmi.n	8004484 <_printf_i+0x23c>
 800445c:	68e0      	ldr	r0, [r4, #12]
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	4298      	cmp	r0, r3
 8004462:	bfb8      	it	lt
 8004464:	4618      	movlt	r0, r3
 8004466:	e7a4      	b.n	80043b2 <_printf_i+0x16a>
 8004468:	2301      	movs	r3, #1
 800446a:	4632      	mov	r2, r6
 800446c:	4649      	mov	r1, r9
 800446e:	4640      	mov	r0, r8
 8004470:	47d0      	blx	sl
 8004472:	3001      	adds	r0, #1
 8004474:	d09b      	beq.n	80043ae <_printf_i+0x166>
 8004476:	3501      	adds	r5, #1
 8004478:	68e3      	ldr	r3, [r4, #12]
 800447a:	9903      	ldr	r1, [sp, #12]
 800447c:	1a5b      	subs	r3, r3, r1
 800447e:	42ab      	cmp	r3, r5
 8004480:	dcf2      	bgt.n	8004468 <_printf_i+0x220>
 8004482:	e7eb      	b.n	800445c <_printf_i+0x214>
 8004484:	2500      	movs	r5, #0
 8004486:	f104 0619 	add.w	r6, r4, #25
 800448a:	e7f5      	b.n	8004478 <_printf_i+0x230>
 800448c:	0800485f 	.word	0x0800485f
 8004490:	08004870 	.word	0x08004870

08004494 <memchr>:
 8004494:	4603      	mov	r3, r0
 8004496:	b510      	push	{r4, lr}
 8004498:	b2c9      	uxtb	r1, r1
 800449a:	4402      	add	r2, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	d101      	bne.n	80044a6 <memchr+0x12>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e003      	b.n	80044ae <memchr+0x1a>
 80044a6:	7804      	ldrb	r4, [r0, #0]
 80044a8:	3301      	adds	r3, #1
 80044aa:	428c      	cmp	r4, r1
 80044ac:	d1f6      	bne.n	800449c <memchr+0x8>
 80044ae:	bd10      	pop	{r4, pc}

080044b0 <memcpy>:
 80044b0:	440a      	add	r2, r1
 80044b2:	4291      	cmp	r1, r2
 80044b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b8:	d100      	bne.n	80044bc <memcpy+0xc>
 80044ba:	4770      	bx	lr
 80044bc:	b510      	push	{r4, lr}
 80044be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044c2:	4291      	cmp	r1, r2
 80044c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c8:	d1f9      	bne.n	80044be <memcpy+0xe>
 80044ca:	bd10      	pop	{r4, pc}

080044cc <memmove>:
 80044cc:	4288      	cmp	r0, r1
 80044ce:	b510      	push	{r4, lr}
 80044d0:	eb01 0402 	add.w	r4, r1, r2
 80044d4:	d902      	bls.n	80044dc <memmove+0x10>
 80044d6:	4284      	cmp	r4, r0
 80044d8:	4623      	mov	r3, r4
 80044da:	d807      	bhi.n	80044ec <memmove+0x20>
 80044dc:	1e43      	subs	r3, r0, #1
 80044de:	42a1      	cmp	r1, r4
 80044e0:	d008      	beq.n	80044f4 <memmove+0x28>
 80044e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044ea:	e7f8      	b.n	80044de <memmove+0x12>
 80044ec:	4601      	mov	r1, r0
 80044ee:	4402      	add	r2, r0
 80044f0:	428a      	cmp	r2, r1
 80044f2:	d100      	bne.n	80044f6 <memmove+0x2a>
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044fe:	e7f7      	b.n	80044f0 <memmove+0x24>

08004500 <_free_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4605      	mov	r5, r0
 8004504:	2900      	cmp	r1, #0
 8004506:	d043      	beq.n	8004590 <_free_r+0x90>
 8004508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450c:	1f0c      	subs	r4, r1, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfb8      	it	lt
 8004512:	18e4      	addlt	r4, r4, r3
 8004514:	f000 f8d0 	bl	80046b8 <__malloc_lock>
 8004518:	4a1e      	ldr	r2, [pc, #120]	; (8004594 <_free_r+0x94>)
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	4610      	mov	r0, r2
 800451e:	b933      	cbnz	r3, 800452e <_free_r+0x2e>
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	6014      	str	r4, [r2, #0]
 8004524:	4628      	mov	r0, r5
 8004526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800452a:	f000 b8cb 	b.w	80046c4 <__malloc_unlock>
 800452e:	42a3      	cmp	r3, r4
 8004530:	d90a      	bls.n	8004548 <_free_r+0x48>
 8004532:	6821      	ldr	r1, [r4, #0]
 8004534:	1862      	adds	r2, r4, r1
 8004536:	4293      	cmp	r3, r2
 8004538:	bf01      	itttt	eq
 800453a:	681a      	ldreq	r2, [r3, #0]
 800453c:	685b      	ldreq	r3, [r3, #4]
 800453e:	1852      	addeq	r2, r2, r1
 8004540:	6022      	streq	r2, [r4, #0]
 8004542:	6063      	str	r3, [r4, #4]
 8004544:	6004      	str	r4, [r0, #0]
 8004546:	e7ed      	b.n	8004524 <_free_r+0x24>
 8004548:	461a      	mov	r2, r3
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	b10b      	cbz	r3, 8004552 <_free_r+0x52>
 800454e:	42a3      	cmp	r3, r4
 8004550:	d9fa      	bls.n	8004548 <_free_r+0x48>
 8004552:	6811      	ldr	r1, [r2, #0]
 8004554:	1850      	adds	r0, r2, r1
 8004556:	42a0      	cmp	r0, r4
 8004558:	d10b      	bne.n	8004572 <_free_r+0x72>
 800455a:	6820      	ldr	r0, [r4, #0]
 800455c:	4401      	add	r1, r0
 800455e:	1850      	adds	r0, r2, r1
 8004560:	4283      	cmp	r3, r0
 8004562:	6011      	str	r1, [r2, #0]
 8004564:	d1de      	bne.n	8004524 <_free_r+0x24>
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4401      	add	r1, r0
 800456c:	6011      	str	r1, [r2, #0]
 800456e:	6053      	str	r3, [r2, #4]
 8004570:	e7d8      	b.n	8004524 <_free_r+0x24>
 8004572:	d902      	bls.n	800457a <_free_r+0x7a>
 8004574:	230c      	movs	r3, #12
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	e7d4      	b.n	8004524 <_free_r+0x24>
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1821      	adds	r1, r4, r0
 800457e:	428b      	cmp	r3, r1
 8004580:	bf01      	itttt	eq
 8004582:	6819      	ldreq	r1, [r3, #0]
 8004584:	685b      	ldreq	r3, [r3, #4]
 8004586:	1809      	addeq	r1, r1, r0
 8004588:	6021      	streq	r1, [r4, #0]
 800458a:	6063      	str	r3, [r4, #4]
 800458c:	6054      	str	r4, [r2, #4]
 800458e:	e7c9      	b.n	8004524 <_free_r+0x24>
 8004590:	bd38      	pop	{r3, r4, r5, pc}
 8004592:	bf00      	nop
 8004594:	20000164 	.word	0x20000164

08004598 <_malloc_r>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	1ccd      	adds	r5, r1, #3
 800459c:	f025 0503 	bic.w	r5, r5, #3
 80045a0:	3508      	adds	r5, #8
 80045a2:	2d0c      	cmp	r5, #12
 80045a4:	bf38      	it	cc
 80045a6:	250c      	movcc	r5, #12
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	4606      	mov	r6, r0
 80045ac:	db01      	blt.n	80045b2 <_malloc_r+0x1a>
 80045ae:	42a9      	cmp	r1, r5
 80045b0:	d903      	bls.n	80045ba <_malloc_r+0x22>
 80045b2:	230c      	movs	r3, #12
 80045b4:	6033      	str	r3, [r6, #0]
 80045b6:	2000      	movs	r0, #0
 80045b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ba:	f000 f87d 	bl	80046b8 <__malloc_lock>
 80045be:	4921      	ldr	r1, [pc, #132]	; (8004644 <_malloc_r+0xac>)
 80045c0:	680a      	ldr	r2, [r1, #0]
 80045c2:	4614      	mov	r4, r2
 80045c4:	b99c      	cbnz	r4, 80045ee <_malloc_r+0x56>
 80045c6:	4f20      	ldr	r7, [pc, #128]	; (8004648 <_malloc_r+0xb0>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	b923      	cbnz	r3, 80045d6 <_malloc_r+0x3e>
 80045cc:	4621      	mov	r1, r4
 80045ce:	4630      	mov	r0, r6
 80045d0:	f000 f862 	bl	8004698 <_sbrk_r>
 80045d4:	6038      	str	r0, [r7, #0]
 80045d6:	4629      	mov	r1, r5
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 f85d 	bl	8004698 <_sbrk_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d123      	bne.n	800462a <_malloc_r+0x92>
 80045e2:	230c      	movs	r3, #12
 80045e4:	4630      	mov	r0, r6
 80045e6:	6033      	str	r3, [r6, #0]
 80045e8:	f000 f86c 	bl	80046c4 <__malloc_unlock>
 80045ec:	e7e3      	b.n	80045b6 <_malloc_r+0x1e>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	1b5b      	subs	r3, r3, r5
 80045f2:	d417      	bmi.n	8004624 <_malloc_r+0x8c>
 80045f4:	2b0b      	cmp	r3, #11
 80045f6:	d903      	bls.n	8004600 <_malloc_r+0x68>
 80045f8:	6023      	str	r3, [r4, #0]
 80045fa:	441c      	add	r4, r3
 80045fc:	6025      	str	r5, [r4, #0]
 80045fe:	e004      	b.n	800460a <_malloc_r+0x72>
 8004600:	6863      	ldr	r3, [r4, #4]
 8004602:	42a2      	cmp	r2, r4
 8004604:	bf0c      	ite	eq
 8004606:	600b      	streq	r3, [r1, #0]
 8004608:	6053      	strne	r3, [r2, #4]
 800460a:	4630      	mov	r0, r6
 800460c:	f000 f85a 	bl	80046c4 <__malloc_unlock>
 8004610:	f104 000b 	add.w	r0, r4, #11
 8004614:	1d23      	adds	r3, r4, #4
 8004616:	f020 0007 	bic.w	r0, r0, #7
 800461a:	1ac2      	subs	r2, r0, r3
 800461c:	d0cc      	beq.n	80045b8 <_malloc_r+0x20>
 800461e:	1a1b      	subs	r3, r3, r0
 8004620:	50a3      	str	r3, [r4, r2]
 8004622:	e7c9      	b.n	80045b8 <_malloc_r+0x20>
 8004624:	4622      	mov	r2, r4
 8004626:	6864      	ldr	r4, [r4, #4]
 8004628:	e7cc      	b.n	80045c4 <_malloc_r+0x2c>
 800462a:	1cc4      	adds	r4, r0, #3
 800462c:	f024 0403 	bic.w	r4, r4, #3
 8004630:	42a0      	cmp	r0, r4
 8004632:	d0e3      	beq.n	80045fc <_malloc_r+0x64>
 8004634:	1a21      	subs	r1, r4, r0
 8004636:	4630      	mov	r0, r6
 8004638:	f000 f82e 	bl	8004698 <_sbrk_r>
 800463c:	3001      	adds	r0, #1
 800463e:	d1dd      	bne.n	80045fc <_malloc_r+0x64>
 8004640:	e7cf      	b.n	80045e2 <_malloc_r+0x4a>
 8004642:	bf00      	nop
 8004644:	20000164 	.word	0x20000164
 8004648:	20000168 	.word	0x20000168

0800464c <_realloc_r>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	4607      	mov	r7, r0
 8004650:	4614      	mov	r4, r2
 8004652:	460e      	mov	r6, r1
 8004654:	b921      	cbnz	r1, 8004660 <_realloc_r+0x14>
 8004656:	4611      	mov	r1, r2
 8004658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800465c:	f7ff bf9c 	b.w	8004598 <_malloc_r>
 8004660:	b922      	cbnz	r2, 800466c <_realloc_r+0x20>
 8004662:	f7ff ff4d 	bl	8004500 <_free_r>
 8004666:	4625      	mov	r5, r4
 8004668:	4628      	mov	r0, r5
 800466a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466c:	f000 f830 	bl	80046d0 <_malloc_usable_size_r>
 8004670:	42a0      	cmp	r0, r4
 8004672:	d20f      	bcs.n	8004694 <_realloc_r+0x48>
 8004674:	4621      	mov	r1, r4
 8004676:	4638      	mov	r0, r7
 8004678:	f7ff ff8e 	bl	8004598 <_malloc_r>
 800467c:	4605      	mov	r5, r0
 800467e:	2800      	cmp	r0, #0
 8004680:	d0f2      	beq.n	8004668 <_realloc_r+0x1c>
 8004682:	4631      	mov	r1, r6
 8004684:	4622      	mov	r2, r4
 8004686:	f7ff ff13 	bl	80044b0 <memcpy>
 800468a:	4631      	mov	r1, r6
 800468c:	4638      	mov	r0, r7
 800468e:	f7ff ff37 	bl	8004500 <_free_r>
 8004692:	e7e9      	b.n	8004668 <_realloc_r+0x1c>
 8004694:	4635      	mov	r5, r6
 8004696:	e7e7      	b.n	8004668 <_realloc_r+0x1c>

08004698 <_sbrk_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	2300      	movs	r3, #0
 800469c:	4d05      	ldr	r5, [pc, #20]	; (80046b4 <_sbrk_r+0x1c>)
 800469e:	4604      	mov	r4, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fd fac6 	bl	8001c34 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d102      	bne.n	80046b2 <_sbrk_r+0x1a>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	b103      	cbz	r3, 80046b2 <_sbrk_r+0x1a>
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	bd38      	pop	{r3, r4, r5, pc}
 80046b4:	200002a8 	.word	0x200002a8

080046b8 <__malloc_lock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	; (80046c0 <__malloc_lock+0x8>)
 80046ba:	f000 b811 	b.w	80046e0 <__retarget_lock_acquire_recursive>
 80046be:	bf00      	nop
 80046c0:	200002b0 	.word	0x200002b0

080046c4 <__malloc_unlock>:
 80046c4:	4801      	ldr	r0, [pc, #4]	; (80046cc <__malloc_unlock+0x8>)
 80046c6:	f000 b80c 	b.w	80046e2 <__retarget_lock_release_recursive>
 80046ca:	bf00      	nop
 80046cc:	200002b0 	.word	0x200002b0

080046d0 <_malloc_usable_size_r>:
 80046d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046d4:	1f18      	subs	r0, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	bfbc      	itt	lt
 80046da:	580b      	ldrlt	r3, [r1, r0]
 80046dc:	18c0      	addlt	r0, r0, r3
 80046de:	4770      	bx	lr

080046e0 <__retarget_lock_acquire_recursive>:
 80046e0:	4770      	bx	lr

080046e2 <__retarget_lock_release_recursive>:
 80046e2:	4770      	bx	lr

080046e4 <_init>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr

080046f0 <_fini>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr
