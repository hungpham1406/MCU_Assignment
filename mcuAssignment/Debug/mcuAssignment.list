
mcuAssignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005890  08005890  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08005890  08005890  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005890  08005890  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005894  08005894  00015894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000094  0800592c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800592c  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e2f  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bdf  00000000  00000000  00033eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00036ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00037910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019269  00000000  00000000  00038620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115ea  00000000  00000000  00051889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb60  00000000  00000000  00062e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee9d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003df8  00000000  00000000  000eea28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000094 	.word	0x20000094
 800012c:	00000000 	.word	0x00000000
 8000130:	080056f0 	.word	0x080056f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000098 	.word	0x20000098
 800014c:	080056f0 	.word	0x080056f0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <initStateForButton>:
int button_flag[NUMBER_BUTTONS];

uint16_t gpio_pin[NUMBER_BUTTONS] = {button1_Pin, button2_Pin, button3_Pin,buttonPedestrian_Pin};
GPIO_TypeDef* gpio_port[NUMBER_BUTTONS] = {button1_GPIO_Port, button2_GPIO_Port, button3_GPIO_Port,buttonPedestrian_GPIO_Port};

void initStateForButton() {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e020      	b.n	80007aa <initStateForButton+0x4e>
	    KeyReg0[i] = NORMAL_STATE;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <initStateForButton+0x60>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2101      	movs	r1, #1
 800076e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg1[i] = NORMAL_STATE;
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <initStateForButton+0x64>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2101      	movs	r1, #1
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg2[i] = NORMAL_STATE;
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <initStateForButton+0x68>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2101      	movs	r1, #1
 8000782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    KeyReg3[i] = NORMAL_STATE;
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <initStateForButton+0x6c>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2101      	movs	r1, #1
 800078c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    timerForKeyPress[i] = 200;
 8000790:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <initStateForButton+0x70>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	21c8      	movs	r1, #200	; 0xc8
 8000796:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    button_flag[i] = 0;
 800079a:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <initStateForButton+0x74>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2100      	movs	r1, #0
 80007a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUMBER_BUTTONS; ++i) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dddb      	ble.n	8000768 <initStateForButton+0xc>
	 }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000230 	.word	0x20000230
 80007c0:	20000240 	.word	0x20000240
 80007c4:	20000270 	.word	0x20000270
 80007c8:	20000220 	.word	0x20000220
 80007cc:	20000260 	.word	0x20000260
 80007d0:	20000250 	.word	0x20000250

080007d4 <isButtonPressed>:

int isButtonPressed(int key_index) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if(button_flag[key_index] == 1) {
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <isButtonPressed+0x30>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d106      	bne.n	80007f6 <isButtonPressed+0x22>
		button_flag[key_index] = 0;
 80007e8:	4a06      	ldr	r2, [pc, #24]	; (8000804 <isButtonPressed+0x30>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2100      	movs	r1, #0
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e000      	b.n	80007f8 <isButtonPressed+0x24>
	}
	return 0;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000250 	.word	0x20000250

08000808 <subKeyProcess>:

void subKeyProcess(int key_index) {
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	button_flag[key_index] = 1;
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <subKeyProcess+0x1c>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2101      	movs	r1, #1
 8000816:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	20000250 	.word	0x20000250

08000828 <getKeyInput>:

void getKeyInput() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e076      	b.n	8000922 <getKeyInput+0xfa>
		KeyReg0[i] = KeyReg1[i];
 8000834:	4a3f      	ldr	r2, [pc, #252]	; (8000934 <getKeyInput+0x10c>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800083c:	493e      	ldr	r1, [pc, #248]	; (8000938 <getKeyInput+0x110>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000844:	4a3d      	ldr	r2, [pc, #244]	; (800093c <getKeyInput+0x114>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800084c:	4939      	ldr	r1, [pc, #228]	; (8000934 <getKeyInput+0x10c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = HAL_GPIO_ReadPin(gpio_port[i], gpio_pin[i]);
 8000854:	4a3a      	ldr	r2, [pc, #232]	; (8000940 <getKeyInput+0x118>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800085c:	4939      	ldr	r1, [pc, #228]	; (8000944 <getKeyInput+0x11c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000864:	4619      	mov	r1, r3
 8000866:	4610      	mov	r0, r2
 8000868:	f002 f8d0 	bl	8002a0c <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	4619      	mov	r1, r3
 8000870:	4a32      	ldr	r2, [pc, #200]	; (800093c <getKeyInput+0x114>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <getKeyInput+0x110>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000880:	492c      	ldr	r1, [pc, #176]	; (8000934 <getKeyInput+0x10c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000888:	429a      	cmp	r2, r3
 800088a:	d147      	bne.n	800091c <getKeyInput+0xf4>
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <getKeyInput+0x10c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000894:	4929      	ldr	r1, [pc, #164]	; (800093c <getKeyInput+0x114>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800089c:	429a      	cmp	r2, r3
 800089e:	d13d      	bne.n	800091c <getKeyInput+0xf4>
			if(KeyReg3[i] != KeyReg2[i]) {	// Press and release
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <getKeyInput+0x120>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008a8:	4924      	ldr	r1, [pc, #144]	; (800093c <getKeyInput+0x114>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d016      	beq.n	80008e2 <getKeyInput+0xba>
				KeyReg3[i] = KeyReg2[i];
 80008b4:	4a21      	ldr	r2, [pc, #132]	; (800093c <getKeyInput+0x114>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008bc:	4922      	ldr	r1, [pc, #136]	; (8000948 <getKeyInput+0x120>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == PRESSED_STATE) {
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <getKeyInput+0x114>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d125      	bne.n	800091c <getKeyInput+0xf4>
					//TO DO
					subKeyProcess(i);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff99 	bl	8000808 <subKeyProcess>
					timerForKeyPress[i] = 200;
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <getKeyInput+0x124>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	21c8      	movs	r1, #200	; 0xc8
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008e0:	e01c      	b.n	800091c <getKeyInput+0xf4>
				}
			}
			else {		// Press and hold
				timerForKeyPress[i]--;
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <getKeyInput+0x124>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	4917      	ldr	r1, [pc, #92]	; (800094c <getKeyInput+0x124>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timerForKeyPress[i] <= 0) {
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <getKeyInput+0x124>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dc0d      	bgt.n	800091c <getKeyInput+0xf4>
					//TO DO
					if(KeyReg2[i] == PRESSED_STATE) {
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <getKeyInput+0x114>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d102      	bne.n	8000912 <getKeyInput+0xea>
						subKeyProcess(i);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ff7b 	bl	8000808 <subKeyProcess>
					}
					timerForKeyPress[i] = 200;
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <getKeyInput+0x124>)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	21c8      	movs	r1, #200	; 0xc8
 8000918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NUMBER_BUTTONS; i++) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b03      	cmp	r3, #3
 8000926:	dd85      	ble.n	8000834 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000240 	.word	0x20000240
 8000938:	20000230 	.word	0x20000230
 800093c:	20000270 	.word	0x20000270
 8000940:	20000008 	.word	0x20000008
 8000944:	20000000 	.word	0x20000000
 8000948:	20000220 	.word	0x20000220
 800094c:	20000260 	.word	0x20000260

08000950 <displayLed>:

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
}

void displayLed(int led_index) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b0a      	subs	r3, #10
 800095c:	2b0d      	cmp	r3, #13
 800095e:	f200 80fa 	bhi.w	8000b56 <displayLed+0x206>
 8000962:	a201      	add	r2, pc, #4	; (adr r2, 8000968 <displayLed+0x18>)
 8000964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009cd 	.word	0x080009cd
 8000970:	080009f9 	.word	0x080009f9
 8000974:	08000b57 	.word	0x08000b57
 8000978:	08000b57 	.word	0x08000b57
 800097c:	08000b57 	.word	0x08000b57
 8000980:	08000b57 	.word	0x08000b57
 8000984:	08000b57 	.word	0x08000b57
 8000988:	08000b57 	.word	0x08000b57
 800098c:	08000b57 	.word	0x08000b57
 8000990:	08000a25 	.word	0x08000a25
 8000994:	08000a73 	.word	0x08000a73
 8000998:	08000abf 	.word	0x08000abf
 800099c:	08000b0b 	.word	0x08000b0b
	switch(led_index) {
	case RED_MAN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a6:	4872      	ldr	r0, [pc, #456]	; (8000b70 <displayLed+0x220>)
 80009a8:	f002 f847 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2108      	movs	r1, #8
 80009b0:	4870      	ldr	r0, [pc, #448]	; (8000b74 <displayLed+0x224>)
 80009b2:	f002 f842 	bl	8002a3a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009b6:	2201      	movs	r2, #1
 80009b8:	2120      	movs	r1, #32
 80009ba:	486e      	ldr	r0, [pc, #440]	; (8000b74 <displayLed+0x224>)
 80009bc:	f002 f83d 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	486b      	ldr	r0, [pc, #428]	; (8000b74 <displayLed+0x224>)
 80009c6:	f002 f838 	bl	8002a3a <HAL_GPIO_WritePin>
		break;
 80009ca:	e0cd      	b.n	8000b68 <displayLed+0x218>
	case YELLOW_MAN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d2:	4867      	ldr	r0, [pc, #412]	; (8000b70 <displayLed+0x220>)
 80009d4:	f002 f831 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2108      	movs	r1, #8
 80009dc:	4865      	ldr	r0, [pc, #404]	; (8000b74 <displayLed+0x224>)
 80009de:	f002 f82c 	bl	8002a3a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2120      	movs	r1, #32
 80009e6:	4863      	ldr	r0, [pc, #396]	; (8000b74 <displayLed+0x224>)
 80009e8:	f002 f827 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	4860      	ldr	r0, [pc, #384]	; (8000b74 <displayLed+0x224>)
 80009f2:	f002 f822 	bl	8002a3a <HAL_GPIO_WritePin>
		break;
 80009f6:	e0b7      	b.n	8000b68 <displayLed+0x218>
	case GREEN_MAN:
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	485c      	ldr	r0, [pc, #368]	; (8000b70 <displayLed+0x220>)
 8000a00:	f002 f81b 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	485a      	ldr	r0, [pc, #360]	; (8000b74 <displayLed+0x224>)
 8000a0a:	f002 f816 	bl	8002a3a <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2120      	movs	r1, #32
 8000a12:	4858      	ldr	r0, [pc, #352]	; (8000b74 <displayLed+0x224>)
 8000a14:	f002 f811 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4855      	ldr	r0, [pc, #340]	; (8000b74 <displayLed+0x224>)
 8000a1e:	f002 f80c 	bl	8002a3a <HAL_GPIO_WritePin>
		break;
 8000a22:	e0a1      	b.n	8000b68 <displayLed+0x218>
	case RED1_GREEN2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2a:	4851      	ldr	r0, [pc, #324]	; (8000b70 <displayLed+0x220>)
 8000a2c:	f002 f805 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2108      	movs	r1, #8
 8000a34:	484f      	ldr	r0, [pc, #316]	; (8000b74 <displayLed+0x224>)
 8000a36:	f002 f800 	bl	8002a3a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	484d      	ldr	r0, [pc, #308]	; (8000b74 <displayLed+0x224>)
 8000a40:	f001 fffb 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2110      	movs	r1, #16
 8000a48:	484a      	ldr	r0, [pc, #296]	; (8000b74 <displayLed+0x224>)
 8000a4a:	f001 fff6 	bl	8002a3a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a4e:	4b4a      	ldr	r3, [pc, #296]	; (8000b78 <displayLed+0x228>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	f040 8081 	bne.w	8000b5a <displayLed+0x20a>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5e:	4845      	ldr	r0, [pc, #276]	; (8000b74 <displayLed+0x224>)
 8000a60:	f001 ffeb 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6a:	4841      	ldr	r0, [pc, #260]	; (8000b70 <displayLed+0x220>)
 8000a6c:	f001 ffe5 	bl	8002a3a <HAL_GPIO_WritePin>
		}
		break;
 8000a70:	e073      	b.n	8000b5a <displayLed+0x20a>
	case RED1_YELLOW2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	483d      	ldr	r0, [pc, #244]	; (8000b70 <displayLed+0x220>)
 8000a7a:	f001 ffde 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2108      	movs	r1, #8
 8000a82:	483c      	ldr	r0, [pc, #240]	; (8000b74 <displayLed+0x224>)
 8000a84:	f001 ffd9 	bl	8002a3a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2120      	movs	r1, #32
 8000a8c:	4839      	ldr	r0, [pc, #228]	; (8000b74 <displayLed+0x224>)
 8000a8e:	f001 ffd4 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	2110      	movs	r1, #16
 8000a96:	4837      	ldr	r0, [pc, #220]	; (8000b74 <displayLed+0x224>)
 8000a98:	f001 ffcf 	bl	8002a3a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000a9c:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <displayLed+0x228>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d15c      	bne.n	8000b5e <displayLed+0x20e>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aaa:	4832      	ldr	r0, [pc, #200]	; (8000b74 <displayLed+0x224>)
 8000aac:	f001 ffc5 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	482e      	ldr	r0, [pc, #184]	; (8000b70 <displayLed+0x220>)
 8000ab8:	f001 ffbf 	bl	8002a3a <HAL_GPIO_WritePin>
		}
		break;
 8000abc:	e04f      	b.n	8000b5e <displayLed+0x20e>

	case GREEN1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	482a      	ldr	r0, [pc, #168]	; (8000b70 <displayLed+0x220>)
 8000ac6:	f001 ffb8 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	4829      	ldr	r0, [pc, #164]	; (8000b74 <displayLed+0x224>)
 8000ad0:	f001 ffb3 	bl	8002a3a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2120      	movs	r1, #32
 8000ad8:	4826      	ldr	r0, [pc, #152]	; (8000b74 <displayLed+0x224>)
 8000ada:	f001 ffae 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2110      	movs	r1, #16
 8000ae2:	4824      	ldr	r0, [pc, #144]	; (8000b74 <displayLed+0x224>)
 8000ae4:	f001 ffa9 	bl	8002a3a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000ae8:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <displayLed+0x228>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d138      	bne.n	8000b62 <displayLed+0x212>
			// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	481f      	ldr	r0, [pc, #124]	; (8000b74 <displayLed+0x224>)
 8000af8:	f001 ff9f 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <displayLed+0x220>)
 8000b04:	f001 ff99 	bl	8002a3a <HAL_GPIO_WritePin>
		}
		break;
 8000b08:	e02b      	b.n	8000b62 <displayLed+0x212>
	case YELLOW1_RED2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b10:	4817      	ldr	r0, [pc, #92]	; (8000b70 <displayLed+0x220>)
 8000b12:	f001 ff92 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2108      	movs	r1, #8
 8000b1a:	4816      	ldr	r0, [pc, #88]	; (8000b74 <displayLed+0x224>)
 8000b1c:	f001 ff8d 	bl	8002a3a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2120      	movs	r1, #32
 8000b24:	4813      	ldr	r0, [pc, #76]	; (8000b74 <displayLed+0x224>)
 8000b26:	f001 ff88 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <displayLed+0x224>)
 8000b30:	f001 ff83 	bl	8002a3a <HAL_GPIO_WritePin>
		if(turnPedestrian_flag == 1){
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <displayLed+0x228>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d114      	bne.n	8000b66 <displayLed+0x216>
		// pedestrian light
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	480c      	ldr	r0, [pc, #48]	; (8000b74 <displayLed+0x224>)
 8000b44:	f001 ff79 	bl	8002a3a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4e:	4808      	ldr	r0, [pc, #32]	; (8000b70 <displayLed+0x220>)
 8000b50:	f001 ff73 	bl	8002a3a <HAL_GPIO_WritePin>
		}
		break;
 8000b54:	e007      	b.n	8000b66 <displayLed+0x216>

	default:
		break;
 8000b56:	bf00      	nop
 8000b58:	e006      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e004      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e002      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b62:	bf00      	nop
 8000b64:	e000      	b.n	8000b68 <displayLed+0x218>
		break;
 8000b66:	bf00      	nop
	}
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	200000bc 	.word	0x200000bc

08000b7c <switchMode2>:
 *      Author: Asus
 */

#include "fsm_automatic.h"

void switchMode2() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
	int len= sprintf(str,"%s\r\n","Welcome to Manual Mode");
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <switchMode2+0x38>)
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <switchMode2+0x3c>)
 8000b86:	480d      	ldr	r0, [pc, #52]	; (8000bbc <switchMode2+0x40>)
 8000b88:	f004 f978 	bl	8004e7c <siprintf>
 8000b8c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	4909      	ldr	r1, [pc, #36]	; (8000bbc <switchMode2+0x40>)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <switchMode2+0x44>)
 8000b9a:	f003 fb69 	bl	8004270 <HAL_UART_Transmit>
	status = RED_MAN;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <switchMode2+0x48>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	601a      	str	r2, [r3, #0]
	statusPedestrian = PES_OFF;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <switchMode2+0x4c>)
 8000ba6:	221f      	movs	r2, #31
 8000ba8:	601a      	str	r2, [r3, #0]
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08005708 	.word	0x08005708
 8000bb8:	08005720 	.word	0x08005720
 8000bbc:	200000c8 	.word	0x200000c8
 8000bc0:	20000310 	.word	0x20000310
 8000bc4:	200000b8 	.word	0x200000b8
 8000bc8:	200000c0 	.word	0x200000c0
 8000bcc:	00000000 	.word	0x00000000

08000bd0 <buzzer_activate>:

void buzzer_activate(int value1, int value2) {
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3, 5*value1);
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	441a      	add	r2, r3
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <buzzer_activate+0x68>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4613      	mov	r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <buzzer_activate+0x68>)
 8000bf4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, 0.6 * (5*value2));
 8000bf6:	683a      	ldr	r2, [r7, #0]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fd22 	bl	8000648 <__aeabi_i2d>
 8000c04:	a30a      	add	r3, pc, #40	; (adr r3, 8000c30 <buzzer_activate+0x60>)
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f7ff faa1 	bl	8000150 <__aeabi_dmul>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4909      	ldr	r1, [pc, #36]	; (8000c38 <buzzer_activate+0x68>)
 8000c14:	680c      	ldr	r4, [r1, #0]
 8000c16:	4610      	mov	r0, r2
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f7ff fd7f 	bl	800071c <__aeabi_d2uiz>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6363      	str	r3, [r4, #52]	; 0x34
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	f3af 8000 	nop.w
 8000c30:	33333333 	.word	0x33333333
 8000c34:	3fe33333 	.word	0x3fe33333
 8000c38:	20000280 	.word	0x20000280

08000c3c <fsm_pedestrian>:

void fsm_pedestrian(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	switch(statusPedestrian){
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <fsm_pedestrian+0x4c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b1e      	cmp	r3, #30
 8000c46:	d002      	beq.n	8000c4e <fsm_pedestrian+0x12>
 8000c48:	2b1f      	cmp	r3, #31
 8000c4a:	d004      	beq.n	8000c56 <fsm_pedestrian+0x1a>
		turnPedestrian_flag = 0;
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
		break;
	default:
		break;
 8000c4c:	e013      	b.n	8000c76 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 1;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <fsm_pedestrian+0x50>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
		break;
 8000c54:	e00f      	b.n	8000c76 <fsm_pedestrian+0x3a>
		turnPedestrian_flag = 0;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <fsm_pedestrian+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <fsm_pedestrian+0x54>)
 8000c64:	f001 fee9 	bl	8002a3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6e:	4809      	ldr	r0, [pc, #36]	; (8000c94 <fsm_pedestrian+0x58>)
 8000c70:	f001 fee3 	bl	8002a3a <HAL_GPIO_WritePin>
		break;
 8000c74:	bf00      	nop
	}

	if(timer3_flag == 1) {
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <fsm_pedestrian+0x5c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d102      	bne.n	8000c84 <fsm_pedestrian+0x48>
		statusPedestrian = PES_OFF;
 8000c7e:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <fsm_pedestrian+0x4c>)
 8000c80:	221f      	movs	r2, #31
 8000c82:	601a      	str	r2, [r3, #0]
	}
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000c0 	.word	0x200000c0
 8000c8c:	200000bc 	.word	0x200000bc
 8000c90:	40010c00 	.word	0x40010c00
 8000c94:	40010800 	.word	0x40010800
 8000c98:	2000020c 	.word	0x2000020c

08000c9c <fsm_automatic_run>:

void fsm_automatic_run() {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
	switch(status) {
 8000ca2:	4b88      	ldr	r3, [pc, #544]	; (8000ec4 <fsm_automatic_run+0x228>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	f200 81f5 	bhi.w	8001098 <fsm_automatic_run+0x3fc>
 8000cae:	a201      	add	r2, pc, #4	; (adr r2, 8000cb4 <fsm_automatic_run+0x18>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000cfd 	.word	0x08000cfd
 8000cbc:	08000de7 	.word	0x08000de7
 8000cc0:	08000f05 	.word	0x08000f05
 8000cc4:	08000feb 	.word	0x08000feb
	case INIT:
		statusPedestrian = PES_OFF;
 8000cc8:	4b7f      	ldr	r3, [pc, #508]	; (8000ec8 <fsm_automatic_run+0x22c>)
 8000cca:	221f      	movs	r2, #31
 8000ccc:	601a      	str	r2, [r3, #0]
		status = RED1_GREEN2_AUTO;
 8000cce:	4b7d      	ldr	r3, [pc, #500]	; (8000ec4 <fsm_automatic_run+0x228>)
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]
		counter1 = redTimer;
 8000cd4:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <fsm_automatic_run+0x230>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a7d      	ldr	r2, [pc, #500]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000cda:	6013      	str	r3, [r2, #0]
		counter2 = greenTimer;
 8000cdc:	4b7d      	ldr	r3, [pc, #500]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7d      	ldr	r2, [pc, #500]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000ce2:	6013      	str	r3, [r2, #0]

		setTimer1(greenTimer*100);
 8000ce4:	4b7b      	ldr	r3, [pc, #492]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2264      	movs	r2, #100	; 0x64
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 f8e0 	bl	8001eb4 <setTimer1>
		setTimer2(100);
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f001 f8f1 	bl	8001edc <setTimer2>
		break;
 8000cfa:	e1d6      	b.n	80010aa <fsm_automatic_run+0x40e>
	case RED1_GREEN2_AUTO:
		displayLed(RED1_GREEN2);
 8000cfc:	2014      	movs	r0, #20
 8000cfe:	f7ff fe27 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000d02:	4b76      	ldr	r3, [pc, #472]	; (8000edc <fsm_automatic_run+0x240>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d13e      	bne.n	8000d88 <fsm_automatic_run+0xec>
			int len= sprintf(str,"LED RED      = %d    LED GREEN    = %d\r\n",counter1,counter2);
 8000d0a:	4b71      	ldr	r3, [pc, #452]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b72      	ldr	r3, [pc, #456]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4973      	ldr	r1, [pc, #460]	; (8000ee0 <fsm_automatic_run+0x244>)
 8000d14:	4873      	ldr	r0, [pc, #460]	; (8000ee4 <fsm_automatic_run+0x248>)
 8000d16:	f004 f8b1 	bl	8004e7c <siprintf>
 8000d1a:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	496f      	ldr	r1, [pc, #444]	; (8000ee4 <fsm_automatic_run+0x248>)
 8000d26:	4870      	ldr	r0, [pc, #448]	; (8000ee8 <fsm_automatic_run+0x24c>)
 8000d28:	f003 faa2 	bl	8004270 <HAL_UART_Transmit>
			setTimer2(100);
 8000d2c:	2064      	movs	r0, #100	; 0x64
 8000d2e:	f001 f8d5 	bl	8001edc <setTimer2>
			counter1--;
 8000d32:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	4a65      	ldr	r2, [pc, #404]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000d3a:	6013      	str	r3, [r2, #0]
			counter2--;
 8000d3c:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a65      	ldr	r2, [pc, #404]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000d44:	6013      	str	r3, [r2, #0]
			if(turnPedestrian_flag == 1) {
 8000d46:	4b69      	ldr	r3, [pc, #420]	; (8000eec <fsm_automatic_run+0x250>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d116      	bne.n	8000d7c <fsm_automatic_run+0xe0>
				buzzer_activate(value_buzzer, value_buzzer);
 8000d4e:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a67      	ldr	r2, [pc, #412]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff39 	bl	8000bd0 <buzzer_activate>
				value_buzzer = value_buzzer - BUZZER_MAX_VALUE/(greenTimer+yellowTimer-1);
 8000d5e:	4b5d      	ldr	r3, [pc, #372]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b64      	ldr	r3, [pc, #400]	; (8000ef4 <fsm_automatic_run+0x258>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	4a63      	ldr	r2, [pc, #396]	; (8000ef8 <fsm_automatic_run+0x25c>)
 8000d6c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000d70:	4b5f      	ldr	r3, [pc, #380]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a5e      	ldr	r2, [pc, #376]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e005      	b.n	8000d88 <fsm_automatic_run+0xec>
			}
			else buzzer_activate(value_buzzer, 0);
 8000d7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff24 	bl	8000bd0 <buzzer_activate>
		}

		if(timer1_flag == 1) {
 8000d88:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <fsm_automatic_run+0x260>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d118      	bne.n	8000dc2 <fsm_automatic_run+0x126>
			status = RED1_YELLOW2_AUTO;
 8000d90:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <fsm_automatic_run+0x228>)
 8000d92:	2203      	movs	r2, #3
 8000d94:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000d96:	4b4d      	ldr	r3, [pc, #308]	; (8000ecc <fsm_automatic_run+0x230>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2264      	movs	r2, #100	; 0x64
 8000da2:	fb02 f303 	mul.w	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 f884 	bl	8001eb4 <setTimer1>
			counter1 = redTimer-greenTimer;
 8000dac:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <fsm_automatic_run+0x230>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	4a46      	ldr	r2, [pc, #280]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000db8:	6013      	str	r3, [r2, #0]
			counter2 = yellowTimer;
 8000dba:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <fsm_automatic_run+0x258>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a46      	ldr	r2, [pc, #280]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000dc0:	6013      	str	r3, [r2, #0]
		}
		if(turnPedestrian_flag) {
 8000dc2:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <fsm_automatic_run+0x250>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <fsm_automatic_run+0x136>
			isButtonPressed(0);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff fd02 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}

		break;
 8000dd0:	e164      	b.n	800109c <fsm_automatic_run+0x400>
		else if(isButtonPressed(0)) {
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff fcfe 	bl	80007d4 <isButtonPressed>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 815e 	beq.w	800109c <fsm_automatic_run+0x400>
			switchMode2();
 8000de0:	f7ff fecc 	bl	8000b7c <switchMode2>
		break;
 8000de4:	e15a      	b.n	800109c <fsm_automatic_run+0x400>
	case RED1_YELLOW2_AUTO:
		displayLed(RED1_YELLOW2);
 8000de6:	2015      	movs	r0, #21
 8000de8:	f7ff fdb2 	bl	8000950 <displayLed>

		if(timer2_flag == 1) {
 8000dec:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <fsm_automatic_run+0x240>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d13e      	bne.n	8000e72 <fsm_automatic_run+0x1d6>
			int len= sprintf(str,"LED RED      = %d    LED YELLOW   = %d\r\n",counter1,counter2);
 8000df4:	4b36      	ldr	r3, [pc, #216]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b37      	ldr	r3, [pc, #220]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4940      	ldr	r1, [pc, #256]	; (8000f00 <fsm_automatic_run+0x264>)
 8000dfe:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <fsm_automatic_run+0x248>)
 8000e00:	f004 f83c 	bl	8004e7c <siprintf>
 8000e04:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0e:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <fsm_automatic_run+0x248>)
 8000e10:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <fsm_automatic_run+0x24c>)
 8000e12:	f003 fa2d 	bl	8004270 <HAL_UART_Transmit>
			setTimer2(100);
 8000e16:	2064      	movs	r0, #100	; 0x64
 8000e18:	f001 f860 	bl	8001edc <setTimer2>
			counter1--;
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000e24:	6013      	str	r3, [r2, #0]
			counter2--;
 8000e26:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	4a2a      	ldr	r2, [pc, #168]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000e2e:	6013      	str	r3, [r2, #0]
			if(turnPedestrian_flag == 1) {
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <fsm_automatic_run+0x250>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d116      	bne.n	8000e66 <fsm_automatic_run+0x1ca>
				buzzer_activate(value_buzzer, value_buzzer);
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fec4 	bl	8000bd0 <buzzer_activate>
				value_buzzer = value_buzzer - BUZZER_MAX_VALUE/(greenTimer+yellowTimer-1);
 8000e48:	4b22      	ldr	r3, [pc, #136]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <fsm_automatic_run+0x258>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4413      	add	r3, r2
 8000e52:	3b01      	subs	r3, #1
 8000e54:	4a28      	ldr	r2, [pc, #160]	; (8000ef8 <fsm_automatic_run+0x25c>)
 8000e56:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e005      	b.n	8000e72 <fsm_automatic_run+0x1d6>
			}
			else buzzer_activate(value_buzzer, 0);
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <fsm_automatic_run+0x254>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff feaf 	bl	8000bd0 <buzzer_activate>
		}

		if(timer1_flag == 1) {
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <fsm_automatic_run+0x260>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d112      	bne.n	8000ea0 <fsm_automatic_run+0x204>
			status = GREEN1_RED2_AUTO;
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <fsm_automatic_run+0x228>)
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2264      	movs	r2, #100	; 0x64
 8000e86:	fb02 f303 	mul.w	r3, r2, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 f812 	bl	8001eb4 <setTimer1>
			counter1 = greenTimer;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <fsm_automatic_run+0x238>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <fsm_automatic_run+0x234>)
 8000e96:	6013      	str	r3, [r2, #0]
			counter2 = redTimer;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <fsm_automatic_run+0x230>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <fsm_automatic_run+0x23c>)
 8000e9e:	6013      	str	r3, [r2, #0]
		}

		if(turnPedestrian_flag) {
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <fsm_automatic_run+0x250>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <fsm_automatic_run+0x214>
			isButtonPressed(0);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fc93 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}
		break;
 8000eae:	e0f7      	b.n	80010a0 <fsm_automatic_run+0x404>
		else if(isButtonPressed(0)) {
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fc8f 	bl	80007d4 <isButtonPressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80f1 	beq.w	80010a0 <fsm_automatic_run+0x404>
			switchMode2();
 8000ebe:	f7ff fe5d 	bl	8000b7c <switchMode2>
		break;
 8000ec2:	e0ed      	b.n	80010a0 <fsm_automatic_run+0x404>
 8000ec4:	200000b8 	.word	0x200000b8
 8000ec8:	200000c0 	.word	0x200000c0
 8000ecc:	20000018 	.word	0x20000018
 8000ed0:	200000b0 	.word	0x200000b0
 8000ed4:	20000020 	.word	0x20000020
 8000ed8:	200000b4 	.word	0x200000b4
 8000edc:	20000204 	.word	0x20000204
 8000ee0:	08005728 	.word	0x08005728
 8000ee4:	200000c8 	.word	0x200000c8
 8000ee8:	20000310 	.word	0x20000310
 8000eec:	200000bc 	.word	0x200000bc
 8000ef0:	200000c4 	.word	0x200000c4
 8000ef4:	2000001c 	.word	0x2000001c
 8000ef8:	fffff830 	.word	0xfffff830
 8000efc:	200001fc 	.word	0x200001fc
 8000f00:	08005754 	.word	0x08005754
	case GREEN1_RED2_AUTO:
		displayLed(GREEN1_RED2);
 8000f04:	2016      	movs	r0, #22
 8000f06:	f7ff fd23 	bl	8000950 <displayLed>
		if (isButtonPressed(3)) {
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	f7ff fc62 	bl	80007d4 <isButtonPressed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00f      	beq.n	8000f36 <fsm_automatic_run+0x29a>
			statusPedestrian = PES_ON;
 8000f16:	4b67      	ldr	r3, [pc, #412]	; (80010b4 <fsm_automatic_run+0x418>)
 8000f18:	221e      	movs	r2, #30
 8000f1a:	601a      	str	r2, [r3, #0]
			setTimer3((3*redTimer)*100);
 8000f1c:	4b66      	ldr	r3, [pc, #408]	; (80010b8 <fsm_automatic_run+0x41c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 ffeb 	bl	8001f04 <setTimer3>
			value_buzzer = BUZZER_MAX_VALUE;
 8000f2e:	4b63      	ldr	r3, [pc, #396]	; (80010bc <fsm_automatic_run+0x420>)
 8000f30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f34:	601a      	str	r2, [r3, #0]
		}

		if(turnPedestrian_flag == 1) {
 8000f36:	4b62      	ldr	r3, [pc, #392]	; (80010c0 <fsm_automatic_run+0x424>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d105      	bne.n	8000f4a <fsm_automatic_run+0x2ae>
			buzzer_activate(value_buzzer, 0);
 8000f3e:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <fsm_automatic_run+0x420>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fe43 	bl	8000bd0 <buzzer_activate>
		}

		if(timer2_flag == 1) {
 8000f4a:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <fsm_automatic_run+0x428>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d11d      	bne.n	8000f8e <fsm_automatic_run+0x2f2>
			int len= sprintf(str,"LED GREEN    = %d    LED RED      = %d\r\n",counter1,counter2);
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b5d      	ldr	r3, [pc, #372]	; (80010cc <fsm_automatic_run+0x430>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	495d      	ldr	r1, [pc, #372]	; (80010d0 <fsm_automatic_run+0x434>)
 8000f5c:	485d      	ldr	r0, [pc, #372]	; (80010d4 <fsm_automatic_run+0x438>)
 8000f5e:	f003 ff8d 	bl	8004e7c <siprintf>
 8000f62:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	4959      	ldr	r1, [pc, #356]	; (80010d4 <fsm_automatic_run+0x438>)
 8000f6e:	485a      	ldr	r0, [pc, #360]	; (80010d8 <fsm_automatic_run+0x43c>)
 8000f70:	f003 f97e 	bl	8004270 <HAL_UART_Transmit>
			setTimer2(100);
 8000f74:	2064      	movs	r0, #100	; 0x64
 8000f76:	f000 ffb1 	bl	8001edc <setTimer2>
			counter1--;
 8000f7a:	4b53      	ldr	r3, [pc, #332]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	4a51      	ldr	r2, [pc, #324]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000f82:	6013      	str	r3, [r2, #0]
			counter2--;
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <fsm_automatic_run+0x430>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	4a50      	ldr	r2, [pc, #320]	; (80010cc <fsm_automatic_run+0x430>)
 8000f8c:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <fsm_automatic_run+0x440>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d118      	bne.n	8000fc8 <fsm_automatic_run+0x32c>
			status = YELLOW1_RED2_AUTO;
 8000f96:	4b52      	ldr	r3, [pc, #328]	; (80010e0 <fsm_automatic_run+0x444>)
 8000f98:	2205      	movs	r2, #5
 8000f9a:	601a      	str	r2, [r3, #0]
			setTimer1((redTimer-greenTimer)*100);
 8000f9c:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <fsm_automatic_run+0x41c>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <fsm_automatic_run+0x448>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2264      	movs	r2, #100	; 0x64
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 ff81 	bl	8001eb4 <setTimer1>
			counter1 = yellowTimer;
 8000fb2:	4b4d      	ldr	r3, [pc, #308]	; (80010e8 <fsm_automatic_run+0x44c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a44      	ldr	r2, [pc, #272]	; (80010c8 <fsm_automatic_run+0x42c>)
 8000fb8:	6013      	str	r3, [r2, #0]
			counter2 = redTimer-greenTimer;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <fsm_automatic_run+0x41c>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <fsm_automatic_run+0x448>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	4a41      	ldr	r2, [pc, #260]	; (80010cc <fsm_automatic_run+0x430>)
 8000fc6:	6013      	str	r3, [r2, #0]
		}

		if(turnPedestrian_flag) {
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <fsm_automatic_run+0x424>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <fsm_automatic_run+0x33c>
			isButtonPressed(0);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fbff 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}
		break;
 8000fd6:	e065      	b.n	80010a4 <fsm_automatic_run+0x408>
		else if(isButtonPressed(0)) {
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff fbfb 	bl	80007d4 <isButtonPressed>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05f      	beq.n	80010a4 <fsm_automatic_run+0x408>
			switchMode2();
 8000fe4:	f7ff fdca 	bl	8000b7c <switchMode2>
		break;
 8000fe8:	e05c      	b.n	80010a4 <fsm_automatic_run+0x408>
	case YELLOW1_RED2_AUTO:
		displayLed(YELLOW1_RED2);
 8000fea:	2017      	movs	r0, #23
 8000fec:	f7ff fcb0 	bl	8000950 <displayLed>

		if(turnPedestrian_flag == 1) {
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <fsm_automatic_run+0x424>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d105      	bne.n	8001004 <fsm_automatic_run+0x368>
			buzzer_activate(value_buzzer, 0);
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <fsm_automatic_run+0x420>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fde6 	bl	8000bd0 <buzzer_activate>
		}
		if(timer2_flag == 1) {
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <fsm_automatic_run+0x428>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d11d      	bne.n	8001048 <fsm_automatic_run+0x3ac>
			int len= sprintf(str,"LED YELLOW   = %d    LED RED      = %d\r\n",counter1,counter2);
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <fsm_automatic_run+0x42c>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <fsm_automatic_run+0x430>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <fsm_automatic_run+0x450>)
 8001016:	482f      	ldr	r0, [pc, #188]	; (80010d4 <fsm_automatic_run+0x438>)
 8001018:	f003 ff30 	bl	8004e7c <siprintf>
 800101c:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	b29a      	uxth	r2, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	492b      	ldr	r1, [pc, #172]	; (80010d4 <fsm_automatic_run+0x438>)
 8001028:	482b      	ldr	r0, [pc, #172]	; (80010d8 <fsm_automatic_run+0x43c>)
 800102a:	f003 f921 	bl	8004270 <HAL_UART_Transmit>
			setTimer2(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f000 ff54 	bl	8001edc <setTimer2>
			counter1--;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <fsm_automatic_run+0x42c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3b01      	subs	r3, #1
 800103a:	4a23      	ldr	r2, [pc, #140]	; (80010c8 <fsm_automatic_run+0x42c>)
 800103c:	6013      	str	r3, [r2, #0]
			counter2--;
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <fsm_automatic_run+0x430>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a21      	ldr	r2, [pc, #132]	; (80010cc <fsm_automatic_run+0x430>)
 8001046:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1) {
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <fsm_automatic_run+0x440>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d112      	bne.n	8001076 <fsm_automatic_run+0x3da>
			status = RED1_GREEN2_AUTO;
 8001050:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <fsm_automatic_run+0x444>)
 8001052:	2202      	movs	r2, #2
 8001054:	601a      	str	r2, [r3, #0]
			setTimer1(greenTimer*100);
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <fsm_automatic_run+0x448>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2264      	movs	r2, #100	; 0x64
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 ff27 	bl	8001eb4 <setTimer1>
			counter1 = redTimer;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <fsm_automatic_run+0x41c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <fsm_automatic_run+0x42c>)
 800106c:	6013      	str	r3, [r2, #0]
			counter2 = greenTimer;
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <fsm_automatic_run+0x448>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a16      	ldr	r2, [pc, #88]	; (80010cc <fsm_automatic_run+0x430>)
 8001074:	6013      	str	r3, [r2, #0]
		}

		if(turnPedestrian_flag) {
 8001076:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <fsm_automatic_run+0x424>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <fsm_automatic_run+0x3ea>
			isButtonPressed(0);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fba8 	bl	80007d4 <isButtonPressed>
		}
		else if(isButtonPressed(0)) {
			switchMode2();
		}
		break;
 8001084:	e010      	b.n	80010a8 <fsm_automatic_run+0x40c>
		else if(isButtonPressed(0)) {
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fba4 	bl	80007d4 <isButtonPressed>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00a      	beq.n	80010a8 <fsm_automatic_run+0x40c>
			switchMode2();
 8001092:	f7ff fd73 	bl	8000b7c <switchMode2>
		break;
 8001096:	e007      	b.n	80010a8 <fsm_automatic_run+0x40c>
	default:
		break;
 8001098:	bf00      	nop
 800109a:	e006      	b.n	80010aa <fsm_automatic_run+0x40e>
		break;
 800109c:	bf00      	nop
 800109e:	e004      	b.n	80010aa <fsm_automatic_run+0x40e>
		break;
 80010a0:	bf00      	nop
 80010a2:	e002      	b.n	80010aa <fsm_automatic_run+0x40e>
		break;
 80010a4:	bf00      	nop
 80010a6:	e000      	b.n	80010aa <fsm_automatic_run+0x40e>
		break;
 80010a8:	bf00      	nop
	}
};
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000c0 	.word	0x200000c0
 80010b8:	20000018 	.word	0x20000018
 80010bc:	200000c4 	.word	0x200000c4
 80010c0:	200000bc 	.word	0x200000bc
 80010c4:	20000204 	.word	0x20000204
 80010c8:	200000b0 	.word	0x200000b0
 80010cc:	200000b4 	.word	0x200000b4
 80010d0:	08005780 	.word	0x08005780
 80010d4:	200000c8 	.word	0x200000c8
 80010d8:	20000310 	.word	0x20000310
 80010dc:	200001fc 	.word	0x200001fc
 80010e0:	200000b8 	.word	0x200000b8
 80010e4:	20000020 	.word	0x20000020
 80010e8:	2000001c 	.word	0x2000001c
 80010ec:	080057ac 	.word	0x080057ac

080010f0 <switchMode3>:
 */
//hello

#include "fsm_manual.h"

void switchMode3() {
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
	status = YELLOW_MAN;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <switchMode3+0x14>)
 80010f6:	220b      	movs	r2, #11
 80010f8:	601a      	str	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	200000b8 	.word	0x200000b8

08001108 <switchMode4>:

void switchMode4() {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	status = GREEN_MAN;
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <switchMode4+0x14>)
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200000b8 	.word	0x200000b8

08001120 <fsm_manual_run>:

void fsm_manual_run() {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
	switch(status) {
 8001126:	4b84      	ldr	r3, [pc, #528]	; (8001338 <fsm_manual_run+0x218>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3b0a      	subs	r3, #10
 800112c:	2b05      	cmp	r3, #5
 800112e:	f200 816c 	bhi.w	800140a <fsm_manual_run+0x2ea>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <fsm_manual_run+0x18>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	08001151 	.word	0x08001151
 800113c:	08001229 	.word	0x08001229
 8001140:	08001305 	.word	0x08001305
 8001144:	08001185 	.word	0x08001185
 8001148:	0800125d 	.word	0x0800125d
 800114c:	08001365 	.word	0x08001365

	case RED_MAN:
		displayLed(RED_MAN);
 8001150:	200a      	movs	r0, #10
 8001152:	f7ff fbfd 	bl	8000950 <displayLed>

//		if(timer2_flag == 1) {
//			setTimer2(100);
//		}

		if(isButtonPressed(0)) {
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fb3c 	bl	80007d4 <isButtonPressed>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <fsm_manual_run+0x46>
			switchMode3();
 8001162:	f7ff ffc5 	bl	80010f0 <switchMode3>
		}

		if(isButtonPressed(1)) {
 8001166:	2001      	movs	r0, #1
 8001168:	f7ff fb34 	bl	80007d4 <isButtonPressed>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 814d 	beq.w	800140e <fsm_manual_run+0x2ee>
			status = RED_MAN_MODIFY;
 8001174:	4b70      	ldr	r3, [pc, #448]	; (8001338 <fsm_manual_run+0x218>)
 8001176:	220d      	movs	r2, #13
 8001178:	601a      	str	r2, [r3, #0]
			timerMan = redTimer;
 800117a:	4b70      	ldr	r3, [pc, #448]	; (800133c <fsm_manual_run+0x21c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a70      	ldr	r2, [pc, #448]	; (8001340 <fsm_manual_run+0x220>)
 8001180:	6013      	str	r3, [r2, #0]
		}
		break;
 8001182:	e144      	b.n	800140e <fsm_manual_run+0x2ee>
	case RED_MAN_MODIFY:
		displayLed(RED_MAN);
 8001184:	200a      	movs	r0, #10
 8001186:	f7ff fbe3 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fb22 	bl	80007d4 <isButtonPressed>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <fsm_manual_run+0x7c>
			status = RED_MAN;
 8001196:	4b68      	ldr	r3, [pc, #416]	; (8001338 <fsm_manual_run+0x218>)
 8001198:	220a      	movs	r2, #10
 800119a:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff fb19 	bl	80007d4 <isButtonPressed>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d01b      	beq.n	80011e0 <fsm_manual_run+0xc0>
			timerMan++;
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <fsm_manual_run+0x220>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a64      	ldr	r2, [pc, #400]	; (8001340 <fsm_manual_run+0x220>)
 80011b0:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED RED    =  %d\r\n",timerMan);
 80011b2:	4b63      	ldr	r3, [pc, #396]	; (8001340 <fsm_manual_run+0x220>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4962      	ldr	r1, [pc, #392]	; (8001344 <fsm_manual_run+0x224>)
 80011ba:	4863      	ldr	r0, [pc, #396]	; (8001348 <fsm_manual_run+0x228>)
 80011bc:	f003 fe5e 	bl	8004e7c <siprintf>
 80011c0:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	495f      	ldr	r1, [pc, #380]	; (8001348 <fsm_manual_run+0x228>)
 80011cc:	485f      	ldr	r0, [pc, #380]	; (800134c <fsm_manual_run+0x22c>)
 80011ce:	f003 f84f 	bl	8004270 <HAL_UART_Transmit>
			if(timerMan > 99) timerMan = 1;
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <fsm_manual_run+0x220>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b63      	cmp	r3, #99	; 0x63
 80011d8:	dd02      	ble.n	80011e0 <fsm_manual_run+0xc0>
 80011da:	4b59      	ldr	r3, [pc, #356]	; (8001340 <fsm_manual_run+0x220>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(2)) {
 80011e0:	2002      	movs	r0, #2
 80011e2:	f7ff faf7 	bl	80007d4 <isButtonPressed>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8112 	beq.w	8001412 <fsm_manual_run+0x2f2>
			status = INIT;
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <fsm_manual_run+0x218>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80011f4:	4a56      	ldr	r2, [pc, #344]	; (8001350 <fsm_manual_run+0x230>)
 80011f6:	4957      	ldr	r1, [pc, #348]	; (8001354 <fsm_manual_run+0x234>)
 80011f8:	4853      	ldr	r0, [pc, #332]	; (8001348 <fsm_manual_run+0x228>)
 80011fa:	f003 fe3f 	bl	8004e7c <siprintf>
 80011fe:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b29a      	uxth	r2, r3
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	494f      	ldr	r1, [pc, #316]	; (8001348 <fsm_manual_run+0x228>)
 800120a:	4850      	ldr	r0, [pc, #320]	; (800134c <fsm_manual_run+0x22c>)
 800120c:	f003 f830 	bl	8004270 <HAL_UART_Transmit>
			redTimer = timerMan;
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <fsm_manual_run+0x220>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a49      	ldr	r2, [pc, #292]	; (800133c <fsm_manual_run+0x21c>)
 8001216:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer - yellowTimer;
 8001218:	4b48      	ldr	r3, [pc, #288]	; (800133c <fsm_manual_run+0x21c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b4e      	ldr	r3, [pc, #312]	; (8001358 <fsm_manual_run+0x238>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	4a4e      	ldr	r2, [pc, #312]	; (800135c <fsm_manual_run+0x23c>)
 8001224:	6013      	str	r3, [r2, #0]
		}

		break;
 8001226:	e0f4      	b.n	8001412 <fsm_manual_run+0x2f2>
	case YELLOW_MAN:
		displayLed(YELLOW_MAN);
 8001228:	200b      	movs	r0, #11
 800122a:	f7ff fb91 	bl	8000950 <displayLed>

//		if(timer2_flag == 1) {
//			setTimer2(100);
//		}

		if(isButtonPressed(0)) {
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fad0 	bl	80007d4 <isButtonPressed>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <fsm_manual_run+0x11e>
			switchMode4();
 800123a:	f7ff ff65 	bl	8001108 <switchMode4>
		}

		if(isButtonPressed(1)) {
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff fac8 	bl	80007d4 <isButtonPressed>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80e5 	beq.w	8001416 <fsm_manual_run+0x2f6>
			status = YELLOW_MAN_MODIFY;
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <fsm_manual_run+0x218>)
 800124e:	220e      	movs	r2, #14
 8001250:	601a      	str	r2, [r3, #0]
			timerMan = yellowTimer;
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <fsm_manual_run+0x238>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a3a      	ldr	r2, [pc, #232]	; (8001340 <fsm_manual_run+0x220>)
 8001258:	6013      	str	r3, [r2, #0]
		}
		break;
 800125a:	e0dc      	b.n	8001416 <fsm_manual_run+0x2f6>
	case YELLOW_MAN_MODIFY:
		displayLed(YELLOW_MAN);
 800125c:	200b      	movs	r0, #11
 800125e:	f7ff fb77 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fab6 	bl	80007d4 <isButtonPressed>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <fsm_manual_run+0x154>
			status = YELLOW_MAN;
 800126e:	4b32      	ldr	r3, [pc, #200]	; (8001338 <fsm_manual_run+0x218>)
 8001270:	220b      	movs	r2, #11
 8001272:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff faad 	bl	80007d4 <isButtonPressed>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01d      	beq.n	80012bc <fsm_manual_run+0x19c>
			timerMan++;
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <fsm_manual_run+0x220>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a2e      	ldr	r2, [pc, #184]	; (8001340 <fsm_manual_run+0x220>)
 8001288:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED YELLOW =  %d\r\n",timerMan);
 800128a:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <fsm_manual_run+0x220>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	4933      	ldr	r1, [pc, #204]	; (8001360 <fsm_manual_run+0x240>)
 8001292:	482d      	ldr	r0, [pc, #180]	; (8001348 <fsm_manual_run+0x228>)
 8001294:	f003 fdf2 	bl	8004e7c <siprintf>
 8001298:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b29a      	uxth	r2, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	4929      	ldr	r1, [pc, #164]	; (8001348 <fsm_manual_run+0x228>)
 80012a4:	4829      	ldr	r0, [pc, #164]	; (800134c <fsm_manual_run+0x22c>)
 80012a6:	f002 ffe3 	bl	8004270 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <fsm_manual_run+0x220>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <fsm_manual_run+0x21c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	db02      	blt.n	80012bc <fsm_manual_run+0x19c>
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <fsm_manual_run+0x220>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(2)) {
 80012bc:	2002      	movs	r0, #2
 80012be:	f7ff fa89 	bl	80007d4 <isButtonPressed>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80a8 	beq.w	800141a <fsm_manual_run+0x2fa>
			status = INIT;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <fsm_manual_run+0x218>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80012d0:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <fsm_manual_run+0x230>)
 80012d2:	4920      	ldr	r1, [pc, #128]	; (8001354 <fsm_manual_run+0x234>)
 80012d4:	481c      	ldr	r0, [pc, #112]	; (8001348 <fsm_manual_run+0x228>)
 80012d6:	f003 fdd1 	bl	8004e7c <siprintf>
 80012da:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	4918      	ldr	r1, [pc, #96]	; (8001348 <fsm_manual_run+0x228>)
 80012e6:	4819      	ldr	r0, [pc, #100]	; (800134c <fsm_manual_run+0x22c>)
 80012e8:	f002 ffc2 	bl	8004270 <HAL_UART_Transmit>
			yellowTimer = timerMan;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <fsm_manual_run+0x220>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a19      	ldr	r2, [pc, #100]	; (8001358 <fsm_manual_run+0x238>)
 80012f2:	6013      	str	r3, [r2, #0]
			greenTimer = redTimer-yellowTimer;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <fsm_manual_run+0x21c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <fsm_manual_run+0x238>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <fsm_manual_run+0x23c>)
 8001300:	6013      	str	r3, [r2, #0]
		}
		break;
 8001302:	e08a      	b.n	800141a <fsm_manual_run+0x2fa>
	case GREEN_MAN:
		displayLed(GREEN_MAN);
 8001304:	200c      	movs	r0, #12
 8001306:	f7ff fb23 	bl	8000950 <displayLed>

//		if(timer2_flag == 1) {
//			setTimer2(100);
//		}

		if(isButtonPressed(0)) {
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fa62 	bl	80007d4 <isButtonPressed>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d002      	beq.n	800131c <fsm_manual_run+0x1fc>
			status = INIT;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <fsm_manual_run+0x218>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fa59 	bl	80007d4 <isButtonPressed>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d07a      	beq.n	800141e <fsm_manual_run+0x2fe>
			status = GREEN_MAN_MODIFY;
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <fsm_manual_run+0x218>)
 800132a:	220f      	movs	r2, #15
 800132c:	601a      	str	r2, [r3, #0]
			timerMan = greenTimer;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <fsm_manual_run+0x23c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <fsm_manual_run+0x220>)
 8001334:	6013      	str	r3, [r2, #0]
		}
		break;
 8001336:	e072      	b.n	800141e <fsm_manual_run+0x2fe>
 8001338:	200000b8 	.word	0x200000b8
 800133c:	20000018 	.word	0x20000018
 8001340:	20000210 	.word	0x20000210
 8001344:	080057d8 	.word	0x080057d8
 8001348:	200000c8 	.word	0x200000c8
 800134c:	20000310 	.word	0x20000310
 8001350:	080057ec 	.word	0x080057ec
 8001354:	08005800 	.word	0x08005800
 8001358:	2000001c 	.word	0x2000001c
 800135c:	20000020 	.word	0x20000020
 8001360:	08005808 	.word	0x08005808
	case GREEN_MAN_MODIFY:
		displayLed(GREEN_MAN);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff faf3 	bl	8000950 <displayLed>

		if(isButtonPressed(0)) {
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fa32 	bl	80007d4 <isButtonPressed>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d002      	beq.n	800137c <fsm_manual_run+0x25c>
			status = GREEN_MAN;
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <fsm_manual_run+0x30c>)
 8001378:	220c      	movs	r2, #12
 800137a:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(1)) {
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fa29 	bl	80007d4 <isButtonPressed>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01d      	beq.n	80013c4 <fsm_manual_run+0x2a4>
			timerMan++;
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <fsm_manual_run+0x310>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <fsm_manual_run+0x310>)
 8001390:	6013      	str	r3, [r2, #0]
			int len= sprintf(str,"LED GREEN  =  %d\r\n",timerMan);
 8001392:	4b27      	ldr	r3, [pc, #156]	; (8001430 <fsm_manual_run+0x310>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	4926      	ldr	r1, [pc, #152]	; (8001434 <fsm_manual_run+0x314>)
 800139a:	4827      	ldr	r0, [pc, #156]	; (8001438 <fsm_manual_run+0x318>)
 800139c:	f003 fd6e 	bl	8004e7c <siprintf>
 80013a0:	6178      	str	r0, [r7, #20]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	4923      	ldr	r1, [pc, #140]	; (8001438 <fsm_manual_run+0x318>)
 80013ac:	4823      	ldr	r0, [pc, #140]	; (800143c <fsm_manual_run+0x31c>)
 80013ae:	f002 ff5f 	bl	8004270 <HAL_UART_Transmit>
			if(timerMan >= redTimer) timerMan = 1;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <fsm_manual_run+0x310>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <fsm_manual_run+0x320>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	db02      	blt.n	80013c4 <fsm_manual_run+0x2a4>
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <fsm_manual_run+0x310>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
		}

		if(isButtonPressed(2)) {
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff fa05 	bl	80007d4 <isButtonPressed>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d028      	beq.n	8001422 <fsm_manual_run+0x302>
			status = INIT;
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <fsm_manual_run+0x30c>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
			int len= sprintf(str,"%s\r\n","save successfully");
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <fsm_manual_run+0x324>)
 80013d8:	491b      	ldr	r1, [pc, #108]	; (8001448 <fsm_manual_run+0x328>)
 80013da:	4817      	ldr	r0, [pc, #92]	; (8001438 <fsm_manual_run+0x318>)
 80013dc:	f003 fd4e 	bl	8004e7c <siprintf>
 80013e0:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2,(uint8_t*) str, len, 1000);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	4913      	ldr	r1, [pc, #76]	; (8001438 <fsm_manual_run+0x318>)
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <fsm_manual_run+0x31c>)
 80013ee:	f002 ff3f 	bl	8004270 <HAL_UART_Transmit>
			greenTimer = timerMan;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <fsm_manual_run+0x310>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <fsm_manual_run+0x32c>)
 80013f8:	6013      	str	r3, [r2, #0]
			yellowTimer = redTimer - greenTimer;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <fsm_manual_run+0x320>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <fsm_manual_run+0x32c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <fsm_manual_run+0x330>)
 8001406:	6013      	str	r3, [r2, #0]
		}
		break;
 8001408:	e00b      	b.n	8001422 <fsm_manual_run+0x302>
	default:
		break;
 800140a:	bf00      	nop
 800140c:	e00a      	b.n	8001424 <fsm_manual_run+0x304>
		break;
 800140e:	bf00      	nop
 8001410:	e008      	b.n	8001424 <fsm_manual_run+0x304>
		break;
 8001412:	bf00      	nop
 8001414:	e006      	b.n	8001424 <fsm_manual_run+0x304>
		break;
 8001416:	bf00      	nop
 8001418:	e004      	b.n	8001424 <fsm_manual_run+0x304>
		break;
 800141a:	bf00      	nop
 800141c:	e002      	b.n	8001424 <fsm_manual_run+0x304>
		break;
 800141e:	bf00      	nop
 8001420:	e000      	b.n	8001424 <fsm_manual_run+0x304>
		break;
 8001422:	bf00      	nop
	}
};
 8001424:	bf00      	nop
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	200000b8 	.word	0x200000b8
 8001430:	20000210 	.word	0x20000210
 8001434:	0800581c 	.word	0x0800581c
 8001438:	200000c8 	.word	0x200000c8
 800143c:	20000310 	.word	0x20000310
 8001440:	20000018 	.word	0x20000018
 8001444:	080057ec 	.word	0x080057ec
 8001448:	08005800 	.word	0x08005800
 800144c:	20000020 	.word	0x20000020
 8001450:	2000001c 	.word	0x2000001c

08001454 <getTimerRun>:
  */

void getButton(){
	getKeyInput();
}
void getTimerRun(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	timerRun();
 8001458:	f000 fd68 	bl	8001f2c <timerRun>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <get_fsm_automatic_run>:
void get_fsm_automatic_run(){
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	fsm_automatic_run();
 8001464:	f7ff fc1a 	bl	8000c9c <fsm_automatic_run>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <get_fsm_manual_run>:
void get_fsm_manual_run(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	fsm_manual_run();
 8001470:	f7ff fe56 	bl	8001120 <fsm_manual_run>
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <get_fsm_pedestrian>:
void get_fsm_pedestrian(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	fsm_pedestrian();
 800147c:	f7ff fbde 	bl	8000c3c <fsm_pedestrian>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <main>:
int main(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initStateForButton();
 8001488:	f7ff f968 	bl	800075c <initStateForButton>
	status = INIT;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <main+0x70>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001492:	f000 ff15 	bl	80022c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001496:	f000 f83d 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149a:	f000 f96d 	bl	8001778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800149e:	f000 f941 	bl	8001724 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80014a2:	f000 f879 	bl	8001598 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014a6:	f000 f8c5 	bl	8001634 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <main+0x74>)
 80014ac:	f001 ff7a 	bl	80033a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b0:	2100      	movs	r1, #0
 80014b2:	4812      	ldr	r0, [pc, #72]	; (80014fc <main+0x78>)
 80014b4:	f002 f820 	bl	80034f8 <HAL_TIM_PWM_Start>


  SCH_Init();
 80014b8:	f000 fa19 	bl	80018ee <SCH_Init>
  SCH_Add_Task(getTimerRun,0, 10);
 80014bc:	220a      	movs	r2, #10
 80014be:	2100      	movs	r1, #0
 80014c0:	480f      	ldr	r0, [pc, #60]	; (8001500 <main+0x7c>)
 80014c2:	f000 fa49 	bl	8001958 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput,0, 10);
 80014c6:	220a      	movs	r2, #10
 80014c8:	2100      	movs	r1, #0
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <main+0x80>)
 80014cc:	f000 fa44 	bl	8001958 <SCH_Add_Task>
  SCH_Add_Task(get_fsm_automatic_run, 0,10);
 80014d0:	220a      	movs	r2, #10
 80014d2:	2100      	movs	r1, #0
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <main+0x84>)
 80014d6:	f000 fa3f 	bl	8001958 <SCH_Add_Task>
  SCH_Add_Task(get_fsm_manual_run, 0, 10);
 80014da:	220a      	movs	r2, #10
 80014dc:	2100      	movs	r1, #0
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <main+0x88>)
 80014e0:	f000 fa3a 	bl	8001958 <SCH_Add_Task>
  SCH_Add_Task(get_fsm_pedestrian, 0, 10);
 80014e4:	220a      	movs	r2, #10
 80014e6:	2100      	movs	r1, #0
 80014e8:	4809      	ldr	r0, [pc, #36]	; (8001510 <main+0x8c>)
 80014ea:	f000 fa35 	bl	8001958 <SCH_Add_Task>


  while (1)
  {

	  	  SCH_Dispatch_Tasks();
 80014ee:	f000 fc9d 	bl	8001e2c <SCH_Dispatch_Tasks>
 80014f2:	e7fc      	b.n	80014ee <main+0x6a>
 80014f4:	200000b8 	.word	0x200000b8
 80014f8:	200002c8 	.word	0x200002c8
 80014fc:	20000280 	.word	0x20000280
 8001500:	08001455 	.word	0x08001455
 8001504:	08000829 	.word	0x08000829
 8001508:	08001461 	.word	0x08001461
 800150c:	0800146d 	.word	0x0800146d
 8001510:	08001479 	.word	0x08001479

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b090      	sub	sp, #64	; 0x40
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	2228      	movs	r2, #40	; 0x28
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fca2 	bl	8004e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]
 8001530:	609a      	str	r2, [r3, #8]
 8001532:	60da      	str	r2, [r3, #12]
 8001534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153e:	2310      	movs	r3, #16
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001546:	2300      	movs	r3, #0
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800154a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	4618      	mov	r0, r3
 8001556:	f001 fac7 	bl	8002ae8 <HAL_RCC_OscConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001560:	f000 f9c0 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001564:	230f      	movs	r3, #15
 8001566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001568:	2302      	movs	r3, #2
 800156a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2102      	movs	r1, #2
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fd32 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800158a:	f000 f9ab 	bl	80018e4 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3740      	adds	r7, #64	; 0x40
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <MX_TIM2_Init+0x98>)
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <MX_TIM2_Init+0x98>)
 80015be:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_TIM2_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <MX_TIM2_Init+0x98>)
 80015cc:	f44f 721c 	mov.w	r2, #624	; 0x270
 80015d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <MX_TIM2_Init+0x98>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <MX_TIM2_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <MX_TIM2_Init+0x98>)
 80015e0:	f001 fe90 	bl	8003304 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015ea:	f000 f97b 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <MX_TIM2_Init+0x98>)
 80015fc:	f002 f9e8 	bl	80039d0 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001606:	f000 f96d 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM2_Init+0x98>)
 8001618:	f002 fd6a 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001622:	f000 f95f 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200002c8 	.word	0x200002c8

08001634 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	; 0x38
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_TIM3_Init+0xe8>)
 8001666:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <MX_TIM3_Init+0xec>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1023;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <MX_TIM3_Init+0xe8>)
 800166c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_TIM3_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 624;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <MX_TIM3_Init+0xe8>)
 800167a:	f44f 721c 	mov.w	r2, #624	; 0x270
 800167e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <MX_TIM3_Init+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MX_TIM3_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800168c:	4823      	ldr	r0, [pc, #140]	; (800171c <MX_TIM3_Init+0xe8>)
 800168e:	f001 fe39 	bl	8003304 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001698:	f000 f924 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a6:	4619      	mov	r1, r3
 80016a8:	481c      	ldr	r0, [pc, #112]	; (800171c <MX_TIM3_Init+0xe8>)
 80016aa:	f002 f991 	bl	80039d0 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016b4:	f000 f916 	bl	80018e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016b8:	4818      	ldr	r0, [pc, #96]	; (800171c <MX_TIM3_Init+0xe8>)
 80016ba:	f001 fec5 	bl	8003448 <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016c4:	f000 f90e 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_TIM3_Init+0xe8>)
 80016d8:	f002 fd0a 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016e2:	f000 f8ff 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM3_Init+0xe8>)
 80016fe:	f002 f8a5 	bl	800384c <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001708:	f000 f8ec 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM3_Init+0xe8>)
 800170e:	f000 fcb9 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	; 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000280 	.word	0x20000280
 8001720:	40000400 	.word	0x40000400

08001724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART2_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001730:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800175c:	f002 fd38 	bl	80041d0 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f8bd 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000310 	.word	0x20000310
 8001774:	40004400 	.word	0x40004400

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	4b4b      	ldr	r3, [pc, #300]	; (80018bc <MX_GPIO_Init+0x144>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <MX_GPIO_Init+0x144>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b48      	ldr	r3, [pc, #288]	; (80018bc <MX_GPIO_Init+0x144>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a4:	4b45      	ldr	r3, [pc, #276]	; (80018bc <MX_GPIO_Init+0x144>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a44      	ldr	r2, [pc, #272]	; (80018bc <MX_GPIO_Init+0x144>)
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b42      	ldr	r3, [pc, #264]	; (80018bc <MX_GPIO_Init+0x144>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <MX_GPIO_Init+0x144>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a3e      	ldr	r2, [pc, #248]	; (80018bc <MX_GPIO_Init+0x144>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <MX_GPIO_Init+0x144>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b39      	ldr	r3, [pc, #228]	; (80018bc <MX_GPIO_Init+0x144>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a38      	ldr	r2, [pc, #224]	; (80018bc <MX_GPIO_Init+0x144>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b36      	ldr	r3, [pc, #216]	; (80018bc <MX_GPIO_Init+0x144>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D2_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80017f2:	4833      	ldr	r0, [pc, #204]	; (80018c0 <MX_GPIO_Init+0x148>)
 80017f4:	f001 f921 	bl	8002a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80017fe:	4831      	ldr	r0, [pc, #196]	; (80018c4 <MX_GPIO_Init+0x14c>)
 8001800:	f001 f91b 	bl	8002a3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <MX_GPIO_Init+0x150>)
 800180c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4619      	mov	r1, r3
 8001818:	482c      	ldr	r0, [pc, #176]	; (80018cc <MX_GPIO_Init+0x154>)
 800181a:	f000 ff73 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : buttonPedestrian_Pin */
  GPIO_InitStruct.Pin = buttonPedestrian_Pin;
 800181e:	2301      	movs	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(buttonPedestrian_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4619      	mov	r1, r3
 8001830:	4823      	ldr	r0, [pc, #140]	; (80018c0 <MX_GPIO_Init+0x148>)
 8001832:	f000 ff67 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin;
 8001836:	2312      	movs	r3, #18
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <MX_GPIO_Init+0x148>)
 800184a:	f000 ff5b 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D2_Pin;
 800184e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2302      	movs	r3, #2
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4816      	ldr	r0, [pc, #88]	; (80018c0 <MX_GPIO_Init+0x148>)
 8001868:	f000 ff4c 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3_Pin */
  GPIO_InitStruct.Pin = button3_Pin;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button3_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4619      	mov	r1, r3
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <MX_GPIO_Init+0x14c>)
 8001880:	f000 ff40 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8001884:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2302      	movs	r3, #2
 8001894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <MX_GPIO_Init+0x14c>)
 800189e:	f000 ff31 	bl	8002704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2028      	movs	r0, #40	; 0x28
 80018a8:	f000 fe43 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018ac:	2028      	movs	r0, #40	; 0x28
 80018ae:	f000 fe5c 	bl	800256a <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800
 80018c4:	40010c00 	.word	0x40010c00
 80018c8:	10110000 	.word	0x10110000
 80018cc:	40011000 	.word	0x40011000

080018d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

 void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	 SCH_Update();
 80018d8:	f000 f81e 	bl	8001918 <SCH_Update>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>

080018ee <SCH_Init>:
static uint32_t newTaskID = 0;

static uint32_t Get_New_Task_ID(void);
unsigned char Error_code_G = 0;

void SCH_Init(void){
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
    unsigned char i;
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	e006      	b.n	8001908 <SCH_Init+0x1a>
        SCH_Delete_Task(i);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f9a1 	bl	8001c44 <SCH_Delete_Task>
    for (i = 0; i < SCH_MAX_TASKS; i++) {
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	3301      	adds	r3, #1
 8001906:	71fb      	strb	r3, [r7, #7]
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b09      	cmp	r3, #9
 800190c:	d9f5      	bls.n	80018fa <SCH_Init+0xc>
    }
}
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <SCH_Update>:

void SCH_Update(void){
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
	//CHECK ALL TASK 'S DELAY TIME. IF RUN OUT, RUN THAT TASK
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <SCH_Update+0x3c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d013      	beq.n	800194c <SCH_Update+0x34>
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <SCH_Update+0x3c>)
 8001926:	7b1b      	ldrb	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10f      	bne.n	800194c <SCH_Update+0x34>
		if(SCH_tasks_G[0].Delay > 0){
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <SCH_Update+0x3c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <SCH_Update+0x26>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <SCH_Update+0x3c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	3b01      	subs	r3, #1
 800193a:	4a06      	ldr	r2, [pc, #24]	; (8001954 <SCH_Update+0x3c>)
 800193c:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SCH_Update+0x3c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <SCH_Update+0x34>
			SCH_tasks_G[0].RunMe = 1;
 8001946:	4b03      	ldr	r3, [pc, #12]	; (8001954 <SCH_Update+0x3c>)
 8001948:	2201      	movs	r2, #1
 800194a:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	2000012c 	.word	0x2000012c

08001958 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b089      	sub	sp, #36	; 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	e152      	b.n	8001c1c <SCH_Add_Task+0x2c4>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 8001976:	7ffa      	ldrb	r2, [r7, #31]
 8001978:	49b1      	ldr	r1, [pc, #708]	; (8001c40 <SCH_Add_Task+0x2e8>)
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	3304      	adds	r3, #4
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4413      	add	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	429a      	cmp	r2, r3
 8001994:	f240 80e0 	bls.w	8001b58 <SCH_Add_Task+0x200>
			//ADD NEW TASK BEFORE THE CURRENT TASK
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001998:	7ffa      	ldrb	r2, [r7, #31]
 800199a:	49a9      	ldr	r1, [pc, #676]	; (8001c40 <SCH_Add_Task+0x2e8>)
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	3304      	adds	r3, #4
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80019b4:	7ffa      	ldrb	r2, [r7, #31]
 80019b6:	69b9      	ldr	r1, [r7, #24]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1ac9      	subs	r1, r1, r3
 80019bc:	48a0      	ldr	r0, [pc, #640]	; (8001c40 <SCH_Add_Task+0x2e8>)
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4403      	add	r3, r0
 80019c8:	3304      	adds	r3, #4
 80019ca:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80019cc:	2309      	movs	r3, #9
 80019ce:	75fb      	strb	r3, [r7, #23]
 80019d0:	e06b      	b.n	8001aaa <SCH_Add_Task+0x152>
				if(SCH_tasks_G[i - 1].pTask != 0)
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	1e5a      	subs	r2, r3, #1
 80019d6:	499a      	ldr	r1, [pc, #616]	; (8001c40 <SCH_Add_Task+0x2e8>)
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d05d      	beq.n	8001aa4 <SCH_Add_Task+0x14c>
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	1e59      	subs	r1, r3, #1
 80019ec:	7dfa      	ldrb	r2, [r7, #23]
 80019ee:	4894      	ldr	r0, [pc, #592]	; (8001c40 <SCH_Add_Task+0x2e8>)
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4403      	add	r3, r0
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	4890      	ldr	r0, [pc, #576]	; (8001c40 <SCH_Add_Task+0x2e8>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4403      	add	r3, r0
 8001a08:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	1e59      	subs	r1, r3, #1
 8001a0e:	7dfa      	ldrb	r2, [r7, #23]
 8001a10:	488b      	ldr	r0, [pc, #556]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a12:	460b      	mov	r3, r1
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4403      	add	r3, r0
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	4887      	ldr	r0, [pc, #540]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4403      	add	r3, r0
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	1e59      	subs	r1, r3, #1
 8001a34:	7dfa      	ldrb	r2, [r7, #23]
 8001a36:	4882      	ldr	r0, [pc, #520]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a38:	460b      	mov	r3, r1
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4403      	add	r3, r0
 8001a42:	3304      	adds	r3, #4
 8001a44:	6819      	ldr	r1, [r3, #0]
 8001a46:	487e      	ldr	r0, [pc, #504]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4403      	add	r3, r0
 8001a52:	3304      	adds	r3, #4
 8001a54:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	1e59      	subs	r1, r3, #1
 8001a5a:	7dfa      	ldrb	r2, [r7, #23]
 8001a5c:	4878      	ldr	r0, [pc, #480]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a5e:	460b      	mov	r3, r1
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4403      	add	r3, r0
 8001a68:	330c      	adds	r3, #12
 8001a6a:	7818      	ldrb	r0, [r3, #0]
 8001a6c:	4974      	ldr	r1, [pc, #464]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	330c      	adds	r3, #12
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	1e59      	subs	r1, r3, #1
 8001a82:	7dfa      	ldrb	r2, [r7, #23]
 8001a84:	486e      	ldr	r0, [pc, #440]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a86:	460b      	mov	r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4403      	add	r3, r0
 8001a90:	3310      	adds	r3, #16
 8001a92:	6819      	ldr	r1, [r3, #0]
 8001a94:	486a      	ldr	r0, [pc, #424]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4403      	add	r3, r0
 8001aa0:	3310      	adds	r3, #16
 8001aa2:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
 8001aaa:	7dfa      	ldrb	r2, [r7, #23]
 8001aac:	7ffb      	ldrb	r3, [r7, #31]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d88f      	bhi.n	80019d2 <SCH_Add_Task+0x7a>
				}
			}
			// insert the new task
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001ab2:	7ffa      	ldrb	r2, [r7, #31]
 8001ab4:	4962      	ldr	r1, [pc, #392]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 8001ac4:	7ffa      	ldrb	r2, [r7, #31]
 8001ac6:	495e      	ldr	r1, [pc, #376]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001ad8:	7ffa      	ldrb	r2, [r7, #31]
 8001ada:	4959      	ldr	r1, [pc, #356]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001aec:	7ffa      	ldrb	r2, [r7, #31]
 8001aee:	4954      	ldr	r1, [pc, #336]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <SCH_Add_Task+0x1c0>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001b02:	7ffa      	ldrb	r2, [r7, #31]
 8001b04:	494e      	ldr	r1, [pc, #312]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	330c      	adds	r3, #12
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e009      	b.n	8001b2c <SCH_Add_Task+0x1d4>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001b18:	7ffa      	ldrb	r2, [r7, #31]
 8001b1a:	4949      	ldr	r1, [pc, #292]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	330c      	adds	r3, #12
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001b2c:	7ffc      	ldrb	r4, [r7, #31]
 8001b2e:	f000 f9a9 	bl	8001e84 <Get_New_Task_ID>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4942      	ldr	r1, [pc, #264]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b36:	4623      	mov	r3, r4
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4423      	add	r3, r4
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	3310      	adds	r3, #16
 8001b42:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 8001b44:	7ffa      	ldrb	r2, [r7, #31]
 8001b46:	493e      	ldr	r1, [pc, #248]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3310      	adds	r3, #16
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	e06e      	b.n	8001c36 <SCH_Add_Task+0x2de>
		} else {
			// One an empty slot is found, the new task is added there with the remaning delay
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8001b58:	7ffa      	ldrb	r2, [r7, #31]
 8001b5a:	4939      	ldr	r1, [pc, #228]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d154      	bne.n	8001c16 <SCH_Add_Task+0x2be>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001b6c:	7ffa      	ldrb	r2, [r7, #31]
 8001b6e:	4934      	ldr	r1, [pc, #208]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001b7e:	7ffa      	ldrb	r2, [r7, #31]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ac9      	subs	r1, r1, r3
 8001b86:	482e      	ldr	r0, [pc, #184]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4403      	add	r3, r0
 8001b92:	3304      	adds	r3, #4
 8001b94:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001b96:	7ffa      	ldrb	r2, [r7, #31]
 8001b98:	4929      	ldr	r1, [pc, #164]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3308      	adds	r3, #8
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001baa:	7ffa      	ldrb	r2, [r7, #31]
 8001bac:	4924      	ldr	r1, [pc, #144]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3304      	adds	r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <SCH_Add_Task+0x27e>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001bc0:	7ffa      	ldrb	r2, [r7, #31]
 8001bc2:	491f      	ldr	r1, [pc, #124]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	330c      	adds	r3, #12
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	e009      	b.n	8001bea <SCH_Add_Task+0x292>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001bd6:	7ffa      	ldrb	r2, [r7, #31]
 8001bd8:	4919      	ldr	r1, [pc, #100]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	330c      	adds	r3, #12
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001bea:	7ffc      	ldrb	r4, [r7, #31]
 8001bec:	f000 f94a 	bl	8001e84 <Get_New_Task_ID>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4913      	ldr	r1, [pc, #76]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4423      	add	r3, r4
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	3310      	adds	r3, #16
 8001c00:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 8001c02:	7ffa      	ldrb	r2, [r7, #31]
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3310      	adds	r3, #16
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e00f      	b.n	8001c36 <SCH_Add_Task+0x2de>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001c16:	7ffb      	ldrb	r3, [r7, #31]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	77fb      	strb	r3, [r7, #31]
 8001c1c:	7ffb      	ldrb	r3, [r7, #31]
 8001c1e:	2b09      	cmp	r3, #9
 8001c20:	f67f aea9 	bls.w	8001976 <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 8001c24:	7ffa      	ldrb	r2, [r7, #31]
 8001c26:	4906      	ldr	r1, [pc, #24]	; (8001c40 <SCH_Add_Task+0x2e8>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	3310      	adds	r3, #16
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000012c 	.word	0x2000012c

08001c44 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80e2 	beq.w	8001e1c <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e0da      	b.n	8001e14 <SCH_Delete_Task+0x1d0>
			// Searching task for delete
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	4971      	ldr	r1, [pc, #452]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3310      	adds	r3, #16
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	f040 80cb 	bne.w	8001e0e <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d02b      	beq.n	8001cda <SCH_Delete_Task+0x96>
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d828      	bhi.n	8001cda <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	4966      	ldr	r1, [pc, #408]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01d      	beq.n	8001cda <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8001c9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	4961      	ldr	r1, [pc, #388]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3304      	adds	r3, #4
 8001cb0:	6819      	ldr	r1, [r3, #0]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	485c      	ldr	r0, [pc, #368]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4403      	add	r3, r0
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	3201      	adds	r2, #1
 8001cc8:	4419      	add	r1, r3
 8001cca:	4857      	ldr	r0, [pc, #348]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4403      	add	r3, r0
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	6019      	str	r1, [r3, #0]
					}
				}
				// after delete the task, shift the array
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	73bb      	strb	r3, [r7, #14]
 8001cde:	e060      	b.n	8001da2 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	1c59      	adds	r1, r3, #1
 8001ce4:	7bba      	ldrb	r2, [r7, #14]
 8001ce6:	4850      	ldr	r0, [pc, #320]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4403      	add	r3, r0
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	484c      	ldr	r0, [pc, #304]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4403      	add	r3, r0
 8001d00:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 8001d02:	7bbb      	ldrb	r3, [r7, #14]
 8001d04:	1c59      	adds	r1, r3, #1
 8001d06:	7bba      	ldrb	r2, [r7, #14]
 8001d08:	4847      	ldr	r0, [pc, #284]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	440b      	add	r3, r1
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4403      	add	r3, r0
 8001d14:	3308      	adds	r3, #8
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	4843      	ldr	r0, [pc, #268]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4403      	add	r3, r0
 8001d24:	3308      	adds	r3, #8
 8001d26:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001d28:	7bbb      	ldrb	r3, [r7, #14]
 8001d2a:	1c59      	adds	r1, r3, #1
 8001d2c:	7bba      	ldrb	r2, [r7, #14]
 8001d2e:	483e      	ldr	r0, [pc, #248]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d30:	460b      	mov	r3, r1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4403      	add	r3, r0
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	483a      	ldr	r0, [pc, #232]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4403      	add	r3, r0
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	1c59      	adds	r1, r3, #1
 8001d52:	7bba      	ldrb	r2, [r7, #14]
 8001d54:	4834      	ldr	r0, [pc, #208]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d56:	460b      	mov	r3, r1
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4403      	add	r3, r0
 8001d60:	330c      	adds	r3, #12
 8001d62:	7818      	ldrb	r0, [r3, #0]
 8001d64:	4930      	ldr	r1, [pc, #192]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	330c      	adds	r3, #12
 8001d72:	4602      	mov	r2, r0
 8001d74:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	1c59      	adds	r1, r3, #1
 8001d7a:	7bba      	ldrb	r2, [r7, #14]
 8001d7c:	482a      	ldr	r0, [pc, #168]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d7e:	460b      	mov	r3, r1
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4403      	add	r3, r0
 8001d88:	3310      	adds	r3, #16
 8001d8a:	6819      	ldr	r1, [r3, #0]
 8001d8c:	4826      	ldr	r0, [pc, #152]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4403      	add	r3, r0
 8001d98:	3310      	adds	r3, #16
 8001d9a:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	73bb      	strb	r3, [r7, #14]
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d99b      	bls.n	8001ce0 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 8001da8:	7bba      	ldrb	r2, [r7, #14]
 8001daa:	491f      	ldr	r1, [pc, #124]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 8001dba:	7bba      	ldrb	r2, [r7, #14]
 8001dbc:	491a      	ldr	r1, [pc, #104]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3308      	adds	r3, #8
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001dce:	7bba      	ldrb	r2, [r7, #14]
 8001dd0:	4915      	ldr	r1, [pc, #84]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001de2:	7bba      	ldrb	r2, [r7, #14]
 8001de4:	4910      	ldr	r1, [pc, #64]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	330c      	adds	r3, #12
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 8001df6:	7bba      	ldrb	r2, [r7, #14]
 8001df8:	490b      	ldr	r1, [pc, #44]	; (8001e28 <SCH_Delete_Task+0x1e4>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3310      	adds	r3, #16
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
				return Return_code;
 8001e0a:	7b7b      	ldrb	r3, [r7, #13]
 8001e0c:	e007      	b.n	8001e1e <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001e0e:	7bfb      	ldrb	r3, [r7, #15]
 8001e10:	3301      	adds	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	f67f af21 	bls.w	8001c5e <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8001e1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	2000012c 	.word	0x2000012c

08001e2c <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
	// CHECK IF THE TASK READY TO RUN. AFTER FINISHED RUNNING, DELETE THAT TASK AND ADD IT AGAIN
	if(SCH_tasks_G[0].RunMe > 0) {
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <SCH_Dispatch_Tasks+0x54>)
 8001e34:	7b1b      	ldrb	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d019      	beq.n	8001e6e <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)();
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <SCH_Dispatch_Tasks+0x54>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <SCH_Dispatch_Tasks+0x54>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <SCH_Dispatch_Tasks+0x54>)
 8001e48:	1d3c      	adds	r4, r7, #4
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e50:	682b      	ldr	r3, [r5, #0]
 8001e52:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fef4 	bl	8001c44 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68f9      	ldr	r1, [r7, #12]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fd75 	bl	8001958 <SCH_Add_Task>
		}
	}
	    HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	2000      	movs	r0, #0
 8001e72:	f000 fe1d 	bl	8002ab0 <HAL_PWR_EnterSLEEPMode>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000012c 	.word	0x2000012c

08001e84 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	newTaskID++;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <Get_New_Task_ID+0x2c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <Get_New_Task_ID+0x2c>)
 8001e90:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <Get_New_Task_ID+0x2c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <Get_New_Task_ID+0x20>
		newTaskID++;
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <Get_New_Task_ID+0x2c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <Get_New_Task_ID+0x2c>)
 8001ea2:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <Get_New_Task_ID+0x2c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	200001f4 	.word	0x200001f4

08001eb4 <setTimer1>:
int timer3_counter = 0;
int timer3_flag = 0;

int timerMan = 0;

void setTimer1(int duration) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <setTimer1+0x20>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <setTimer1+0x24>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200001f8 	.word	0x200001f8
 8001ed8:	200001fc 	.word	0x200001fc

08001edc <setTimer2>:

void setTimer2(int duration) {
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <setTimer2+0x20>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <setTimer2+0x24>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000200 	.word	0x20000200
 8001f00:	20000204 	.word	0x20000204

08001f04 <setTimer3>:

void setTimer3(int duration) {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8001f0c:	4a05      	ldr	r2, [pc, #20]	; (8001f24 <setTimer3+0x20>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <setTimer3+0x24>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000208 	.word	0x20000208
 8001f28:	2000020c 	.word	0x2000020c

08001f2c <timerRun>:
void timerRun() {
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) {
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <timerRun+0x6c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	dd0b      	ble.n	8001f50 <timerRun+0x24>
		timer1_counter--;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <timerRun+0x6c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	4a16      	ldr	r2, [pc, #88]	; (8001f98 <timerRun+0x6c>)
 8001f40:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) {
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <timerRun+0x6c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dc02      	bgt.n	8001f50 <timerRun+0x24>
			timer1_flag = 1;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <timerRun+0x70>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0) {
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <timerRun+0x74>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	dd0b      	ble.n	8001f70 <timerRun+0x44>
		timer2_counter--;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <timerRun+0x74>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	4a10      	ldr	r2, [pc, #64]	; (8001fa0 <timerRun+0x74>)
 8001f60:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) {
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <timerRun+0x74>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	dc02      	bgt.n	8001f70 <timerRun+0x44>
			timer2_flag = 1;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <timerRun+0x78>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0) {
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <timerRun+0x7c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	dd0b      	ble.n	8001f90 <timerRun+0x64>
		timer3_counter--;
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <timerRun+0x7c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <timerRun+0x7c>)
 8001f80:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0) {
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <timerRun+0x7c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	dc02      	bgt.n	8001f90 <timerRun+0x64>
			timer3_flag = 1;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <timerRun+0x80>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	200001f8 	.word	0x200001f8
 8001f9c:	200001fc 	.word	0x200001fc
 8001fa0:	20000200 	.word	0x20000200
 8001fa4:	20000204 	.word	0x20000204
 8001fa8:	20000208 	.word	0x20000208
 8001fac:	2000020c 	.word	0x2000020c

08001fb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_MspInit+0x5c>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <HAL_MspInit+0x5c>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6193      	str	r3, [r2, #24]
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_MspInit+0x5c>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x5c>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_MspInit+0x5c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_MspInit+0x5c>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_MspInit+0x60>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_MspInit+0x60>)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40021000 	.word	0x40021000
 8002010:	40010000 	.word	0x40010000

08002014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002024:	d114      	bne.n	8002050 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_TIM_Base_MspInit+0x68>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <HAL_TIM_Base_MspInit+0x68>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_TIM_Base_MspInit+0x68>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201c      	movs	r0, #28
 8002044:	f000 fa75 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002048:	201c      	movs	r0, #28
 800204a:	f000 fa8e 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800204e:	e010      	b.n	8002072 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_TIM_Base_MspInit+0x6c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d10b      	bne.n	8002072 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_TIM_Base_MspInit+0x68>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_TIM_Base_MspInit+0x68>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	61d3      	str	r3, [r2, #28]
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_TIM_Base_MspInit+0x68>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
}
 8002072:	bf00      	nop
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_TIM_MspPostInit+0x58>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d117      	bne.n	80020d4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <HAL_TIM_MspPostInit+0x5c>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <HAL_TIM_MspPostInit+0x5c>)
 80020aa:	f043 0304 	orr.w	r3, r3, #4
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_TIM_MspPostInit+0x5c>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = buzzer_Pin;
 80020bc:	2340      	movs	r3, #64	; 0x40
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	4805      	ldr	r0, [pc, #20]	; (80020e4 <HAL_TIM_MspPostInit+0x60>)
 80020d0:	f000 fb18 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020d4:	bf00      	nop
 80020d6:	3720      	adds	r7, #32
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40010800 	.word	0x40010800

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_UART_MspInit+0x80>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d12b      	bne.n	8002160 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_UART_MspInit+0x84>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_UART_MspInit+0x84>)
 800210e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002112:	61d3      	str	r3, [r2, #28]
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_UART_MspInit+0x84>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_UART_MspInit+0x84>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a11      	ldr	r2, [pc, #68]	; (800216c <HAL_UART_MspInit+0x84>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b0f      	ldr	r3, [pc, #60]	; (800216c <HAL_UART_MspInit+0x84>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002138:	230c      	movs	r3, #12
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2302      	movs	r3, #2
 8002142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4619      	mov	r1, r3
 800214a:	4809      	ldr	r0, [pc, #36]	; (8002170 <HAL_UART_MspInit+0x88>)
 800214c:	f000 fada 	bl	8002704 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2026      	movs	r0, #38	; 0x26
 8002156:	f000 f9ec 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800215a:	2026      	movs	r0, #38	; 0x26
 800215c:	f000 fa05 	bl	800256a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004400 	.word	0x40004400
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800

08002174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <NMI_Handler+0x4>

0800217a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <HardFault_Handler+0x4>

08002180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler+0x4>

08002186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <BusFault_Handler+0x4>

0800218c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <UsageFault_Handler+0x4>

08002192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ba:	f000 f8c7 	bl	800234c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM2_IRQHandler+0x10>)
 80021ca:	f001 fa37 	bl	800363c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200002c8 	.word	0x200002c8

080021d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <USART2_IRQHandler+0x10>)
 80021de:	f002 f8cb 	bl	8004378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000310 	.word	0x20000310

080021ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021f4:	f000 fc3a 	bl	8002a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <_sbrk+0x5c>)
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <_sbrk+0x60>)
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <_sbrk+0x64>)
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <_sbrk+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800222c:	f002 fdf4 	bl	8004e18 <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e009      	b.n	8002250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20005000 	.word	0x20005000
 800225c:	00000400 	.word	0x00000400
 8002260:	20000214 	.word	0x20000214
 8002264:	20000370 	.word	0x20000370

08002268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002274:	f7ff fff8 	bl	8002268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800227a:	490c      	ldr	r1, [pc, #48]	; (80022ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002290:	4c09      	ldr	r4, [pc, #36]	; (80022b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f002 fdc1 	bl	8004e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a2:	f7ff f8ef 	bl	8001484 <main>
  bx lr
 80022a6:	4770      	bx	lr
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022b0:	08005898 	.word	0x08005898
  ldr r2, =_sbss
 80022b4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80022b8:	2000036c 	.word	0x2000036c

080022bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_2_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x28>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x28>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f923 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 f808 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fe68 	bl	8001fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x54>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_InitTick+0x58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f93b 	bl	8002586 <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00e      	b.n	8002338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d80a      	bhi.n	8002336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f000 f903 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_InitTick+0x5c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000024 	.word	0x20000024
 8002344:	2000002c 	.word	0x2000002c
 8002348:	20000028 	.word	0x20000028

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_IncTick+0x1c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x20>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <HAL_IncTick+0x20>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	2000002c 	.word	0x2000002c
 800236c:	20000358 	.word	0x20000358

08002370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_GetTick+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000358 	.word	0x20000358

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4906      	ldr	r1, [pc, #24]	; (800241c <__NVIC_EnableIRQ+0x34>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	2b00      	cmp	r3, #0
 8002432:	db0a      	blt.n	800244a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	490c      	ldr	r1, [pc, #48]	; (800246c <__NVIC_SetPriority+0x4c>)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	0112      	lsls	r2, r2, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	440b      	add	r3, r1
 8002444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002448:	e00a      	b.n	8002460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4908      	ldr	r1, [pc, #32]	; (8002470 <__NVIC_SetPriority+0x50>)
 8002450:	79fb      	ldrb	r3, [r7, #7]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	3b04      	subs	r3, #4
 8002458:	0112      	lsls	r2, r2, #4
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	440b      	add	r3, r1
 800245e:	761a      	strb	r2, [r3, #24]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000e100 	.word	0xe000e100
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f1c3 0307 	rsb	r3, r3, #7
 800248e:	2b04      	cmp	r3, #4
 8002490:	bf28      	it	cs
 8002492:	2304      	movcs	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3304      	adds	r3, #4
 800249a:	2b06      	cmp	r3, #6
 800249c:	d902      	bls.n	80024a4 <NVIC_EncodePriority+0x30>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b03      	subs	r3, #3
 80024a2:	e000      	b.n	80024a6 <NVIC_EncodePriority+0x32>
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024bc:	f04f 31ff 	mov.w	r1, #4294967295
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	43d9      	mvns	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	4313      	orrs	r3, r2
         );
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3724      	adds	r7, #36	; 0x24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff90 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff2d 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002544:	f7ff ff42 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f7ff ff90 	bl	8002474 <NVIC_EncodePriority>
 8002554:	4602      	mov	r2, r0
 8002556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff5f 	bl	8002420 <__NVIC_SetPriority>
}
 8002562:	bf00      	nop
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff35 	bl	80023e8 <__NVIC_EnableIRQ>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffa2 	bl	80024d8 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d008      	beq.n	80025c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e020      	b.n	800260a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020e 	bic.w	r2, r2, #14
 80025d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d005      	beq.n	8002638 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2204      	movs	r2, #4
 8002630:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e051      	b.n	80026dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 020e 	bic.w	r2, r2, #14
 8002646:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_DMA_Abort_IT+0xd4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d029      	beq.n	80026b6 <HAL_DMA_Abort_IT+0xa2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_DMA_Abort_IT+0xd8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <HAL_DMA_Abort_IT+0x9e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_DMA_Abort_IT+0xdc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d01a      	beq.n	80026ac <HAL_DMA_Abort_IT+0x98>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_DMA_Abort_IT+0xe0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d012      	beq.n	80026a6 <HAL_DMA_Abort_IT+0x92>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1c      	ldr	r2, [pc, #112]	; (80026f8 <HAL_DMA_Abort_IT+0xe4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00a      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x8c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <HAL_DMA_Abort_IT+0xe8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d102      	bne.n	800269a <HAL_DMA_Abort_IT+0x86>
 8002694:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002698:	e00e      	b.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
 800269a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800269e:	e00b      	b.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
 80026a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a4:	e008      	b.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
 80026a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026aa:	e005      	b.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
 80026ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026b0:	e002      	b.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
 80026b2:	2310      	movs	r3, #16
 80026b4:	e000      	b.n	80026b8 <HAL_DMA_Abort_IT+0xa4>
 80026b6:	2301      	movs	r3, #1
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_DMA_Abort_IT+0xec>)
 80026ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
    } 
  }
  return status;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40020008 	.word	0x40020008
 80026ec:	4002001c 	.word	0x4002001c
 80026f0:	40020030 	.word	0x40020030
 80026f4:	40020044 	.word	0x40020044
 80026f8:	40020058 	.word	0x40020058
 80026fc:	4002006c 	.word	0x4002006c
 8002700:	40020000 	.word	0x40020000

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b08b      	sub	sp, #44	; 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e169      	b.n	80029ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002718:	2201      	movs	r2, #1
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8158 	bne.w	80029e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4a9a      	ldr	r2, [pc, #616]	; (80029a4 <HAL_GPIO_Init+0x2a0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d05e      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002740:	4a98      	ldr	r2, [pc, #608]	; (80029a4 <HAL_GPIO_Init+0x2a0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d875      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002746:	4a98      	ldr	r2, [pc, #608]	; (80029a8 <HAL_GPIO_Init+0x2a4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d058      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 800274c:	4a96      	ldr	r2, [pc, #600]	; (80029a8 <HAL_GPIO_Init+0x2a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d86f      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002752:	4a96      	ldr	r2, [pc, #600]	; (80029ac <HAL_GPIO_Init+0x2a8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d052      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002758:	4a94      	ldr	r2, [pc, #592]	; (80029ac <HAL_GPIO_Init+0x2a8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d869      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800275e:	4a94      	ldr	r2, [pc, #592]	; (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04c      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002764:	4a92      	ldr	r2, [pc, #584]	; (80029b0 <HAL_GPIO_Init+0x2ac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d863      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800276a:	4a92      	ldr	r2, [pc, #584]	; (80029b4 <HAL_GPIO_Init+0x2b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d046      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002770:	4a90      	ldr	r2, [pc, #576]	; (80029b4 <HAL_GPIO_Init+0x2b0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d85d      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002776:	2b12      	cmp	r3, #18
 8002778:	d82a      	bhi.n	80027d0 <HAL_GPIO_Init+0xcc>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d859      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_GPIO_Init+0x80>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027eb 	.word	0x080027eb
 8002790:	0800282d 	.word	0x0800282d
 8002794:	08002833 	.word	0x08002833
 8002798:	08002833 	.word	0x08002833
 800279c:	08002833 	.word	0x08002833
 80027a0:	08002833 	.word	0x08002833
 80027a4:	08002833 	.word	0x08002833
 80027a8:	08002833 	.word	0x08002833
 80027ac:	08002833 	.word	0x08002833
 80027b0:	08002833 	.word	0x08002833
 80027b4:	08002833 	.word	0x08002833
 80027b8:	08002833 	.word	0x08002833
 80027bc:	08002833 	.word	0x08002833
 80027c0:	08002833 	.word	0x08002833
 80027c4:	08002833 	.word	0x08002833
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	4a79      	ldr	r2, [pc, #484]	; (80029b8 <HAL_GPIO_Init+0x2b4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027d6:	e02c      	b.n	8002832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e029      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	3304      	adds	r3, #4
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e024      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	3308      	adds	r3, #8
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e01f      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	330c      	adds	r3, #12
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e01a      	b.n	8002834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002806:	2304      	movs	r3, #4
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e013      	b.n	8002834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	611a      	str	r2, [r3, #16]
          break;
 800281e:	e009      	b.n	8002834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	615a      	str	r2, [r3, #20]
          break;
 800282a:	e003      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x130>
          break;
 8002832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d801      	bhi.n	800283e <HAL_GPIO_Init+0x13a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_Init+0x13e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d802      	bhi.n	8002850 <HAL_GPIO_Init+0x14c>
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x152>
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3b08      	subs	r3, #8
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	210f      	movs	r1, #15
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80b1 	beq.w	80029e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002884:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800289c:	4a48      	ldr	r2, [pc, #288]	; (80029c0 <HAL_GPIO_Init+0x2bc>)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a40      	ldr	r2, [pc, #256]	; (80029c4 <HAL_GPIO_Init+0x2c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d013      	beq.n	80028f0 <HAL_GPIO_Init+0x1ec>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3f      	ldr	r2, [pc, #252]	; (80029c8 <HAL_GPIO_Init+0x2c4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00d      	beq.n	80028ec <HAL_GPIO_Init+0x1e8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <HAL_GPIO_Init+0x2c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <HAL_GPIO_Init+0x1e4>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3d      	ldr	r2, [pc, #244]	; (80029d0 <HAL_GPIO_Init+0x2cc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d101      	bne.n	80028e4 <HAL_GPIO_Init+0x1e0>
 80028e0:	2303      	movs	r3, #3
 80028e2:	e006      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e4:	2304      	movs	r3, #4
 80028e6:	e004      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e002      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_GPIO_Init+0x1ee>
 80028f0:	2300      	movs	r3, #0
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	f002 0203 	and.w	r2, r2, #3
 80028f8:	0092      	lsls	r2, r2, #2
 80028fa:	4093      	lsls	r3, r2
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002902:	492f      	ldr	r1, [pc, #188]	; (80029c0 <HAL_GPIO_Init+0x2bc>)
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	492c      	ldr	r1, [pc, #176]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
 8002928:	e006      	b.n	8002938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	43db      	mvns	r3, r3
 8002932:	4928      	ldr	r1, [pc, #160]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002934:	4013      	ands	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	4922      	ldr	r1, [pc, #136]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	43db      	mvns	r3, r3
 800295a:	491e      	ldr	r1, [pc, #120]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800295c:	4013      	ands	r3, r2
 800295e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d006      	beq.n	800297a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4918      	ldr	r1, [pc, #96]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	43db      	mvns	r3, r3
 8002982:	4914      	ldr	r1, [pc, #80]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002984:	4013      	ands	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d021      	beq.n	80029d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e021      	b.n	80029e6 <HAL_GPIO_Init+0x2e2>
 80029a2:	bf00      	nop
 80029a4:	10320000 	.word	0x10320000
 80029a8:	10310000 	.word	0x10310000
 80029ac:	10220000 	.word	0x10220000
 80029b0:	10210000 	.word	0x10210000
 80029b4:	10120000 	.word	0x10120000
 80029b8:	10110000 	.word	0x10110000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40010800 	.word	0x40010800
 80029c8:	40010c00 	.word	0x40010c00
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40011400 	.word	0x40011400
 80029d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	43db      	mvns	r3, r3
 80029e0:	4909      	ldr	r1, [pc, #36]	; (8002a08 <HAL_GPIO_Init+0x304>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	3301      	adds	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f47f ae8e 	bne.w	8002718 <HAL_GPIO_Init+0x14>
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	372c      	adds	r7, #44	; 0x2c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e001      	b.n	8002a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	807b      	strh	r3, [r7, #2]
 8002a46:	4613      	mov	r3, r2
 8002a48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a4a:	787b      	ldrb	r3, [r7, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a50:	887a      	ldrh	r2, [r7, #2]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a56:	e003      	b.n	8002a60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a58:	887b      	ldrh	r3, [r7, #2]
 8002a5a:	041a      	lsls	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	611a      	str	r2, [r3, #16]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f806 	bl	8002a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002ac2:	f023 0304 	bic.w	r3, r3, #4
 8002ac6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002ace:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002ad0:	e002      	b.n	8002ad8 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8002ad2:	bf40      	sev
    __WFE();
 8002ad4:	bf20      	wfe
    __WFE();
 8002ad6:	bf20      	wfe
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e26c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8087 	beq.w	8002c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b08:	4b92      	ldr	r3, [pc, #584]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d00c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b14:	4b8f      	ldr	r3, [pc, #572]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d112      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5e>
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d10b      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	4b89      	ldr	r3, [pc, #548]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x12c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d168      	bne.n	8002c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e246      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x76>
 8002b50:	4b80      	ldr	r3, [pc, #512]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a7f      	ldr	r2, [pc, #508]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e02e      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x98>
 8002b66:	4b7b      	ldr	r3, [pc, #492]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7a      	ldr	r2, [pc, #488]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a77      	ldr	r2, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0xbc>
 8002b8a:	4b72      	ldr	r3, [pc, #456]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b6f      	ldr	r3, [pc, #444]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6e      	ldr	r2, [pc, #440]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xd4>
 8002ba4:	4b6b      	ldr	r3, [pc, #428]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6a      	ldr	r2, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a67      	ldr	r2, [pc, #412]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7ff fbd4 	bl	8002370 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7ff fbd0 	bl	8002370 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1fa      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xe4>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7ff fbc0 	bl	8002370 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7ff fbbc 	bl	8002370 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1e6      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x10c>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c2e:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x18c>
 8002c3a:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1ba      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4939      	ldr	r1, [pc, #228]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7ff fb75 	bl	8002370 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7ff fb71 	bl	8002370 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e19b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4927      	ldr	r1, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fb54 	bl	8002370 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7ff fb50 	bl	8002370 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e17a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d03a      	beq.n	8002d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7ff fb34 	bl	8002370 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7ff fb30 	bl	8002370 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e15a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f000 facc 	bl	80032c8 <RCC_Delay>
 8002d30:	e01c      	b.n	8002d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d38:	f7ff fb1a 	bl	8002370 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3e:	e00f      	b.n	8002d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff fb16 	bl	8002370 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d908      	bls.n	8002d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e140      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	42420000 	.word	0x42420000
 8002d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d60:	4b9e      	ldr	r3, [pc, #632]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e9      	bne.n	8002d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a6 	beq.w	8002ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7e:	4b97      	ldr	r3, [pc, #604]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8a:	4b94      	ldr	r3, [pc, #592]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4a93      	ldr	r2, [pc, #588]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	61d3      	str	r3, [r2, #28]
 8002d96:	4b91      	ldr	r3, [pc, #580]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <HAL_RCC_OscConfig+0x4f8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	4b8b      	ldr	r3, [pc, #556]	; (8002fe0 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a8a      	ldr	r2, [pc, #552]	; (8002fe0 <HAL_RCC_OscConfig+0x4f8>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbe:	f7ff fad7 	bl	8002370 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7ff fad3 	bl	8002370 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	; 0x64
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0fd      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x4f8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x312>
 8002dec:	4b7b      	ldr	r3, [pc, #492]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	4a7a      	ldr	r2, [pc, #488]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6213      	str	r3, [r2, #32]
 8002df8:	e02d      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x334>
 8002e02:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4a75      	ldr	r2, [pc, #468]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6213      	str	r3, [r2, #32]
 8002e0e:	4b73      	ldr	r3, [pc, #460]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4a72      	ldr	r2, [pc, #456]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	f023 0304 	bic.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	e01c      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b05      	cmp	r3, #5
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCC_OscConfig+0x356>
 8002e24:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a6c      	ldr	r2, [pc, #432]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	4b6a      	ldr	r3, [pc, #424]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6213      	str	r3, [r2, #32]
 8002e3c:	e00b      	b.n	8002e56 <HAL_RCC_OscConfig+0x36e>
 8002e3e:	4b67      	ldr	r3, [pc, #412]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	4a66      	ldr	r2, [pc, #408]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6213      	str	r3, [r2, #32]
 8002e4a:	4b64      	ldr	r3, [pc, #400]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	4a63      	ldr	r2, [pc, #396]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	f023 0304 	bic.w	r3, r3, #4
 8002e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d015      	beq.n	8002e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7ff fa87 	bl	8002370 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7ff fa83 	bl	8002370 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0ab      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7c:	4b57      	ldr	r3, [pc, #348]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0ee      	beq.n	8002e66 <HAL_RCC_OscConfig+0x37e>
 8002e88:	e014      	b.n	8002eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7ff fa71 	bl	8002370 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7ff fa6d 	bl	8002370 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e095      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea8:	4b4c      	ldr	r3, [pc, #304]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ee      	bne.n	8002e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eba:	4b48      	ldr	r3, [pc, #288]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4a47      	ldr	r2, [pc, #284]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8081 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d061      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d146      	bne.n	8002f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCC_OscConfig+0x4fc>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7ff fa41 	bl	8002370 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7ff fa3d 	bl	8002370 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e067      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f0      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d108      	bne.n	8002f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	492d      	ldr	r1, [pc, #180]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a19      	ldr	r1, [r3, #32]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	4927      	ldr	r1, [pc, #156]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_OscConfig+0x4fc>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7ff fa11 	bl	8002370 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f52:	f7ff fa0d 	bl	8002370 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e037      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x46a>
 8002f70:	e02f      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f72:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_RCC_OscConfig+0x4fc>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff f9fa 	bl	8002370 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7ff f9f6 	bl	8002370 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e020      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x498>
 8002f9e:	e018      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e013      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_OscConfig+0x4f4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d106      	bne.n	8002fce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40007000 	.word	0x40007000
 8002fe4:	42420060 	.word	0x42420060

08002fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0d0      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d910      	bls.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b67      	ldr	r3, [pc, #412]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4965      	ldr	r1, [pc, #404]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0b8      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003044:	4b59      	ldr	r3, [pc, #356]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a58      	ldr	r2, [pc, #352]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800304e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800305c:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	4a52      	ldr	r2, [pc, #328]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b50      	ldr	r3, [pc, #320]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	494d      	ldr	r1, [pc, #308]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d040      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b47      	ldr	r3, [pc, #284]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d115      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e07f      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e073      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06b      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4936      	ldr	r1, [pc, #216]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7ff f94a 	bl	8002370 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7ff f946 	bl	8002370 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e053      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b27      	ldr	r3, [pc, #156]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d210      	bcs.n	8003138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 0207 	bic.w	r2, r3, #7
 800311e:	4922      	ldr	r1, [pc, #136]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	d001      	beq.n	8003138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e032      	b.n	800319e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4916      	ldr	r1, [pc, #88]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	490e      	ldr	r1, [pc, #56]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003176:	f000 f821 	bl	80031bc <HAL_RCC_GetSysClockFreq>
 800317a:	4602      	mov	r2, r0
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	490a      	ldr	r1, [pc, #40]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	5ccb      	ldrb	r3, [r1, r3]
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a09      	ldr	r2, [pc, #36]	; (80031b4 <HAL_RCC_ClockConfig+0x1cc>)
 8003190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f8a8 	bl	80022ec <HAL_InitTick>

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40022000 	.word	0x40022000
 80031ac:	40021000 	.word	0x40021000
 80031b0:	08005830 	.word	0x08005830
 80031b4:	20000024 	.word	0x20000024
 80031b8:	20000028 	.word	0x20000028

080031bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_GetSysClockFreq+0x94>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x30>
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x36>
 80031ea:	e027      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ee:	613b      	str	r3, [r7, #16]
      break;
 80031f0:	e027      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031fc:	5cd3      	ldrb	r3, [r2, r3]
 80031fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_GetSysClockFreq+0x94>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0c5b      	lsrs	r3, r3, #17
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <HAL_RCC_GetSysClockFreq+0x98>)
 800321e:	fb02 f203 	mul.w	r2, r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e004      	b.n	8003236 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	613b      	str	r3, [r7, #16]
      break;
 800323a:	e002      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <HAL_RCC_GetSysClockFreq+0x98>)
 800323e:	613b      	str	r3, [r7, #16]
      break;
 8003240:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003242:	693b      	ldr	r3, [r7, #16]
}
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	bc80      	pop	{r7}
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	40021000 	.word	0x40021000
 8003254:	007a1200 	.word	0x007a1200
 8003258:	08005848 	.word	0x08005848
 800325c:	08005858 	.word	0x08005858
 8003260:	003d0900 	.word	0x003d0900

08003264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003268:	4b02      	ldr	r3, [pc, #8]	; (8003274 <HAL_RCC_GetHCLKFreq+0x10>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000024 	.word	0x20000024

08003278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800327c:	f7ff fff2 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	; (800329c <HAL_RCC_GetPCLK1Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	08005840 	.word	0x08005840

080032a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a4:	f7ff ffde 	bl	8003264 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	0adb      	lsrs	r3, r3, #11
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08005840 	.word	0x08005840

080032c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <RCC_Delay+0x34>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <RCC_Delay+0x38>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e4:	bf00      	nop
  }
  while (Delay --);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	60fa      	str	r2, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f9      	bne.n	80032e4 <RCC_Delay+0x1c>
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000024 	.word	0x20000024
 8003300:	10624dd3 	.word	0x10624dd3

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe fe72 	bl	8002014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fc30 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e03a      	b.n	8003432 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a18      	ldr	r2, [pc, #96]	; (800343c <HAL_TIM_Base_Start_IT+0x98>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e6:	d009      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_TIM_Base_Start_IT+0x9c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x58>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_TIM_Base_Start_IT+0xa0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d010      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e007      	b.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800

08003448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f839 	bl	80034e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fb8e 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_TIM_PWM_Start+0x24>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b01      	cmp	r3, #1
 8003512:	bf14      	ite	ne
 8003514:	2301      	movne	r3, #1
 8003516:	2300      	moveq	r3, #0
 8003518:	b2db      	uxtb	r3, r3
 800351a:	e022      	b.n	8003562 <HAL_TIM_PWM_Start+0x6a>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b04      	cmp	r3, #4
 8003520:	d109      	bne.n	8003536 <HAL_TIM_PWM_Start+0x3e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	bf14      	ite	ne
 800352e:	2301      	movne	r3, #1
 8003530:	2300      	moveq	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e015      	b.n	8003562 <HAL_TIM_PWM_Start+0x6a>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d109      	bne.n	8003550 <HAL_TIM_PWM_Start+0x58>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e008      	b.n	8003562 <HAL_TIM_PWM_Start+0x6a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	bf14      	ite	ne
 800355c:	2301      	movne	r3, #1
 800355e:	2300      	moveq	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e05e      	b.n	8003628 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0x82>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003578:	e013      	b.n	80035a2 <HAL_TIM_PWM_Start+0xaa>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0x92>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_PWM_Start+0xaa>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d104      	bne.n	800359a <HAL_TIM_PWM_Start+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003598:	e003      	b.n	80035a2 <HAL_TIM_PWM_Start+0xaa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2201      	movs	r2, #1
 80035a8:	6839      	ldr	r1, [r7, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 fd7c 	bl	80040a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <HAL_TIM_PWM_Start+0x138>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_TIM_PWM_Start+0x138>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00e      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xfa>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d009      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xfa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a14      	ldr	r2, [pc, #80]	; (8003634 <HAL_TIM_PWM_Start+0x13c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d004      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xfa>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a12      	ldr	r2, [pc, #72]	; (8003638 <HAL_TIM_PWM_Start+0x140>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d111      	bne.n	8003616 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b06      	cmp	r3, #6
 8003602:	d010      	beq.n	8003626 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003614:	e007      	b.n	8003626 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40012c00 	.word	0x40012c00
 8003634:	40000400 	.word	0x40000400
 8003638:	40000800 	.word	0x40000800

0800363c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d122      	bne.n	8003698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d11b      	bne.n	8003698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0202 	mvn.w	r2, #2
 8003668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fa76 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003684:	e005      	b.n	8003692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa69 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 fa78 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d122      	bne.n	80036ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d11b      	bne.n	80036ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0204 	mvn.w	r2, #4
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa4c 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fa3f 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 fa4e 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d122      	bne.n	8003740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b08      	cmp	r3, #8
 8003706:	d11b      	bne.n	8003740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0208 	mvn.w	r2, #8
 8003710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa22 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 800372c:	e005      	b.n	800373a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fa15 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 fa24 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b10      	cmp	r3, #16
 800374c:	d122      	bne.n	8003794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b10      	cmp	r3, #16
 800375a:	d11b      	bne.n	8003794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f06f 0210 	mvn.w	r2, #16
 8003764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2208      	movs	r2, #8
 800376a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f9f8 	bl	8003b70 <HAL_TIM_IC_CaptureCallback>
 8003780:	e005      	b.n	800378e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f9eb 	bl	8003b5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f9fa 	bl	8003b82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10e      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0201 	mvn.w	r2, #1
 80037b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe f888 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d10e      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d107      	bne.n	80037ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fce9 	bl	80041be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b40      	cmp	r3, #64	; 0x40
 8003806:	d107      	bne.n	8003818 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9be 	bl	8003b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b20      	cmp	r3, #32
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b20      	cmp	r3, #32
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fcb4 	bl	80041ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003866:	2302      	movs	r3, #2
 8003868:	e0ae      	b.n	80039c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	f200 809f 	bhi.w	80039b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800387a:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080039b9 	.word	0x080039b9
 8003888:	080039b9 	.word	0x080039b9
 800388c:	080039b9 	.word	0x080039b9
 8003890:	080038f5 	.word	0x080038f5
 8003894:	080039b9 	.word	0x080039b9
 8003898:	080039b9 	.word	0x080039b9
 800389c:	080039b9 	.word	0x080039b9
 80038a0:	08003937 	.word	0x08003937
 80038a4:	080039b9 	.word	0x080039b9
 80038a8:	080039b9 	.word	0x080039b9
 80038ac:	080039b9 	.word	0x080039b9
 80038b0:	08003977 	.word	0x08003977
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f9d6 	bl	8003c6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0208 	orr.w	r2, r2, #8
 80038ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691a      	ldr	r2, [r3, #16]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	619a      	str	r2, [r3, #24]
      break;
 80038f2:	e064      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fa1c 	bl	8003d38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800390e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800391e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6999      	ldr	r1, [r3, #24]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	619a      	str	r2, [r3, #24]
      break;
 8003934:	e043      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fa65 	bl	8003e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0208 	orr.w	r2, r2, #8
 8003950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0204 	bic.w	r2, r2, #4
 8003960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	61da      	str	r2, [r3, #28]
      break;
 8003974:	e023      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	4618      	mov	r0, r3
 800397e:	f000 faaf 	bl	8003ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69d9      	ldr	r1, [r3, #28]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	021a      	lsls	r2, r3, #8
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	61da      	str	r2, [r3, #28]
      break;
 80039b6:	e002      	b.n	80039be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	75fb      	strb	r3, [r7, #23]
      break;
 80039bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_ConfigClockSource+0x1c>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0b4      	b.n	8003b56 <HAL_TIM_ConfigClockSource+0x186>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a24:	d03e      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0xd4>
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	f200 8087 	bhi.w	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	f000 8086 	beq.w	8003b42 <HAL_TIM_ConfigClockSource+0x172>
 8003a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3a:	d87f      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b70      	cmp	r3, #112	; 0x70
 8003a3e:	d01a      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0xa6>
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d87b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b60      	cmp	r3, #96	; 0x60
 8003a46:	d050      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x11a>
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d877      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d03c      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0xfa>
 8003a50:	2b50      	cmp	r3, #80	; 0x50
 8003a52:	d873      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b40      	cmp	r3, #64	; 0x40
 8003a56:	d058      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x13a>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d86f      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d064      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d86b      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d060      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a68:	2b20      	cmp	r3, #32
 8003a6a:	d867      	bhi.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d05c      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d05a      	beq.n	8003b2a <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	e062      	b.n	8003b3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6899      	ldr	r1, [r3, #8]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f000 faf0 	bl	800406a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	609a      	str	r2, [r3, #8]
      break;
 8003aa2:	e04f      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f000 fad9 	bl	800406a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac6:	609a      	str	r2, [r3, #8]
      break;
 8003ac8:	e03c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 fa50 	bl	8003f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2150      	movs	r1, #80	; 0x50
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 faa7 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e02c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 fa6e 	bl	8003fd8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2160      	movs	r1, #96	; 0x60
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fa97 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e01c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f000 fa30 	bl	8003f7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2140      	movs	r1, #64	; 0x40
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fa87 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003b28:	e00c      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4619      	mov	r1, r3
 8003b34:	4610      	mov	r0, r2
 8003b36:	f000 fa7e 	bl	8004036 <TIM_ITRx_SetConfig>
      break;
 8003b3a:	e003      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b40:	e000      	b.n	8003b44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
	...

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a29      	ldr	r2, [pc, #164]	; (8003c60 <TIM_Base_SetConfig+0xb8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x30>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x30>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <TIM_Base_SetConfig+0xbc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x30>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <TIM_Base_SetConfig+0xc0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <TIM_Base_SetConfig+0xb8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_Base_SetConfig+0x62>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf8:	d007      	beq.n	8003c0a <TIM_Base_SetConfig+0x62>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <TIM_Base_SetConfig+0xbc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_Base_SetConfig+0x62>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <TIM_Base_SetConfig+0xc0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a07      	ldr	r2, [pc, #28]	; (8003c60 <TIM_Base_SetConfig+0xb8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d103      	bne.n	8003c50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	615a      	str	r2, [r3, #20]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	40012c00 	.word	0x40012c00
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800

08003c6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f023 0201 	bic.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 0302 	bic.w	r3, r3, #2
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <TIM_OC1_SetConfig+0xc8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10c      	bne.n	8003ce2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0308 	bic.w	r3, r3, #8
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <TIM_OC1_SetConfig+0xc8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d111      	bne.n	8003d0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00

08003d38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f023 0210 	bic.w	r2, r3, #16
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0320 	bic.w	r3, r3, #32
 8003d82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <TIM_OC2_SetConfig+0xd0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10d      	bne.n	8003db4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <TIM_OC2_SetConfig+0xd0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d113      	bne.n	8003de4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	40012c00 	.word	0x40012c00

08003e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	; (8003edc <TIM_OC3_SetConfig+0xd0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10d      	bne.n	8003e86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a14      	ldr	r2, [pc, #80]	; (8003edc <TIM_OC3_SetConfig+0xd0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d113      	bne.n	8003eb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	621a      	str	r2, [r3, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40012c00 	.word	0x40012c00

08003ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0f      	ldr	r2, [pc, #60]	; (8003f78 <TIM_OC4_SetConfig+0x98>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	019b      	lsls	r3, r3, #6
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	40012c00 	.word	0x40012c00

08003f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 030a 	bic.w	r3, r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	f023 0210 	bic.w	r2, r3, #16
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	031b      	lsls	r3, r3, #12
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004014:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	621a      	str	r2, [r3, #32]
}
 800402c:	bf00      	nop
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	f043 0307 	orr.w	r3, r3, #7
 8004058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	609a      	str	r2, [r3, #8]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800406a:	b480      	push	{r7}
 800406c:	b087      	sub	sp, #28
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004084:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	021a      	lsls	r2, r3, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	431a      	orrs	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4313      	orrs	r3, r2
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	609a      	str	r2, [r3, #8]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	401a      	ands	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a1a      	ldr	r2, [r3, #32]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	fa01 f303 	lsl.w	r3, r1, r3
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
}
 80040e6:	bf00      	nop
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e046      	b.n	8004196 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2202      	movs	r2, #2
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00e      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004154:	d009      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d004      	beq.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d10c      	bne.n	8004184 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	4313      	orrs	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800

080041ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e042      	b.n	8004268 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fd ff76 	bl	80020e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fd71 	bl	8004cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b20      	cmp	r3, #32
 800428e:	d16d      	bne.n	800436c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_UART_Transmit+0x2c>
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e066      	b.n	800436e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2221      	movs	r2, #33	; 0x21
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042ae:	f7fe f85f 	bl	8002370 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c8:	d108      	bne.n	80042dc <HAL_UART_Transmit+0x6c>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d104      	bne.n	80042dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	e003      	b.n	80042e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042e4:	e02a      	b.n	800433c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 faf9 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e036      	b.n	800436e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10b      	bne.n	800431e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004314:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3302      	adds	r3, #2
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e007      	b.n	800432e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	3301      	adds	r3, #1
 800432c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1cf      	bne.n	80042e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2200      	movs	r2, #0
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fac9 	bl	80048e8 <UART_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e006      	b.n	800436e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b0ba      	sub	sp, #232	; 0xe8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80043b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10f      	bne.n	80043de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_UART_IRQHandler+0x66>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fbd1 	bl	8004b7e <UART_Receive_IT>
      return;
 80043dc:	e25b      	b.n	8004896 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80043de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80de 	beq.w	80045a4 <HAL_UART_IRQHandler+0x22c>
 80043e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80d1 	beq.w	80045a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_UART_IRQHandler+0xae>
 800440e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f043 0201 	orr.w	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xd2>
 8004432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0202 	orr.w	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_UART_IRQHandler+0xf6>
 8004456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	f043 0204 	orr.w	r2, r3, #4
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d011      	beq.n	800449e <HAL_UART_IRQHandler+0x126>
 800447a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f043 0208 	orr.w	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 81f2 	beq.w	800488c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x14e>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fb5c 	bl	8004b7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <HAL_UART_IRQHandler+0x17a>
 80044ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d04f      	beq.n	8004592 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fa66 	bl	80049c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d041      	beq.n	800458a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800451c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3314      	adds	r3, #20
 800452e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800453e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800454a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1d9      	bne.n	8004506 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2b00      	cmp	r3, #0
 8004558:	d013      	beq.n	8004582 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	4a7e      	ldr	r2, [pc, #504]	; (8004758 <HAL_UART_IRQHandler+0x3e0>)
 8004560:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	4618      	mov	r0, r3
 8004568:	f7fe f854 	bl	8002614 <HAL_DMA_Abort_IT>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800457c:	4610      	mov	r0, r2
 800457e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004580:	e00e      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f99c 	bl	80048c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	e00a      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f998 	bl	80048c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e006      	b.n	80045a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f994 	bl	80048c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800459e:	e175      	b.n	800488c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a0:	bf00      	nop
    return;
 80045a2:	e173      	b.n	800488c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	f040 814f 	bne.w	800484c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8148 	beq.w	800484c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8141 	beq.w	800484c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ca:	2300      	movs	r3, #0
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	60bb      	str	r3, [r7, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 80b6 	beq.w	800475c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8145 	beq.w	8004890 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800460a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800460e:	429a      	cmp	r2, r3
 8004610:	f080 813e 	bcs.w	8004890 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800461a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b20      	cmp	r3, #32
 8004624:	f000 8088 	beq.w	8004738 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004636:	e853 3f00 	ldrex	r3, [r3]
 800463a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800463e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004646:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	330c      	adds	r3, #12
 8004650:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004654:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004660:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800466c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1d9      	bne.n	8004628 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3314      	adds	r3, #20
 800467a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004686:	f023 0301 	bic.w	r3, r3, #1
 800468a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004698:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800469c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e1      	bne.n	8004674 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3314      	adds	r3, #20
 80046b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80046d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80046da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80046e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e3      	bne.n	80046b0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004708:	f023 0310 	bic.w	r3, r3, #16
 800470c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800471a:	65ba      	str	r2, [r7, #88]	; 0x58
 800471c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004722:	e841 2300 	strex	r3, r2, [r1]
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1e3      	bne.n	80046f6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	4618      	mov	r0, r3
 8004734:	f7fd ff33 	bl	800259e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004746:	b29b      	uxth	r3, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	b29b      	uxth	r3, r3
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8bf 	bl	80048d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004754:	e09c      	b.n	8004890 <HAL_UART_IRQHandler+0x518>
 8004756:	bf00      	nop
 8004758:	08004a89 	.word	0x08004a89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004764:	b29b      	uxth	r3, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 808e 	beq.w	8004894 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8089 	beq.w	8004894 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047a6:	647a      	str	r2, [r7, #68]	; 0x44
 80047a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e3      	bne.n	8004782 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3314      	adds	r3, #20
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	623b      	str	r3, [r7, #32]
   return(result);
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80047de:	633a      	str	r2, [r7, #48]	; 0x30
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e3      	bne.n	80047ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0310 	bic.w	r3, r3, #16
 8004816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004824:	61fa      	str	r2, [r7, #28]
 8004826:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004828:	69b9      	ldr	r1, [r7, #24]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	e841 2300 	strex	r3, r2, [r1]
 8004830:	617b      	str	r3, [r7, #20]
   return(result);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1e3      	bne.n	8004800 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800483e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f844 	bl	80048d2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800484a:	e023      	b.n	8004894 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HAL_UART_IRQHandler+0x4f4>
 8004858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f923 	bl	8004ab0 <UART_Transmit_IT>
    return;
 800486a:	e014      	b.n	8004896 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800486c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00e      	beq.n	8004896 <HAL_UART_IRQHandler+0x51e>
 8004878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f962 	bl	8004b4e <UART_EndTransmit_IT>
    return;
 800488a:	e004      	b.n	8004896 <HAL_UART_IRQHandler+0x51e>
    return;
 800488c:	bf00      	nop
 800488e:	e002      	b.n	8004896 <HAL_UART_IRQHandler+0x51e>
      return;
 8004890:	bf00      	nop
 8004892:	e000      	b.n	8004896 <HAL_UART_IRQHandler+0x51e>
      return;
 8004894:	bf00      	nop
  }
}
 8004896:	37e8      	adds	r7, #232	; 0xe8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr

080048ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr

080048d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr

080048e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b090      	sub	sp, #64	; 0x40
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	e050      	b.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d04c      	beq.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
 8004908:	f7fd fd32 	bl	8002370 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004914:	429a      	cmp	r2, r3
 8004916:	d241      	bcs.n	800499c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004938:	637a      	str	r2, [r7, #52]	; 0x34
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3314      	adds	r3, #20
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3314      	adds	r3, #20
 800496a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496c:	623a      	str	r2, [r7, #32]
 800496e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	61bb      	str	r3, [r7, #24]
   return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e5      	bne.n	800494c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e00f      	b.n	80049bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d09f      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3740      	adds	r7, #64	; 0x40
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b095      	sub	sp, #84	; 0x54
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049ec:	643a      	str	r2, [r7, #64]	; 0x40
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d119      	bne.n	8004a70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	330c      	adds	r3, #12
 8004a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f023 0310 	bic.w	r3, r3, #16
 8004a52:	647b      	str	r3, [r7, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a5c:	61ba      	str	r2, [r7, #24]
 8004a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6979      	ldr	r1, [r7, #20]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a7e:	bf00      	nop
 8004a80:	3754      	adds	r7, #84	; 0x54
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr

08004a88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff ff0c 	bl	80048c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa8:	bf00      	nop
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b21      	cmp	r3, #33	; 0x21
 8004ac2:	d13e      	bne.n	8004b42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004acc:	d114      	bne.n	8004af8 <UART_Transmit_IT+0x48>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d110      	bne.n	8004af8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	621a      	str	r2, [r3, #32]
 8004af6:	e008      	b.n	8004b0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	1c59      	adds	r1, r3, #1
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6211      	str	r1, [r2, #32]
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4619      	mov	r1, r3
 8004b18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10f      	bne.n	8004b3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e000      	b.n	8004b44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fe94 	bl	800489c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b08c      	sub	sp, #48	; 0x30
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b22      	cmp	r3, #34	; 0x22
 8004b90:	f040 80ae 	bne.w	8004cf0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9c:	d117      	bne.n	8004bce <UART_Receive_IT+0x50>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d113      	bne.n	8004bce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	; 0x28
 8004bcc:	e026      	b.n	8004c1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d007      	beq.n	8004bf2 <UART_Receive_IT+0x74>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <UART_Receive_IT+0x82>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e008      	b.n	8004c12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d15d      	bne.n	8004cec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 0220 	bic.w	r2, r2, #32
 8004c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d135      	bne.n	8004ce2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	623a      	str	r2, [r7, #32]
 8004c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	69f9      	ldr	r1, [r7, #28]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d10a      	bne.n	8004cd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff fdf9 	bl	80048d2 <HAL_UARTEx_RxEventCallback>
 8004ce0:	e002      	b.n	8004ce8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fde3 	bl	80048ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e002      	b.n	8004cf2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3730      	adds	r7, #48	; 0x30
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d36:	f023 030c 	bic.w	r3, r3, #12
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6812      	ldr	r2, [r2, #0]
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	430b      	orrs	r3, r1
 8004d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a2c      	ldr	r2, [pc, #176]	; (8004e10 <UART_SetConfig+0x114>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d103      	bne.n	8004d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fe fa9c 	bl	80032a0 <HAL_RCC_GetPCLK2Freq>
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	e002      	b.n	8004d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d6c:	f7fe fa84 	bl	8003278 <HAL_RCC_GetPCLK1Freq>
 8004d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4613      	mov	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	009a      	lsls	r2, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <UART_SetConfig+0x118>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	0119      	lsls	r1, r3, #4
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009a      	lsls	r2, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da8:	4b1a      	ldr	r3, [pc, #104]	; (8004e14 <UART_SetConfig+0x118>)
 8004daa:	fba3 0302 	umull	r0, r3, r3, r2
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2064      	movs	r0, #100	; 0x64
 8004db2:	fb00 f303 	mul.w	r3, r0, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	3332      	adds	r3, #50	; 0x32
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <UART_SetConfig+0x118>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc8:	4419      	add	r1, r3
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009a      	lsls	r2, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <UART_SetConfig+0x118>)
 8004de2:	fba3 0302 	umull	r0, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2064      	movs	r0, #100	; 0x64
 8004dea:	fb00 f303 	mul.w	r3, r0, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	3332      	adds	r3, #50	; 0x32
 8004df4:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <UART_SetConfig+0x118>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	f003 020f 	and.w	r2, r3, #15
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	440a      	add	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40013800 	.word	0x40013800
 8004e14:	51eb851f 	.word	0x51eb851f

08004e18 <__errno>:
 8004e18:	4b01      	ldr	r3, [pc, #4]	; (8004e20 <__errno+0x8>)
 8004e1a:	6818      	ldr	r0, [r3, #0]
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000030 	.word	0x20000030

08004e24 <__libc_init_array>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	2600      	movs	r6, #0
 8004e28:	4d0c      	ldr	r5, [pc, #48]	; (8004e5c <__libc_init_array+0x38>)
 8004e2a:	4c0d      	ldr	r4, [pc, #52]	; (8004e60 <__libc_init_array+0x3c>)
 8004e2c:	1b64      	subs	r4, r4, r5
 8004e2e:	10a4      	asrs	r4, r4, #2
 8004e30:	42a6      	cmp	r6, r4
 8004e32:	d109      	bne.n	8004e48 <__libc_init_array+0x24>
 8004e34:	f000 fc5c 	bl	80056f0 <_init>
 8004e38:	2600      	movs	r6, #0
 8004e3a:	4d0a      	ldr	r5, [pc, #40]	; (8004e64 <__libc_init_array+0x40>)
 8004e3c:	4c0a      	ldr	r4, [pc, #40]	; (8004e68 <__libc_init_array+0x44>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	42a6      	cmp	r6, r4
 8004e44:	d105      	bne.n	8004e52 <__libc_init_array+0x2e>
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
 8004e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4c:	4798      	blx	r3
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7ee      	b.n	8004e30 <__libc_init_array+0xc>
 8004e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e56:	4798      	blx	r3
 8004e58:	3601      	adds	r6, #1
 8004e5a:	e7f2      	b.n	8004e42 <__libc_init_array+0x1e>
 8004e5c:	08005890 	.word	0x08005890
 8004e60:	08005890 	.word	0x08005890
 8004e64:	08005890 	.word	0x08005890
 8004e68:	08005894 	.word	0x08005894

08004e6c <memset>:
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4402      	add	r2, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d100      	bne.n	8004e76 <memset+0xa>
 8004e74:	4770      	bx	lr
 8004e76:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7a:	e7f9      	b.n	8004e70 <memset+0x4>

08004e7c <siprintf>:
 8004e7c:	b40e      	push	{r1, r2, r3}
 8004e7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e82:	b500      	push	{lr}
 8004e84:	b09c      	sub	sp, #112	; 0x70
 8004e86:	ab1d      	add	r3, sp, #116	; 0x74
 8004e88:	9002      	str	r0, [sp, #8]
 8004e8a:	9006      	str	r0, [sp, #24]
 8004e8c:	9107      	str	r1, [sp, #28]
 8004e8e:	9104      	str	r1, [sp, #16]
 8004e90:	4808      	ldr	r0, [pc, #32]	; (8004eb4 <siprintf+0x38>)
 8004e92:	4909      	ldr	r1, [pc, #36]	; (8004eb8 <siprintf+0x3c>)
 8004e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e98:	9105      	str	r1, [sp, #20]
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	a902      	add	r1, sp, #8
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	f000 f868 	bl	8004f74 <_svfiprintf_r>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	9b02      	ldr	r3, [sp, #8]
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	b01c      	add	sp, #112	; 0x70
 8004eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eb0:	b003      	add	sp, #12
 8004eb2:	4770      	bx	lr
 8004eb4:	20000030 	.word	0x20000030
 8004eb8:	ffff0208 	.word	0xffff0208

08004ebc <__ssputs_r>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	688e      	ldr	r6, [r1, #8]
 8004ec2:	4682      	mov	sl, r0
 8004ec4:	429e      	cmp	r6, r3
 8004ec6:	460c      	mov	r4, r1
 8004ec8:	4690      	mov	r8, r2
 8004eca:	461f      	mov	r7, r3
 8004ecc:	d838      	bhi.n	8004f40 <__ssputs_r+0x84>
 8004ece:	898a      	ldrh	r2, [r1, #12]
 8004ed0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ed4:	d032      	beq.n	8004f3c <__ssputs_r+0x80>
 8004ed6:	6825      	ldr	r5, [r4, #0]
 8004ed8:	6909      	ldr	r1, [r1, #16]
 8004eda:	3301      	adds	r3, #1
 8004edc:	eba5 0901 	sub.w	r9, r5, r1
 8004ee0:	6965      	ldr	r5, [r4, #20]
 8004ee2:	444b      	add	r3, r9
 8004ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ee8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004eec:	106d      	asrs	r5, r5, #1
 8004eee:	429d      	cmp	r5, r3
 8004ef0:	bf38      	it	cc
 8004ef2:	461d      	movcc	r5, r3
 8004ef4:	0553      	lsls	r3, r2, #21
 8004ef6:	d531      	bpl.n	8004f5c <__ssputs_r+0xa0>
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f000 fb53 	bl	80055a4 <_malloc_r>
 8004efe:	4606      	mov	r6, r0
 8004f00:	b950      	cbnz	r0, 8004f18 <__ssputs_r+0x5c>
 8004f02:	230c      	movs	r3, #12
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	f8ca 3000 	str.w	r3, [sl]
 8004f0c:	89a3      	ldrh	r3, [r4, #12]
 8004f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	464a      	mov	r2, r9
 8004f1a:	6921      	ldr	r1, [r4, #16]
 8004f1c:	f000 face 	bl	80054bc <memcpy>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	6126      	str	r6, [r4, #16]
 8004f2e:	444e      	add	r6, r9
 8004f30:	6026      	str	r6, [r4, #0]
 8004f32:	463e      	mov	r6, r7
 8004f34:	6165      	str	r5, [r4, #20]
 8004f36:	eba5 0509 	sub.w	r5, r5, r9
 8004f3a:	60a5      	str	r5, [r4, #8]
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	d900      	bls.n	8004f42 <__ssputs_r+0x86>
 8004f40:	463e      	mov	r6, r7
 8004f42:	4632      	mov	r2, r6
 8004f44:	4641      	mov	r1, r8
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	f000 fac6 	bl	80054d8 <memmove>
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	6822      	ldr	r2, [r4, #0]
 8004f50:	1b9b      	subs	r3, r3, r6
 8004f52:	4432      	add	r2, r6
 8004f54:	2000      	movs	r0, #0
 8004f56:	60a3      	str	r3, [r4, #8]
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	e7db      	b.n	8004f14 <__ssputs_r+0x58>
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	f000 fb7b 	bl	8005658 <_realloc_r>
 8004f62:	4606      	mov	r6, r0
 8004f64:	2800      	cmp	r0, #0
 8004f66:	d1e1      	bne.n	8004f2c <__ssputs_r+0x70>
 8004f68:	4650      	mov	r0, sl
 8004f6a:	6921      	ldr	r1, [r4, #16]
 8004f6c:	f000 face 	bl	800550c <_free_r>
 8004f70:	e7c7      	b.n	8004f02 <__ssputs_r+0x46>
	...

08004f74 <_svfiprintf_r>:
 8004f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f78:	4698      	mov	r8, r3
 8004f7a:	898b      	ldrh	r3, [r1, #12]
 8004f7c:	4607      	mov	r7, r0
 8004f7e:	061b      	lsls	r3, r3, #24
 8004f80:	460d      	mov	r5, r1
 8004f82:	4614      	mov	r4, r2
 8004f84:	b09d      	sub	sp, #116	; 0x74
 8004f86:	d50e      	bpl.n	8004fa6 <_svfiprintf_r+0x32>
 8004f88:	690b      	ldr	r3, [r1, #16]
 8004f8a:	b963      	cbnz	r3, 8004fa6 <_svfiprintf_r+0x32>
 8004f8c:	2140      	movs	r1, #64	; 0x40
 8004f8e:	f000 fb09 	bl	80055a4 <_malloc_r>
 8004f92:	6028      	str	r0, [r5, #0]
 8004f94:	6128      	str	r0, [r5, #16]
 8004f96:	b920      	cbnz	r0, 8004fa2 <_svfiprintf_r+0x2e>
 8004f98:	230c      	movs	r3, #12
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	e0d1      	b.n	8005146 <_svfiprintf_r+0x1d2>
 8004fa2:	2340      	movs	r3, #64	; 0x40
 8004fa4:	616b      	str	r3, [r5, #20]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8004faa:	2320      	movs	r3, #32
 8004fac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fb0:	2330      	movs	r3, #48	; 0x30
 8004fb2:	f04f 0901 	mov.w	r9, #1
 8004fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005160 <_svfiprintf_r+0x1ec>
 8004fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	469a      	mov	sl, r3
 8004fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fca:	b10a      	cbz	r2, 8004fd0 <_svfiprintf_r+0x5c>
 8004fcc:	2a25      	cmp	r2, #37	; 0x25
 8004fce:	d1f9      	bne.n	8004fc4 <_svfiprintf_r+0x50>
 8004fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004fd4:	d00b      	beq.n	8004fee <_svfiprintf_r+0x7a>
 8004fd6:	465b      	mov	r3, fp
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f7ff ff6d 	bl	8004ebc <__ssputs_r>
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	f000 80aa 	beq.w	800513c <_svfiprintf_r+0x1c8>
 8004fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fea:	445a      	add	r2, fp
 8004fec:	9209      	str	r2, [sp, #36]	; 0x24
 8004fee:	f89a 3000 	ldrb.w	r3, [sl]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 80a2 	beq.w	800513c <_svfiprintf_r+0x1c8>
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8004ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005002:	f10a 0a01 	add.w	sl, sl, #1
 8005006:	9304      	str	r3, [sp, #16]
 8005008:	9307      	str	r3, [sp, #28]
 800500a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800500e:	931a      	str	r3, [sp, #104]	; 0x68
 8005010:	4654      	mov	r4, sl
 8005012:	2205      	movs	r2, #5
 8005014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005018:	4851      	ldr	r0, [pc, #324]	; (8005160 <_svfiprintf_r+0x1ec>)
 800501a:	f000 fa41 	bl	80054a0 <memchr>
 800501e:	9a04      	ldr	r2, [sp, #16]
 8005020:	b9d8      	cbnz	r0, 800505a <_svfiprintf_r+0xe6>
 8005022:	06d0      	lsls	r0, r2, #27
 8005024:	bf44      	itt	mi
 8005026:	2320      	movmi	r3, #32
 8005028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800502c:	0711      	lsls	r1, r2, #28
 800502e:	bf44      	itt	mi
 8005030:	232b      	movmi	r3, #43	; 0x2b
 8005032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005036:	f89a 3000 	ldrb.w	r3, [sl]
 800503a:	2b2a      	cmp	r3, #42	; 0x2a
 800503c:	d015      	beq.n	800506a <_svfiprintf_r+0xf6>
 800503e:	4654      	mov	r4, sl
 8005040:	2000      	movs	r0, #0
 8005042:	f04f 0c0a 	mov.w	ip, #10
 8005046:	9a07      	ldr	r2, [sp, #28]
 8005048:	4621      	mov	r1, r4
 800504a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800504e:	3b30      	subs	r3, #48	; 0x30
 8005050:	2b09      	cmp	r3, #9
 8005052:	d94e      	bls.n	80050f2 <_svfiprintf_r+0x17e>
 8005054:	b1b0      	cbz	r0, 8005084 <_svfiprintf_r+0x110>
 8005056:	9207      	str	r2, [sp, #28]
 8005058:	e014      	b.n	8005084 <_svfiprintf_r+0x110>
 800505a:	eba0 0308 	sub.w	r3, r0, r8
 800505e:	fa09 f303 	lsl.w	r3, r9, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	46a2      	mov	sl, r4
 8005066:	9304      	str	r3, [sp, #16]
 8005068:	e7d2      	b.n	8005010 <_svfiprintf_r+0x9c>
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	1d19      	adds	r1, r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	9103      	str	r1, [sp, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	bfbb      	ittet	lt
 8005076:	425b      	neglt	r3, r3
 8005078:	f042 0202 	orrlt.w	r2, r2, #2
 800507c:	9307      	strge	r3, [sp, #28]
 800507e:	9307      	strlt	r3, [sp, #28]
 8005080:	bfb8      	it	lt
 8005082:	9204      	strlt	r2, [sp, #16]
 8005084:	7823      	ldrb	r3, [r4, #0]
 8005086:	2b2e      	cmp	r3, #46	; 0x2e
 8005088:	d10c      	bne.n	80050a4 <_svfiprintf_r+0x130>
 800508a:	7863      	ldrb	r3, [r4, #1]
 800508c:	2b2a      	cmp	r3, #42	; 0x2a
 800508e:	d135      	bne.n	80050fc <_svfiprintf_r+0x188>
 8005090:	9b03      	ldr	r3, [sp, #12]
 8005092:	3402      	adds	r4, #2
 8005094:	1d1a      	adds	r2, r3, #4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	9203      	str	r2, [sp, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	bfb8      	it	lt
 800509e:	f04f 33ff 	movlt.w	r3, #4294967295
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005170 <_svfiprintf_r+0x1fc>
 80050a8:	2203      	movs	r2, #3
 80050aa:	4650      	mov	r0, sl
 80050ac:	7821      	ldrb	r1, [r4, #0]
 80050ae:	f000 f9f7 	bl	80054a0 <memchr>
 80050b2:	b140      	cbz	r0, 80050c6 <_svfiprintf_r+0x152>
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	eba0 000a 	sub.w	r0, r0, sl
 80050ba:	fa03 f000 	lsl.w	r0, r3, r0
 80050be:	9b04      	ldr	r3, [sp, #16]
 80050c0:	3401      	adds	r4, #1
 80050c2:	4303      	orrs	r3, r0
 80050c4:	9304      	str	r3, [sp, #16]
 80050c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ca:	2206      	movs	r2, #6
 80050cc:	4825      	ldr	r0, [pc, #148]	; (8005164 <_svfiprintf_r+0x1f0>)
 80050ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050d2:	f000 f9e5 	bl	80054a0 <memchr>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d038      	beq.n	800514c <_svfiprintf_r+0x1d8>
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <_svfiprintf_r+0x1f4>)
 80050dc:	bb1b      	cbnz	r3, 8005126 <_svfiprintf_r+0x1b2>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	3307      	adds	r3, #7
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	3308      	adds	r3, #8
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050ec:	4433      	add	r3, r6
 80050ee:	9309      	str	r3, [sp, #36]	; 0x24
 80050f0:	e767      	b.n	8004fc2 <_svfiprintf_r+0x4e>
 80050f2:	460c      	mov	r4, r1
 80050f4:	2001      	movs	r0, #1
 80050f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80050fa:	e7a5      	b.n	8005048 <_svfiprintf_r+0xd4>
 80050fc:	2300      	movs	r3, #0
 80050fe:	f04f 0c0a 	mov.w	ip, #10
 8005102:	4619      	mov	r1, r3
 8005104:	3401      	adds	r4, #1
 8005106:	9305      	str	r3, [sp, #20]
 8005108:	4620      	mov	r0, r4
 800510a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800510e:	3a30      	subs	r2, #48	; 0x30
 8005110:	2a09      	cmp	r2, #9
 8005112:	d903      	bls.n	800511c <_svfiprintf_r+0x1a8>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0c5      	beq.n	80050a4 <_svfiprintf_r+0x130>
 8005118:	9105      	str	r1, [sp, #20]
 800511a:	e7c3      	b.n	80050a4 <_svfiprintf_r+0x130>
 800511c:	4604      	mov	r4, r0
 800511e:	2301      	movs	r3, #1
 8005120:	fb0c 2101 	mla	r1, ip, r1, r2
 8005124:	e7f0      	b.n	8005108 <_svfiprintf_r+0x194>
 8005126:	ab03      	add	r3, sp, #12
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	462a      	mov	r2, r5
 800512c:	4638      	mov	r0, r7
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <_svfiprintf_r+0x1f8>)
 8005130:	a904      	add	r1, sp, #16
 8005132:	f3af 8000 	nop.w
 8005136:	1c42      	adds	r2, r0, #1
 8005138:	4606      	mov	r6, r0
 800513a:	d1d6      	bne.n	80050ea <_svfiprintf_r+0x176>
 800513c:	89ab      	ldrh	r3, [r5, #12]
 800513e:	065b      	lsls	r3, r3, #25
 8005140:	f53f af2c 	bmi.w	8004f9c <_svfiprintf_r+0x28>
 8005144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005146:	b01d      	add	sp, #116	; 0x74
 8005148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514c:	ab03      	add	r3, sp, #12
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	462a      	mov	r2, r5
 8005152:	4638      	mov	r0, r7
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <_svfiprintf_r+0x1f8>)
 8005156:	a904      	add	r1, sp, #16
 8005158:	f000 f87c 	bl	8005254 <_printf_i>
 800515c:	e7eb      	b.n	8005136 <_svfiprintf_r+0x1c2>
 800515e:	bf00      	nop
 8005160:	0800585a 	.word	0x0800585a
 8005164:	08005864 	.word	0x08005864
 8005168:	00000000 	.word	0x00000000
 800516c:	08004ebd 	.word	0x08004ebd
 8005170:	08005860 	.word	0x08005860

08005174 <_printf_common>:
 8005174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005178:	4616      	mov	r6, r2
 800517a:	4699      	mov	r9, r3
 800517c:	688a      	ldr	r2, [r1, #8]
 800517e:	690b      	ldr	r3, [r1, #16]
 8005180:	4607      	mov	r7, r0
 8005182:	4293      	cmp	r3, r2
 8005184:	bfb8      	it	lt
 8005186:	4613      	movlt	r3, r2
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800518e:	460c      	mov	r4, r1
 8005190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005194:	b10a      	cbz	r2, 800519a <_printf_common+0x26>
 8005196:	3301      	adds	r3, #1
 8005198:	6033      	str	r3, [r6, #0]
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	0699      	lsls	r1, r3, #26
 800519e:	bf42      	ittt	mi
 80051a0:	6833      	ldrmi	r3, [r6, #0]
 80051a2:	3302      	addmi	r3, #2
 80051a4:	6033      	strmi	r3, [r6, #0]
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	f015 0506 	ands.w	r5, r5, #6
 80051ac:	d106      	bne.n	80051bc <_printf_common+0x48>
 80051ae:	f104 0a19 	add.w	sl, r4, #25
 80051b2:	68e3      	ldr	r3, [r4, #12]
 80051b4:	6832      	ldr	r2, [r6, #0]
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	42ab      	cmp	r3, r5
 80051ba:	dc28      	bgt.n	800520e <_printf_common+0x9a>
 80051bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051c0:	1e13      	subs	r3, r2, #0
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	bf18      	it	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	0692      	lsls	r2, r2, #26
 80051ca:	d42d      	bmi.n	8005228 <_printf_common+0xb4>
 80051cc:	4649      	mov	r1, r9
 80051ce:	4638      	mov	r0, r7
 80051d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051d4:	47c0      	blx	r8
 80051d6:	3001      	adds	r0, #1
 80051d8:	d020      	beq.n	800521c <_printf_common+0xa8>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	68e5      	ldr	r5, [r4, #12]
 80051de:	f003 0306 	and.w	r3, r3, #6
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	bf18      	it	ne
 80051e6:	2500      	movne	r5, #0
 80051e8:	6832      	ldr	r2, [r6, #0]
 80051ea:	f04f 0600 	mov.w	r6, #0
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	bf08      	it	eq
 80051f2:	1aad      	subeq	r5, r5, r2
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	bf08      	it	eq
 80051f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051fc:	4293      	cmp	r3, r2
 80051fe:	bfc4      	itt	gt
 8005200:	1a9b      	subgt	r3, r3, r2
 8005202:	18ed      	addgt	r5, r5, r3
 8005204:	341a      	adds	r4, #26
 8005206:	42b5      	cmp	r5, r6
 8005208:	d11a      	bne.n	8005240 <_printf_common+0xcc>
 800520a:	2000      	movs	r0, #0
 800520c:	e008      	b.n	8005220 <_printf_common+0xac>
 800520e:	2301      	movs	r3, #1
 8005210:	4652      	mov	r2, sl
 8005212:	4649      	mov	r1, r9
 8005214:	4638      	mov	r0, r7
 8005216:	47c0      	blx	r8
 8005218:	3001      	adds	r0, #1
 800521a:	d103      	bne.n	8005224 <_printf_common+0xb0>
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005224:	3501      	adds	r5, #1
 8005226:	e7c4      	b.n	80051b2 <_printf_common+0x3e>
 8005228:	2030      	movs	r0, #48	; 0x30
 800522a:	18e1      	adds	r1, r4, r3
 800522c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005236:	4422      	add	r2, r4
 8005238:	3302      	adds	r3, #2
 800523a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800523e:	e7c5      	b.n	80051cc <_printf_common+0x58>
 8005240:	2301      	movs	r3, #1
 8005242:	4622      	mov	r2, r4
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	47c0      	blx	r8
 800524a:	3001      	adds	r0, #1
 800524c:	d0e6      	beq.n	800521c <_printf_common+0xa8>
 800524e:	3601      	adds	r6, #1
 8005250:	e7d9      	b.n	8005206 <_printf_common+0x92>
	...

08005254 <_printf_i>:
 8005254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	460c      	mov	r4, r1
 800525a:	7e27      	ldrb	r7, [r4, #24]
 800525c:	4691      	mov	r9, r2
 800525e:	2f78      	cmp	r7, #120	; 0x78
 8005260:	4680      	mov	r8, r0
 8005262:	469a      	mov	sl, r3
 8005264:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005266:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526a:	d807      	bhi.n	800527c <_printf_i+0x28>
 800526c:	2f62      	cmp	r7, #98	; 0x62
 800526e:	d80a      	bhi.n	8005286 <_printf_i+0x32>
 8005270:	2f00      	cmp	r7, #0
 8005272:	f000 80d9 	beq.w	8005428 <_printf_i+0x1d4>
 8005276:	2f58      	cmp	r7, #88	; 0x58
 8005278:	f000 80a4 	beq.w	80053c4 <_printf_i+0x170>
 800527c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005284:	e03a      	b.n	80052fc <_printf_i+0xa8>
 8005286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800528a:	2b15      	cmp	r3, #21
 800528c:	d8f6      	bhi.n	800527c <_printf_i+0x28>
 800528e:	a001      	add	r0, pc, #4	; (adr r0, 8005294 <_printf_i+0x40>)
 8005290:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005294:	080052ed 	.word	0x080052ed
 8005298:	08005301 	.word	0x08005301
 800529c:	0800527d 	.word	0x0800527d
 80052a0:	0800527d 	.word	0x0800527d
 80052a4:	0800527d 	.word	0x0800527d
 80052a8:	0800527d 	.word	0x0800527d
 80052ac:	08005301 	.word	0x08005301
 80052b0:	0800527d 	.word	0x0800527d
 80052b4:	0800527d 	.word	0x0800527d
 80052b8:	0800527d 	.word	0x0800527d
 80052bc:	0800527d 	.word	0x0800527d
 80052c0:	0800540f 	.word	0x0800540f
 80052c4:	08005331 	.word	0x08005331
 80052c8:	080053f1 	.word	0x080053f1
 80052cc:	0800527d 	.word	0x0800527d
 80052d0:	0800527d 	.word	0x0800527d
 80052d4:	08005431 	.word	0x08005431
 80052d8:	0800527d 	.word	0x0800527d
 80052dc:	08005331 	.word	0x08005331
 80052e0:	0800527d 	.word	0x0800527d
 80052e4:	0800527d 	.word	0x0800527d
 80052e8:	080053f9 	.word	0x080053f9
 80052ec:	680b      	ldr	r3, [r1, #0]
 80052ee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052f2:	1d1a      	adds	r2, r3, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	600a      	str	r2, [r1, #0]
 80052f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0a4      	b.n	800544a <_printf_i+0x1f6>
 8005300:	6825      	ldr	r5, [r4, #0]
 8005302:	6808      	ldr	r0, [r1, #0]
 8005304:	062e      	lsls	r6, r5, #24
 8005306:	f100 0304 	add.w	r3, r0, #4
 800530a:	d50a      	bpl.n	8005322 <_printf_i+0xce>
 800530c:	6805      	ldr	r5, [r0, #0]
 800530e:	600b      	str	r3, [r1, #0]
 8005310:	2d00      	cmp	r5, #0
 8005312:	da03      	bge.n	800531c <_printf_i+0xc8>
 8005314:	232d      	movs	r3, #45	; 0x2d
 8005316:	426d      	negs	r5, r5
 8005318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531c:	230a      	movs	r3, #10
 800531e:	485e      	ldr	r0, [pc, #376]	; (8005498 <_printf_i+0x244>)
 8005320:	e019      	b.n	8005356 <_printf_i+0x102>
 8005322:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005326:	6805      	ldr	r5, [r0, #0]
 8005328:	600b      	str	r3, [r1, #0]
 800532a:	bf18      	it	ne
 800532c:	b22d      	sxthne	r5, r5
 800532e:	e7ef      	b.n	8005310 <_printf_i+0xbc>
 8005330:	680b      	ldr	r3, [r1, #0]
 8005332:	6825      	ldr	r5, [r4, #0]
 8005334:	1d18      	adds	r0, r3, #4
 8005336:	6008      	str	r0, [r1, #0]
 8005338:	0628      	lsls	r0, r5, #24
 800533a:	d501      	bpl.n	8005340 <_printf_i+0xec>
 800533c:	681d      	ldr	r5, [r3, #0]
 800533e:	e002      	b.n	8005346 <_printf_i+0xf2>
 8005340:	0669      	lsls	r1, r5, #25
 8005342:	d5fb      	bpl.n	800533c <_printf_i+0xe8>
 8005344:	881d      	ldrh	r5, [r3, #0]
 8005346:	2f6f      	cmp	r7, #111	; 0x6f
 8005348:	bf0c      	ite	eq
 800534a:	2308      	moveq	r3, #8
 800534c:	230a      	movne	r3, #10
 800534e:	4852      	ldr	r0, [pc, #328]	; (8005498 <_printf_i+0x244>)
 8005350:	2100      	movs	r1, #0
 8005352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005356:	6866      	ldr	r6, [r4, #4]
 8005358:	2e00      	cmp	r6, #0
 800535a:	bfa8      	it	ge
 800535c:	6821      	ldrge	r1, [r4, #0]
 800535e:	60a6      	str	r6, [r4, #8]
 8005360:	bfa4      	itt	ge
 8005362:	f021 0104 	bicge.w	r1, r1, #4
 8005366:	6021      	strge	r1, [r4, #0]
 8005368:	b90d      	cbnz	r5, 800536e <_printf_i+0x11a>
 800536a:	2e00      	cmp	r6, #0
 800536c:	d04d      	beq.n	800540a <_printf_i+0x1b6>
 800536e:	4616      	mov	r6, r2
 8005370:	fbb5 f1f3 	udiv	r1, r5, r3
 8005374:	fb03 5711 	mls	r7, r3, r1, r5
 8005378:	5dc7      	ldrb	r7, [r0, r7]
 800537a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800537e:	462f      	mov	r7, r5
 8005380:	42bb      	cmp	r3, r7
 8005382:	460d      	mov	r5, r1
 8005384:	d9f4      	bls.n	8005370 <_printf_i+0x11c>
 8005386:	2b08      	cmp	r3, #8
 8005388:	d10b      	bne.n	80053a2 <_printf_i+0x14e>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	07df      	lsls	r7, r3, #31
 800538e:	d508      	bpl.n	80053a2 <_printf_i+0x14e>
 8005390:	6923      	ldr	r3, [r4, #16]
 8005392:	6861      	ldr	r1, [r4, #4]
 8005394:	4299      	cmp	r1, r3
 8005396:	bfde      	ittt	le
 8005398:	2330      	movle	r3, #48	; 0x30
 800539a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800539e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053a2:	1b92      	subs	r2, r2, r6
 80053a4:	6122      	str	r2, [r4, #16]
 80053a6:	464b      	mov	r3, r9
 80053a8:	4621      	mov	r1, r4
 80053aa:	4640      	mov	r0, r8
 80053ac:	f8cd a000 	str.w	sl, [sp]
 80053b0:	aa03      	add	r2, sp, #12
 80053b2:	f7ff fedf 	bl	8005174 <_printf_common>
 80053b6:	3001      	adds	r0, #1
 80053b8:	d14c      	bne.n	8005454 <_printf_i+0x200>
 80053ba:	f04f 30ff 	mov.w	r0, #4294967295
 80053be:	b004      	add	sp, #16
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	4834      	ldr	r0, [pc, #208]	; (8005498 <_printf_i+0x244>)
 80053c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053ca:	680e      	ldr	r6, [r1, #0]
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80053d2:	061f      	lsls	r7, r3, #24
 80053d4:	600e      	str	r6, [r1, #0]
 80053d6:	d514      	bpl.n	8005402 <_printf_i+0x1ae>
 80053d8:	07d9      	lsls	r1, r3, #31
 80053da:	bf44      	itt	mi
 80053dc:	f043 0320 	orrmi.w	r3, r3, #32
 80053e0:	6023      	strmi	r3, [r4, #0]
 80053e2:	b91d      	cbnz	r5, 80053ec <_printf_i+0x198>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f023 0320 	bic.w	r3, r3, #32
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	2310      	movs	r3, #16
 80053ee:	e7af      	b.n	8005350 <_printf_i+0xfc>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	f043 0320 	orr.w	r3, r3, #32
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	2378      	movs	r3, #120	; 0x78
 80053fa:	4828      	ldr	r0, [pc, #160]	; (800549c <_printf_i+0x248>)
 80053fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005400:	e7e3      	b.n	80053ca <_printf_i+0x176>
 8005402:	065e      	lsls	r6, r3, #25
 8005404:	bf48      	it	mi
 8005406:	b2ad      	uxthmi	r5, r5
 8005408:	e7e6      	b.n	80053d8 <_printf_i+0x184>
 800540a:	4616      	mov	r6, r2
 800540c:	e7bb      	b.n	8005386 <_printf_i+0x132>
 800540e:	680b      	ldr	r3, [r1, #0]
 8005410:	6826      	ldr	r6, [r4, #0]
 8005412:	1d1d      	adds	r5, r3, #4
 8005414:	6960      	ldr	r0, [r4, #20]
 8005416:	600d      	str	r5, [r1, #0]
 8005418:	0635      	lsls	r5, r6, #24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	d501      	bpl.n	8005422 <_printf_i+0x1ce>
 800541e:	6018      	str	r0, [r3, #0]
 8005420:	e002      	b.n	8005428 <_printf_i+0x1d4>
 8005422:	0671      	lsls	r1, r6, #25
 8005424:	d5fb      	bpl.n	800541e <_printf_i+0x1ca>
 8005426:	8018      	strh	r0, [r3, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	4616      	mov	r6, r2
 800542c:	6123      	str	r3, [r4, #16]
 800542e:	e7ba      	b.n	80053a6 <_printf_i+0x152>
 8005430:	680b      	ldr	r3, [r1, #0]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	600a      	str	r2, [r1, #0]
 8005436:	681e      	ldr	r6, [r3, #0]
 8005438:	2100      	movs	r1, #0
 800543a:	4630      	mov	r0, r6
 800543c:	6862      	ldr	r2, [r4, #4]
 800543e:	f000 f82f 	bl	80054a0 <memchr>
 8005442:	b108      	cbz	r0, 8005448 <_printf_i+0x1f4>
 8005444:	1b80      	subs	r0, r0, r6
 8005446:	6060      	str	r0, [r4, #4]
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	2300      	movs	r3, #0
 800544e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005452:	e7a8      	b.n	80053a6 <_printf_i+0x152>
 8005454:	4632      	mov	r2, r6
 8005456:	4649      	mov	r1, r9
 8005458:	4640      	mov	r0, r8
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	47d0      	blx	sl
 800545e:	3001      	adds	r0, #1
 8005460:	d0ab      	beq.n	80053ba <_printf_i+0x166>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	079b      	lsls	r3, r3, #30
 8005466:	d413      	bmi.n	8005490 <_printf_i+0x23c>
 8005468:	68e0      	ldr	r0, [r4, #12]
 800546a:	9b03      	ldr	r3, [sp, #12]
 800546c:	4298      	cmp	r0, r3
 800546e:	bfb8      	it	lt
 8005470:	4618      	movlt	r0, r3
 8005472:	e7a4      	b.n	80053be <_printf_i+0x16a>
 8005474:	2301      	movs	r3, #1
 8005476:	4632      	mov	r2, r6
 8005478:	4649      	mov	r1, r9
 800547a:	4640      	mov	r0, r8
 800547c:	47d0      	blx	sl
 800547e:	3001      	adds	r0, #1
 8005480:	d09b      	beq.n	80053ba <_printf_i+0x166>
 8005482:	3501      	adds	r5, #1
 8005484:	68e3      	ldr	r3, [r4, #12]
 8005486:	9903      	ldr	r1, [sp, #12]
 8005488:	1a5b      	subs	r3, r3, r1
 800548a:	42ab      	cmp	r3, r5
 800548c:	dcf2      	bgt.n	8005474 <_printf_i+0x220>
 800548e:	e7eb      	b.n	8005468 <_printf_i+0x214>
 8005490:	2500      	movs	r5, #0
 8005492:	f104 0619 	add.w	r6, r4, #25
 8005496:	e7f5      	b.n	8005484 <_printf_i+0x230>
 8005498:	0800586b 	.word	0x0800586b
 800549c:	0800587c 	.word	0x0800587c

080054a0 <memchr>:
 80054a0:	4603      	mov	r3, r0
 80054a2:	b510      	push	{r4, lr}
 80054a4:	b2c9      	uxtb	r1, r1
 80054a6:	4402      	add	r2, r0
 80054a8:	4293      	cmp	r3, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	d101      	bne.n	80054b2 <memchr+0x12>
 80054ae:	2000      	movs	r0, #0
 80054b0:	e003      	b.n	80054ba <memchr+0x1a>
 80054b2:	7804      	ldrb	r4, [r0, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	428c      	cmp	r4, r1
 80054b8:	d1f6      	bne.n	80054a8 <memchr+0x8>
 80054ba:	bd10      	pop	{r4, pc}

080054bc <memcpy>:
 80054bc:	440a      	add	r2, r1
 80054be:	4291      	cmp	r1, r2
 80054c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054c4:	d100      	bne.n	80054c8 <memcpy+0xc>
 80054c6:	4770      	bx	lr
 80054c8:	b510      	push	{r4, lr}
 80054ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ce:	4291      	cmp	r1, r2
 80054d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054d4:	d1f9      	bne.n	80054ca <memcpy+0xe>
 80054d6:	bd10      	pop	{r4, pc}

080054d8 <memmove>:
 80054d8:	4288      	cmp	r0, r1
 80054da:	b510      	push	{r4, lr}
 80054dc:	eb01 0402 	add.w	r4, r1, r2
 80054e0:	d902      	bls.n	80054e8 <memmove+0x10>
 80054e2:	4284      	cmp	r4, r0
 80054e4:	4623      	mov	r3, r4
 80054e6:	d807      	bhi.n	80054f8 <memmove+0x20>
 80054e8:	1e43      	subs	r3, r0, #1
 80054ea:	42a1      	cmp	r1, r4
 80054ec:	d008      	beq.n	8005500 <memmove+0x28>
 80054ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80054f6:	e7f8      	b.n	80054ea <memmove+0x12>
 80054f8:	4601      	mov	r1, r0
 80054fa:	4402      	add	r2, r0
 80054fc:	428a      	cmp	r2, r1
 80054fe:	d100      	bne.n	8005502 <memmove+0x2a>
 8005500:	bd10      	pop	{r4, pc}
 8005502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800550a:	e7f7      	b.n	80054fc <memmove+0x24>

0800550c <_free_r>:
 800550c:	b538      	push	{r3, r4, r5, lr}
 800550e:	4605      	mov	r5, r0
 8005510:	2900      	cmp	r1, #0
 8005512:	d043      	beq.n	800559c <_free_r+0x90>
 8005514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005518:	1f0c      	subs	r4, r1, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	bfb8      	it	lt
 800551e:	18e4      	addlt	r4, r4, r3
 8005520:	f000 f8d0 	bl	80056c4 <__malloc_lock>
 8005524:	4a1e      	ldr	r2, [pc, #120]	; (80055a0 <_free_r+0x94>)
 8005526:	6813      	ldr	r3, [r2, #0]
 8005528:	4610      	mov	r0, r2
 800552a:	b933      	cbnz	r3, 800553a <_free_r+0x2e>
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	6014      	str	r4, [r2, #0]
 8005530:	4628      	mov	r0, r5
 8005532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005536:	f000 b8cb 	b.w	80056d0 <__malloc_unlock>
 800553a:	42a3      	cmp	r3, r4
 800553c:	d90a      	bls.n	8005554 <_free_r+0x48>
 800553e:	6821      	ldr	r1, [r4, #0]
 8005540:	1862      	adds	r2, r4, r1
 8005542:	4293      	cmp	r3, r2
 8005544:	bf01      	itttt	eq
 8005546:	681a      	ldreq	r2, [r3, #0]
 8005548:	685b      	ldreq	r3, [r3, #4]
 800554a:	1852      	addeq	r2, r2, r1
 800554c:	6022      	streq	r2, [r4, #0]
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	6004      	str	r4, [r0, #0]
 8005552:	e7ed      	b.n	8005530 <_free_r+0x24>
 8005554:	461a      	mov	r2, r3
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	b10b      	cbz	r3, 800555e <_free_r+0x52>
 800555a:	42a3      	cmp	r3, r4
 800555c:	d9fa      	bls.n	8005554 <_free_r+0x48>
 800555e:	6811      	ldr	r1, [r2, #0]
 8005560:	1850      	adds	r0, r2, r1
 8005562:	42a0      	cmp	r0, r4
 8005564:	d10b      	bne.n	800557e <_free_r+0x72>
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	4401      	add	r1, r0
 800556a:	1850      	adds	r0, r2, r1
 800556c:	4283      	cmp	r3, r0
 800556e:	6011      	str	r1, [r2, #0]
 8005570:	d1de      	bne.n	8005530 <_free_r+0x24>
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4401      	add	r1, r0
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	6053      	str	r3, [r2, #4]
 800557c:	e7d8      	b.n	8005530 <_free_r+0x24>
 800557e:	d902      	bls.n	8005586 <_free_r+0x7a>
 8005580:	230c      	movs	r3, #12
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	e7d4      	b.n	8005530 <_free_r+0x24>
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1821      	adds	r1, r4, r0
 800558a:	428b      	cmp	r3, r1
 800558c:	bf01      	itttt	eq
 800558e:	6819      	ldreq	r1, [r3, #0]
 8005590:	685b      	ldreq	r3, [r3, #4]
 8005592:	1809      	addeq	r1, r1, r0
 8005594:	6021      	streq	r1, [r4, #0]
 8005596:	6063      	str	r3, [r4, #4]
 8005598:	6054      	str	r4, [r2, #4]
 800559a:	e7c9      	b.n	8005530 <_free_r+0x24>
 800559c:	bd38      	pop	{r3, r4, r5, pc}
 800559e:	bf00      	nop
 80055a0:	20000218 	.word	0x20000218

080055a4 <_malloc_r>:
 80055a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a6:	1ccd      	adds	r5, r1, #3
 80055a8:	f025 0503 	bic.w	r5, r5, #3
 80055ac:	3508      	adds	r5, #8
 80055ae:	2d0c      	cmp	r5, #12
 80055b0:	bf38      	it	cc
 80055b2:	250c      	movcc	r5, #12
 80055b4:	2d00      	cmp	r5, #0
 80055b6:	4606      	mov	r6, r0
 80055b8:	db01      	blt.n	80055be <_malloc_r+0x1a>
 80055ba:	42a9      	cmp	r1, r5
 80055bc:	d903      	bls.n	80055c6 <_malloc_r+0x22>
 80055be:	230c      	movs	r3, #12
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	2000      	movs	r0, #0
 80055c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055c6:	f000 f87d 	bl	80056c4 <__malloc_lock>
 80055ca:	4921      	ldr	r1, [pc, #132]	; (8005650 <_malloc_r+0xac>)
 80055cc:	680a      	ldr	r2, [r1, #0]
 80055ce:	4614      	mov	r4, r2
 80055d0:	b99c      	cbnz	r4, 80055fa <_malloc_r+0x56>
 80055d2:	4f20      	ldr	r7, [pc, #128]	; (8005654 <_malloc_r+0xb0>)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	b923      	cbnz	r3, 80055e2 <_malloc_r+0x3e>
 80055d8:	4621      	mov	r1, r4
 80055da:	4630      	mov	r0, r6
 80055dc:	f000 f862 	bl	80056a4 <_sbrk_r>
 80055e0:	6038      	str	r0, [r7, #0]
 80055e2:	4629      	mov	r1, r5
 80055e4:	4630      	mov	r0, r6
 80055e6:	f000 f85d 	bl	80056a4 <_sbrk_r>
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	d123      	bne.n	8005636 <_malloc_r+0x92>
 80055ee:	230c      	movs	r3, #12
 80055f0:	4630      	mov	r0, r6
 80055f2:	6033      	str	r3, [r6, #0]
 80055f4:	f000 f86c 	bl	80056d0 <__malloc_unlock>
 80055f8:	e7e3      	b.n	80055c2 <_malloc_r+0x1e>
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	1b5b      	subs	r3, r3, r5
 80055fe:	d417      	bmi.n	8005630 <_malloc_r+0x8c>
 8005600:	2b0b      	cmp	r3, #11
 8005602:	d903      	bls.n	800560c <_malloc_r+0x68>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	441c      	add	r4, r3
 8005608:	6025      	str	r5, [r4, #0]
 800560a:	e004      	b.n	8005616 <_malloc_r+0x72>
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	42a2      	cmp	r2, r4
 8005610:	bf0c      	ite	eq
 8005612:	600b      	streq	r3, [r1, #0]
 8005614:	6053      	strne	r3, [r2, #4]
 8005616:	4630      	mov	r0, r6
 8005618:	f000 f85a 	bl	80056d0 <__malloc_unlock>
 800561c:	f104 000b 	add.w	r0, r4, #11
 8005620:	1d23      	adds	r3, r4, #4
 8005622:	f020 0007 	bic.w	r0, r0, #7
 8005626:	1ac2      	subs	r2, r0, r3
 8005628:	d0cc      	beq.n	80055c4 <_malloc_r+0x20>
 800562a:	1a1b      	subs	r3, r3, r0
 800562c:	50a3      	str	r3, [r4, r2]
 800562e:	e7c9      	b.n	80055c4 <_malloc_r+0x20>
 8005630:	4622      	mov	r2, r4
 8005632:	6864      	ldr	r4, [r4, #4]
 8005634:	e7cc      	b.n	80055d0 <_malloc_r+0x2c>
 8005636:	1cc4      	adds	r4, r0, #3
 8005638:	f024 0403 	bic.w	r4, r4, #3
 800563c:	42a0      	cmp	r0, r4
 800563e:	d0e3      	beq.n	8005608 <_malloc_r+0x64>
 8005640:	1a21      	subs	r1, r4, r0
 8005642:	4630      	mov	r0, r6
 8005644:	f000 f82e 	bl	80056a4 <_sbrk_r>
 8005648:	3001      	adds	r0, #1
 800564a:	d1dd      	bne.n	8005608 <_malloc_r+0x64>
 800564c:	e7cf      	b.n	80055ee <_malloc_r+0x4a>
 800564e:	bf00      	nop
 8005650:	20000218 	.word	0x20000218
 8005654:	2000021c 	.word	0x2000021c

08005658 <_realloc_r>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	4607      	mov	r7, r0
 800565c:	4614      	mov	r4, r2
 800565e:	460e      	mov	r6, r1
 8005660:	b921      	cbnz	r1, 800566c <_realloc_r+0x14>
 8005662:	4611      	mov	r1, r2
 8005664:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005668:	f7ff bf9c 	b.w	80055a4 <_malloc_r>
 800566c:	b922      	cbnz	r2, 8005678 <_realloc_r+0x20>
 800566e:	f7ff ff4d 	bl	800550c <_free_r>
 8005672:	4625      	mov	r5, r4
 8005674:	4628      	mov	r0, r5
 8005676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005678:	f000 f830 	bl	80056dc <_malloc_usable_size_r>
 800567c:	42a0      	cmp	r0, r4
 800567e:	d20f      	bcs.n	80056a0 <_realloc_r+0x48>
 8005680:	4621      	mov	r1, r4
 8005682:	4638      	mov	r0, r7
 8005684:	f7ff ff8e 	bl	80055a4 <_malloc_r>
 8005688:	4605      	mov	r5, r0
 800568a:	2800      	cmp	r0, #0
 800568c:	d0f2      	beq.n	8005674 <_realloc_r+0x1c>
 800568e:	4631      	mov	r1, r6
 8005690:	4622      	mov	r2, r4
 8005692:	f7ff ff13 	bl	80054bc <memcpy>
 8005696:	4631      	mov	r1, r6
 8005698:	4638      	mov	r0, r7
 800569a:	f7ff ff37 	bl	800550c <_free_r>
 800569e:	e7e9      	b.n	8005674 <_realloc_r+0x1c>
 80056a0:	4635      	mov	r5, r6
 80056a2:	e7e7      	b.n	8005674 <_realloc_r+0x1c>

080056a4 <_sbrk_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	2300      	movs	r3, #0
 80056a8:	4d05      	ldr	r5, [pc, #20]	; (80056c0 <_sbrk_r+0x1c>)
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	f7fc fda4 	bl	80021fc <_sbrk>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_sbrk_r+0x1a>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_sbrk_r+0x1a>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	2000035c 	.word	0x2000035c

080056c4 <__malloc_lock>:
 80056c4:	4801      	ldr	r0, [pc, #4]	; (80056cc <__malloc_lock+0x8>)
 80056c6:	f000 b811 	b.w	80056ec <__retarget_lock_acquire_recursive>
 80056ca:	bf00      	nop
 80056cc:	20000364 	.word	0x20000364

080056d0 <__malloc_unlock>:
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <__malloc_unlock+0x8>)
 80056d2:	f000 b80c 	b.w	80056ee <__retarget_lock_release_recursive>
 80056d6:	bf00      	nop
 80056d8:	20000364 	.word	0x20000364

080056dc <_malloc_usable_size_r>:
 80056dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e0:	1f18      	subs	r0, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	bfbc      	itt	lt
 80056e6:	580b      	ldrlt	r3, [r1, r0]
 80056e8:	18c0      	addlt	r0, r0, r3
 80056ea:	4770      	bx	lr

080056ec <__retarget_lock_acquire_recursive>:
 80056ec:	4770      	bx	lr

080056ee <__retarget_lock_release_recursive>:
 80056ee:	4770      	bx	lr

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
